# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetClusterNetworkResult',
    'AwaitableGetClusterNetworkResult',
    'get_cluster_network',
    'get_cluster_network_output',
]

@pulumi.output_type
class GetClusterNetworkResult:
    """
    A collection of values returned by getClusterNetwork.
    """
    def __init__(__self__, default_physical_nic=None, description=None, enable=None, id=None, name=None, state=None, tags=None):
        if default_physical_nic and not isinstance(default_physical_nic, str):
            raise TypeError("Expected argument 'default_physical_nic' to be a str")
        pulumi.set(__self__, "default_physical_nic", default_physical_nic)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if enable and not isinstance(enable, bool):
            raise TypeError("Expected argument 'enable' to be a bool")
        pulumi.set(__self__, "enable", enable)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="defaultPhysicalNic")
    def default_physical_nic(self) -> str:
        return pulumi.get(self, "default_physical_nic")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Any text you want that better describes this resource
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enable(self) -> bool:
        return pulumi.get(self, "enable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        A unique name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def state(self) -> str:
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def tags(self) -> Mapping[str, Any]:
        return pulumi.get(self, "tags")


class AwaitableGetClusterNetworkResult(GetClusterNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterNetworkResult(
            default_physical_nic=self.default_physical_nic,
            description=self.description,
            enable=self.enable,
            id=self.id,
            name=self.name,
            state=self.state,
            tags=self.tags)


def get_cluster_network(name: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterNetworkResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_harvester as harvester

    vlan = harvester.get_cluster_network(name="vlan")
    ```


    :param str name: A unique name
    """
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('harvester:index/getClusterNetwork:getClusterNetwork', __args__, opts=opts, typ=GetClusterNetworkResult).value

    return AwaitableGetClusterNetworkResult(
        default_physical_nic=__ret__.default_physical_nic,
        description=__ret__.description,
        enable=__ret__.enable,
        id=__ret__.id,
        name=__ret__.name,
        state=__ret__.state,
        tags=__ret__.tags)


@_utilities.lift_output_func(get_cluster_network)
def get_cluster_network_output(name: Optional[pulumi.Input[str]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterNetworkResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_harvester as harvester

    vlan = harvester.get_cluster_network(name="vlan")
    ```


    :param str name: A unique name
    """
    ...
