# generated by datamodel-codegen:
#   filename:  schema/entity/services/connections/dashboard/metabaseConnection.json
#   timestamp: 2022-05-12T14:41:42+00:00

from __future__ import annotations

from enum import Enum
from typing import Optional

from pydantic import AnyUrl, BaseModel, Extra, Field, SecretStr

from .. import connectionBasicType


class MetabaseType(Enum):
    Metabase = 'Metabase'


class MetabaseConnection(BaseModel):
    class Config:
        extra = Extra.forbid

    type: Optional[MetabaseType] = Field(
        MetabaseType.Metabase, description='Service Type', title='Service Type'
    )
    username: str = Field(
        ...,
        description='username to connect  to the Metabase. This user should have privileges to read all the metadata in Metabase.',
        title='Username',
    )
    password: Optional[SecretStr] = Field(
        None, description='password to connect  to the Metabase.', title='Password'
    )
    hostPort: AnyUrl = Field(
        ..., description='Host and Port of Metabase instance.', title='Host and Port'
    )
    dbServiceName: Optional[str] = Field(
        None,
        description='Database Service Name for creation of lineage',
        title='Database Service Name',
    )
    supportsMetadataExtraction: Optional[
        connectionBasicType.SupportsMetadataExtraction
    ] = Field(None, title='Supports Metadata Extraction')
