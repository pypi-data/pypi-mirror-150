{"version":3,"file":"ec73b06c.js","mappings":";;;AA4CA;;;AAMA;;AAEA;;;;;AAKA;;;;;AAKA;AAEA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAvCA;ACOA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAvCA;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDA;AAoEA;;AApEA;ACWA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACiFA;AC7EA;AAOA;AACA;;AAEA;;AAEA;;AAEA;;;AAGA;AAIA;;AAIA;;AAMA;;AAGA;;AAIA;;AAGA;;;;AAOA;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9DA;;ACuBA;;AAIA;;AAGA;AACA;;;;AAIA;AAEA;;;;;AAKA;;AAEA;;;AAQA;;;AAIA;AAEA;AACA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9DA;;;;;AC4DA;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;;;;;AAKA;;;;;AAKA;;;;;;;AAOA;AACA;;;AAGA;;AAGA;AACA;AACA;;AAEA;;AAGA;AAEA;AACA;AAEA;;AAGA;AACA;AACA;AACA;;AAWA;;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA/FA;;AChCA;;;;AAOA;;;;;;AAlBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-alert.ts","webpack://home-assistant-frontend/./src/components/ha-button-menu.ts","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/layouts/ha-app-layout.js","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-navigation.ts","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-updates.ts","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-dashboard.ts","webpack://home-assistant-frontend/./src/panels/config/ha-config-section.ts"],"sourcesContent":["import {\n  mdiAlertCircleOutline,\n  mdiAlertOutline,\n  mdiCheckboxMarkedCircleOutline,\n  mdiClose,\n  mdiInformationOutline,\n} from \"@mdi/js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport \"./ha-icon-button\";\nimport \"./ha-svg-icon\";\n\nconst ALERT_ICONS = {\n  info: mdiInformationOutline,\n  warning: mdiAlertOutline,\n  error: mdiAlertCircleOutline,\n  success: mdiCheckboxMarkedCircleOutline,\n};\n\ndeclare global {\n  interface HASSDomEvents {\n    \"alert-dismissed-clicked\": undefined;\n  }\n}\n\n@customElement(\"ha-alert\")\nclass HaAlert extends LitElement {\n  @property() public title = \"\";\n\n  @property({ attribute: \"alert-type\" }) public alertType:\n    | \"info\"\n    | \"warning\"\n    | \"error\"\n    | \"success\" = \"info\";\n\n  @property({ type: Boolean }) public dismissable = false;\n\n  @property({ type: Boolean }) public rtl = false;\n\n  public render() {\n    return html`\n      <div\n        class=\"issue-type ${classMap({\n          rtl: this.rtl,\n          [this.alertType]: true,\n        })}\"\n        role=\"alert\"\n      >\n        <div class=\"icon ${this.title ? \"\" : \"no-title\"}\">\n          <slot name=\"icon\">\n            <ha-svg-icon .path=${ALERT_ICONS[this.alertType]}></ha-svg-icon>\n          </slot>\n        </div>\n        <div class=\"content\">\n          <div class=\"main-content\">\n            ${this.title ? html`<div class=\"title\">${this.title}</div>` : \"\"}\n            <slot></slot>\n          </div>\n          <div class=\"action\">\n            <slot name=\"action\">\n              ${this.dismissable\n                ? html`<ha-icon-button\n                    @click=${this._dismiss_clicked}\n                    label=\"Dismiss alert\"\n                    .path=${mdiClose}\n                  ></ha-icon-button>`\n                : \"\"}\n            </slot>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _dismiss_clicked() {\n    fireEvent(this, \"alert-dismissed-clicked\");\n  }\n\n  static styles = css`\n    .issue-type {\n      position: relative;\n      padding: 8px;\n      display: flex;\n      margin: 4px 0;\n    }\n    .issue-type.rtl {\n      flex-direction: row-reverse;\n    }\n    .issue-type::after {\n      position: absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      opacity: 0.12;\n      pointer-events: none;\n      content: \"\";\n      border-radius: 4px;\n    }\n    .icon {\n      z-index: 1;\n    }\n    .icon.no-title {\n      align-self: center;\n    }\n    .issue-type.rtl > .content {\n      flex-direction: row-reverse;\n      text-align: right;\n    }\n    .content {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n    .action {\n      z-index: 1;\n      width: min-content;\n      --mdc-theme-primary: var(--primary-text-color);\n    }\n    .main-content {\n      overflow-wrap: anywhere;\n      word-break: break-word;\n      margin-left: 8px;\n      margin-right: 0;\n    }\n    .issue-type.rtl > .content > .main-content {\n      margin-left: 0;\n      margin-right: 8px;\n    }\n    .title {\n      margin-top: 2px;\n      font-weight: bold;\n    }\n    .action mwc-button,\n    .action ha-icon-button {\n      --mdc-theme-primary: var(--primary-text-color);\n      --mdc-icon-button-size: 36px;\n    }\n    .issue-type.info > .icon {\n      color: var(--info-color);\n    }\n    .issue-type.info::after {\n      background-color: var(--info-color);\n    }\n\n    .issue-type.warning > .icon {\n      color: var(--warning-color);\n    }\n    .issue-type.warning::after {\n      background-color: var(--warning-color);\n    }\n\n    .issue-type.error > .icon {\n      color: var(--error-color);\n    }\n    .issue-type.error::after {\n      background-color: var(--error-color);\n    }\n\n    .issue-type.success > .icon {\n      color: var(--success-color);\n    }\n    .issue-type.success::after {\n      background-color: var(--success-color);\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-alert\": HaAlert;\n  }\n}\n","import \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  @property() public corner: Corner = \"TOP_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x?: number;\n\n  @property({ type: Number }) public y?: number;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\"></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this;\n    this._menu!.show();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, #F7ECEB)\n        );\n        border-radius: var(--ha-card-border-radius, 20px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","/* eslint-plugin-disable lit */\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/*\nThis code is copied from app-header-layout.\n'fullbleed' support is removed as Home Assisstant doesn't use it.\ntransform: translate(0) is added.\n*/\n/*\n  FIXME(polymer-modulizer): the above comments were extracted\n  from HTML and may be out of place here. Review them and\n  then delete this comment!\n*/\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport \"@polymer/polymer/polymer-element\";\n\nclass HaAppLayout extends customElements.get(\"app-header-layout\") {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          /**\n         * Force app-header-layout to have its own stacking context so that its parent can\n         * control the stacking of it relative to other elements (e.g. app-drawer-layout).\n         * This could be done using \\`isolation: isolate\\`, but that's not well supported\n         * across browsers.\n         */\n          position: relative;\n          z-index: 0;\n        }\n\n        #wrapper ::slotted([slot=\"header\"]) {\n          @apply --layout-fixed-top;\n          z-index: 1;\n        }\n\n        #wrapper.initializing ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) {\n          height: 100%;\n        }\n\n        :host([has-scrolling-region]) #wrapper ::slotted([slot=\"header\"]) {\n          position: absolute;\n        }\n\n        :host([has-scrolling-region])\n          #wrapper.initializing\n          ::slotted([slot=\"header\"]) {\n          position: relative;\n        }\n\n        :host([has-scrolling-region]) #wrapper #contentContainer {\n          @apply --layout-fit;\n          overflow-y: auto;\n          -webkit-overflow-scrolling: touch;\n        }\n\n        :host([has-scrolling-region]) #wrapper.initializing #contentContainer {\n          position: relative;\n        }\n\n        #contentContainer {\n          /* Create a stacking context here so that all children appear below the header. */\n          position: relative;\n          z-index: 0;\n          /* Using 'transform' will cause 'position: fixed' elements to behave like\n           'position: absolute' relative to this element. */\n          transform: translate(0);\n          margin-left: env(safe-area-inset-left);\n          margin-right: env(safe-area-inset-right);\n        }\n\n        @media print {\n          :host([has-scrolling-region]) #wrapper #contentContainer {\n            overflow-y: visible;\n          }\n        }\n      </style>\n\n      <div id=\"wrapper\" class=\"initializing\">\n        <slot id=\"headerSlot\" name=\"header\"></slot>\n\n        <div id=\"contentContainer\"><slot></slot></div>\n        <slot id=\"fab\" name=\"fab\"></slot>\n      </div>\n    `;\n  }\n}\ncustomElements.define(\"ha-app-layout\", HaAppLayout);\n","import \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { canShowPage } from \"../../../common/config/can_show_page\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-next\";\nimport { CloudStatus, CloudStatusLoggedIn } from \"../../../data/cloud\";\nimport { PageNavigation } from \"../../../layouts/hass-tabs-subpage\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-navigation\")\nclass HaConfigNavigation extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() public pages!: PageNavigation[];\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.pages.map((page) =>\n        (\n          page.path === \"#external-app-configuration\"\n            ? this.hass.auth.external?.config.hasSettingsScreen\n            : canShowPage(this.hass, page)\n        )\n          ? html`\n              <a href=${page.path} role=\"option\" tabindex=\"-1\">\n                <paper-icon-item @click=${this._entryClicked}>\n                  <div\n                    class=${page.iconColor ? \"icon-background\" : \"\"}\n                    slot=\"item-icon\"\n                    .style=\"background-color: ${page.iconColor || \"undefined\"}\"\n                  >\n                    <ha-svg-icon .path=${page.iconPath}></ha-svg-icon>\n                  </div>\n                  <paper-item-body two-line>\n                    ${page.name ||\n                    this.hass.localize(\n                      `ui.panel.config.dashboard.${page.translationKey}.title`\n                    )}\n                    ${page.component === \"cloud\" && (page.info as CloudStatus)\n                      ? page.info.logged_in\n                        ? html`\n                            <div secondary>\n                              ${this.hass.localize(\n                                \"ui.panel.config.cloud.description_login\",\n                                \"email\",\n                                (page.info as CloudStatusLoggedIn).email\n                              )}\n                            </div>\n                          `\n                        : html`\n                            <div secondary>\n                              ${this.hass.localize(\n                                \"ui.panel.config.cloud.description_features\"\n                              )}\n                            </div>\n                          `\n                      : html`\n                          <div secondary>\n                            ${page.description ||\n                            this.hass.localize(\n                              `ui.panel.config.dashboard.${page.translationKey}.description`\n                            )}\n                          </div>\n                        `}\n                  </paper-item-body>\n                  ${!this.narrow ? html`<ha-icon-next></ha-icon-next>` : \"\"}\n                </paper-icon-item>\n              </a>\n            `\n          : \"\"\n      )}\n    `;\n  }\n\n  private _entryClicked(ev) {\n    ev.currentTarget.blur();\n    if (\n      ev.currentTarget.parentElement.href.endsWith(\n        \"#external-app-configuration\"\n      )\n    ) {\n      ev.preventDefault();\n      this.hass.auth.external!.fireMessage({\n        type: \"config_screen/show\",\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      a {\n        text-decoration: none;\n        color: var(--primary-text-color);\n        position: relative;\n        display: block;\n        outline: 0;\n      }\n      ha-svg-icon,\n      ha-icon-next {\n        color: var(--secondary-text-color);\n        height: 24px;\n        width: 24px;\n      }\n      ha-svg-icon {\n        padding: 8px;\n      }\n      .iron-selected paper-item::before,\n      a:not(.iron-selected):focus::before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        pointer-events: none;\n        content: \"\";\n        transition: opacity 15ms linear;\n        will-change: opacity;\n      }\n      a:not(.iron-selected):focus::before {\n        background-color: currentColor;\n        opacity: var(--dark-divider-opacity);\n      }\n      .iron-selected paper-item:focus::before,\n      .iron-selected:focus paper-item::before {\n        opacity: 0.2;\n      }\n      .icon-background {\n        border-radius: 20%;\n      }\n      .icon-background ha-svg-icon {\n        color: #fff;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-navigation\": HaConfigNavigation;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-icon-next\";\nimport type { UpdateEntity } from \"../../../data/update\";\nimport { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-updates\")\nclass HaConfigUpdates extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false })\n  public updateEntities?: UpdateEntity[];\n\n  @state() private _showAll = false;\n\n  protected render(): TemplateResult {\n    if (!this.updateEntities?.length) {\n      return html``;\n    }\n\n    const updates =\n      this._showAll || this.updateEntities.length <= 3\n        ? this.updateEntities\n        : this.updateEntities.slice(0, 2);\n\n    return html`\n      <div class=\"title\">\n        ${this.hass.localize(\"ui.panel.config.updates.title\", {\n          count: this.updateEntities.length,\n        })}\n      </div>\n      ${updates.map(\n        (entity) => html`\n          <paper-icon-item\n            @click=${this._openMoreInfo}\n            .entity_id=${entity.entity_id}\n          >\n            <span slot=\"item-icon\" class=\"icon\">\n              <state-badge\n                .title=${entity.attributes.title ||\n                entity.attributes.friendly_name}\n                .stateObj=${entity}\n                slot=\"item-icon\"\n              ></state-badge>\n            </span>\n            <paper-item-body two-line>\n              ${entity.attributes.title || entity.attributes.friendly_name}\n              <div secondary>\n                ${this.hass.localize(\n                  \"ui.panel.config.updates.version_available\",\n                  {\n                    version_available: entity.attributes.latest_version,\n                  }\n                )}\n              </div>\n            </paper-item-body>\n            ${!this.narrow ? html`<ha-icon-next></ha-icon-next>` : \"\"}\n          </paper-icon-item>\n        `\n      )}\n      ${!this._showAll && this.updateEntities.length >= 4\n        ? html`\n            <button class=\"show-more\" @click=${this._showAllClicked}>\n              ${this.hass.localize(\"ui.panel.config.updates.more_updates\", {\n                count: this.updateEntities!.length - updates.length,\n              })}\n            </button>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _openMoreInfo(ev: MouseEvent): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: (ev.currentTarget as any).entity_id,\n    });\n  }\n\n  private _showAllClicked() {\n    this._showAll = true;\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      css`\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n        .icon {\n          display: inline-flex;\n          height: 100%;\n          align-items: center;\n        }\n        ha-icon-next {\n          color: var(--secondary-text-color);\n          height: 24px;\n          width: 24px;\n        }\n        button.show-more {\n          color: var(--primary-color);\n          text-align: left;\n          cursor: pointer;\n          background: none;\n          border-width: initial;\n          border-style: none;\n          border-color: initial;\n          border-image: initial;\n          padding: 16px;\n          font: inherit;\n        }\n        button.show-more:focus {\n          outline: none;\n          text-decoration: underline;\n        }\n        paper-icon-item {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-updates\": HaConfigUpdates;\n  }\n}\n","import type { ActionDetail } from \"@material/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCloudLock,\n  mdiCloudOutline,\n  mdiDotsVertical,\n  mdiMagnify,\n  // mdiNewBox,\n} from \"@mdi/js\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport type { HassEntities } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-menu-button\";\nimport \"../../../components/ha-svg-icon\";\nimport { CloudStatus } from \"../../../data/cloud\";\nimport { updateCanInstall, UpdateEntity } from \"../../../data/update\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { showQuickBar } from \"../../../dialogs/quick-bar/show-dialog-quick-bar\";\nimport \"../../../layouts/ha-app-layout\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\n// import { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"./ha-config-navigation\";\nimport \"./ha-config-updates\";\n\n\n\n@customElement(\"ha-config-dashboard\")\nclass HaConfigDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public cloudStatus?: CloudStatus;\n\n  @property() public showAdvanced!: boolean;\n\n\n\n  private _notifyUpdates = false;\n\n  protected render(): TemplateResult {\n    const canInstallUpdates = this._filterUpdateEntitiesWithInstall(\n      this.hass.states\n    );\n    return html`\n      <ha-app-layout>\n        <app-header fixed slot=\"header\">\n          <app-toolbar>\n            <ha-menu-button\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n            ></ha-menu-button>\n            <div main-title>${this.hass.localize(\"panel.config\")}</div>\n            <ha-icon-button\n              .label=${this.hass.localize(\"ui.dialogs.quick-bar.title\")}\n              .path=${mdiMagnify}\n              @click=${this._showQuickBar}\n            ></ha-icon-button>\n            <ha-button-menu\n              corner=\"BOTTOM_START\"\n              @action=${this._handleMenuAction}\n              activatable\n            >\n              <ha-icon-button\n                slot=\"trigger\"\n                .label=${this.hass.localize(\"ui.common.menu\")}\n                .path=${mdiDotsVertical}\n              ></ha-icon-button>\n\n              <mwc-list-item>\n                ${this.hass.localize(\"ui.panel.config.updates.check_updates\")}\n              </mwc-list-item>\n            </ha-button-menu>\n          </app-toolbar>\n        </app-header>\n\n        <ha-config-section\n          .narrow=${this.narrow}\n          .isWide=${this.isWide}\n          full-width\n        >\n          ${canInstallUpdates.length\n            ? html`<ha-card>\n                <ha-config-updates\n                  .hass=${this.hass}\n                  .narrow=${this.narrow}\n                  .updateEntities=${canInstallUpdates}\n                ></ha-config-updates>\n              </ha-card>`\n            : \"\"}\n          <ha-card>\n            ${this.narrow && canInstallUpdates.length\n              ? html`<div class=\"title\">\n                  ${this.hass.localize(\"panel.config\")}\n                </div>`\n              : \"\"}\n            ${this.cloudStatus && isComponentLoaded(this.hass, \"cloud\")\n              ? html`\n                  <ha-config-navigation\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                    .showAdvanced=${this.showAdvanced}\n                    .pages=${[\n                      {\n                        component: \"cloud\",\n                        path: \"/config/cloud\",\n                        name: \"Vioneta Cloud\",\n                        info: this.cloudStatus,\n                        iconPath: mdiCloudOutline,\n                        iconColor: \"#3B808E\",\n                      },\n                    ]}\n                  ></ha-config-navigation>\n                `\n              : \"\"}\n            <ha-config-navigation\n              .hass=${this.hass}\n              .narrow=${this.narrow}\n              .showAdvanced=${this.showAdvanced}\n              .pages=${configSections.dashboard}\n            ></ha-config-navigation>\n          </ha-card>\n\n        </ha-config-section>\n      </ha-app-layout>\n    `;\n  }\n\n  protected override updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n\n\n    if (!changedProps.has(\"hass\") || !this._notifyUpdates) {\n      return;\n    }\n    this._notifyUpdates = false;\n    if (this._filterUpdateEntitiesWithInstall(this.hass.states).length) {\n      showToast(this, {\n        message: this.hass.localize(\n          \"ui.panel.config.updates.updates_refreshed\"\n        ),\n      });\n    } else {\n      showToast(this, {\n        message: this.hass.localize(\"ui.panel.config.updates.no_new_updates\"),\n      });\n    }\n  }\n\n  private _filterUpdateEntities = memoizeOne((entities: HassEntities) =>\n    (\n      Object.values(entities).filter(\n        (entity) => computeStateDomain(entity) === \"update\"\n      ) as UpdateEntity[]\n    ).sort((a, b) => {\n      if (a.attributes.title === \"Vioneta Core\") {\n        return -3;\n      }\n      if (b.attributes.title === \"Vioneta Core\") {\n        return 3;\n      }\n      if (a.attributes.title === \"Vioneta Operating System\") {\n        return -2;\n      }\n      if (b.attributes.title === \"Vioneta Operating System\") {\n        return 2;\n      }\n      if (a.attributes.title === \"Vioneta Supervisor\") {\n        return -1;\n      }\n      if (b.attributes.title === \"Vioneta Supervisor\") {\n        return 1;\n      }\n      return caseInsensitiveStringCompare(\n        a.attributes.title || a.attributes.friendly_name || \"\",\n        b.attributes.title || b.attributes.friendly_name || \"\"\n      );\n    })\n  );\n\n  private _filterUpdateEntitiesWithInstall = memoizeOne(\n    (entities: HassEntities) =>\n      this._filterUpdateEntities(entities).filter((entity) =>\n        updateCanInstall(entity)\n      )\n  );\n\n  private _showQuickBar(): void {\n    showQuickBar(this, {\n      commandMode: true,\n      hint: this.hass.localize(\"ui.dialogs.quick-bar.key_c_hint\"),\n    });\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    const _entities = this._filterUpdateEntities(this.hass.states).map(\n      (entity) => entity.entity_id\n    );\n    switch (ev.detail.index) {\n      case 0:\n        if (_entities.length) {\n          this._notifyUpdates = true;\n          await this.hass.callService(\"homeassistant\", \"update_entity\", {\n            entity_id: _entities,\n          });\n          return;\n        }\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.updates.no_update_entities.title\"\n          ),\n          text: this.hass.localize(\n            \"ui.panel.config.updates.no_update_entities.description\"\n          ),\n          warning: true,\n        });\n        break;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card:last-child {\n          margin-bottom: env(safe-area-inset-bottom);\n        }\n        :host(:not([narrow])) ha-card:last-child {\n          margin-bottom: max(24px, env(safe-area-inset-bottom));\n        }\n         ha-config-section {\n          margin: auto;\n          margin-top: -32px;\n          max-width: 600px;\n        }\n        ha-card {\n          overflow: hidden;\n\n\n\n        }\n        ha-card a {\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n        :host([narrow]) ha-card {\n          border-radius: 20px;\n          box-shadow: unset;\n        }\n\n        :host([narrow]) ha-config-section {\n          margin-top: 0;\n          padding:0;\n          border-radius: 20px;\n        }\n\n\n        .new {\n          color: var(--primary-color);\n        }\n\n\n        .keep-together {\n          display: inline-block;\n        }\n\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-dashboard\": HaConfigDashboard;\n  }\n}\n","import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  @property({ type: Boolean }) public vertical = false;\n\n  @property({ type: Boolean, attribute: \"full-width\" })\n  public fullWidth = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n          \"full-width\": this.fullWidth,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: this.vertical || !this.isWide,\n            horizontal: !this.vertical && this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .horizontal .intro {\n        max-width: 400px;\n        margin-right: 40px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n\n      .full-width {\n        padding: 0;\n      }\n\n      .full-width .layout {\n        flex-direction: column;\n      }\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}