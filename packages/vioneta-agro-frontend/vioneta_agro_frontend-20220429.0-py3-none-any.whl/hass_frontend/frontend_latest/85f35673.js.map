{"version":3,"file":"85f35673.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgFA;;;;;;;;;;;AC0BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrGA;AAoEA;;AApEA;;ACeA;;;;AAKA;AACA;;AAEA;;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACYA;AACA;AACA;AACA;;;AAGA;;;AAIA;AACA;AACA;AACA;;;AAKA;;AAEA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;;;AAGA;AACA;;;;AAlEA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACiEA;;;;AAKA;AAEA;;AAGA;;AAEA;AAGA;AAKA;AAGA;;AAEA;;AAEA;AACA;AACA;;AAKA;AAYA;;;;;;;;AAWA;;;AAGA;;AAIA;AACA;;;;;;AAzHA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item-body.js","webpack://home-assistant-frontend/./node_modules/@polymer/paper-item/paper-item.js","webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/panels/config/logs/error-log-card.ts","webpack://home-assistant-frontend/./src/panels/config/logs/ha-config-logs.ts","webpack://home-assistant-frontend/./src/panels/config/logs/system-log-card.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, #F7ECEB)\n        );\n        border-radius: var(--ha-card-border-radius, 20px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import \"@material/mwc-button\";\nimport { mdiRefresh } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport \"../../../components/ha-icon-button\";\nimport { fetchErrorLog } from \"../../../data/error_log\";\nimport { HomeAssistant } from \"../../../types\";\n\nclass ErrorLogCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter = \"\";\n\n  @state() private _isLogLoaded = false;\n\n  @state() private _errorHTML!: TemplateResult[] | string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"error-log-intro\">\n        ${this._errorHTML\n          ? html`\n              <ha-card>\n                <ha-icon-button\n                  .path=${mdiRefresh}\n                  @click=${this._refreshErrorLog}\n                  .label=${this.hass.localize(\"ui.common.refresh\")}\n                ></ha-icon-button>\n                <div class=\"card-content error-log\">${this._errorHTML}</div>\n              </ha-card>\n            `\n          : html`\n              <mwc-button raised @click=${this._refreshErrorLog}>\n                ${this.hass.localize(\"ui.panel.config.logs.load_full_log\")}\n              </mwc-button>\n            `}\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    if (this.hass?.config.safe_mode) {\n      this.hass.loadFragmentTranslation(\"config\");\n      this._refreshErrorLog();\n    }\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"filter\") && this._isLogLoaded) {\n      this._refreshErrorLog();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .error-log-intro {\n        text-align: center;\n        margin: 16px;\n      }\n\n      ha-icon-button {\n        float: right;\n      }\n\n      .error-log {\n        font-family: var(--code-font-family, monospace);\n        clear: both;\n        text-align: left;\n        padding-top: 12px;\n      }\n\n      .error-log > div:hover {\n        background-color: var(--secondary-background-color);\n      }\n\n      .error {\n        color: var(--error-color);\n      }\n\n      .warning {\n        color: var(--warning-color);\n      }\n    `;\n  }\n\n  private async _refreshErrorLog(): Promise<void> {\n    this._errorHTML = this.hass.localize(\"ui.panel.config.logs.loading_log\");\n    const log = await fetchErrorLog(this.hass!);\n    this._isLogLoaded = true;\n\n    this._errorHTML = log\n      ? log\n          .split(\"\\n\")\n          .filter((entry) => {\n            if (this.filter) {\n              return entry.toLowerCase().includes(this.filter.toLowerCase());\n            }\n            return entry;\n          })\n          .map((entry) => {\n            if (entry.includes(\"INFO\"))\n              return html`<div class=\"info\">${entry}</div>`;\n\n            if (entry.includes(\"WARNING\"))\n              return html`<div class=\"warning\">${entry}</div>`;\n\n            if (\n              entry.includes(\"ERROR\") ||\n              entry.includes(\"FATAL\") ||\n              entry.includes(\"CRITICAL\")\n            )\n              return html`<div class=\"error\">${entry}</div>`;\n\n            return html`<div>${entry}</div>`;\n          })\n      : this.hass.localize(\"ui.panel.config.logs.no_errors\");\n  }\n}\n\ncustomElements.define(\"error-log-card\", ErrorLogCard);\n","import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport \"../../../components/search-input\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport \"./error-log-card\";\nimport \"./system-log-card\";\nimport type { SystemLogCard } from \"./system-log-card\";\n\n@customElement(\"ha-config-logs\")\nexport class HaConfigLogs extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public narrow!: boolean;\n\n  @property() public isWide!: boolean;\n\n  @property() public showAdvanced!: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _filter = extractSearchParam(\"filter\") || \"\";\n\n  @query(\"system-log-card\", true) private systemLog?: SystemLogCard;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.systemLog && this.systemLog.loaded) {\n      this.systemLog.fetchData();\n    }\n  }\n\n  private async _filterChanged(ev) {\n    this._filter = ev.detail.value;\n  }\n\n  protected render(): TemplateResult {\n    const search = this.narrow\n      ? html`\n          <div slot=\"header\">\n            <search-input\n              class=\"header\"\n              @value-changed=${this._filterChanged}\n              .hass=${this.hass}\n              .filter=${this._filter}\n              .label=${this.hass.localize(\"ui.panel.config.logs.search\")}\n            ></search-input>\n          </div>\n        `\n      : html`\n          <div class=\"search\">\n            <search-input\n              @value-changed=${this._filterChanged}\n              .hass=${this.hass}\n              .filter=${this._filter}\n              .label=${this.hass.localize(\"ui.panel.config.logs.search\")}\n            ></search-input>\n          </div>\n        `;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.general}\n      >\n        ${search}\n        <div class=\"content\">\n          <system-log-card\n            .hass=${this.hass}\n            .filter=${this._filter}\n          ></system-log-card>\n          <error-log-card\n            .hass=${this.hass}\n            .filter=${this._filter}\n          ></error-log-card>\n        </div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n        .search {\n          position: sticky;\n          top: 0;\n          z-index: 2;\n        }\n        search-input {\n          display: block;\n          --mdc-text-field-fill-color: var(--sidebar-background-color);\n          --mdc-text-field-idle-line-color: var(--divider-color);\n        }\n        search-input.header {\n          --mdc-ripple-color: transparant;\n        }\n        .content {\n          direction: ltr;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-logs\": HaConfigLogs;\n  }\n}\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport \"../../../components/buttons/ha-progress-button\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-icon-button\";\nimport { domainToName } from \"../../../data/integration\";\nimport {\n  fetchSystemLog,\n  getLoggedErrorIntegration,\n  isCustomIntegrationError,\n  LoggedError,\n} from \"../../../data/system_log\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showSystemLogDetailDialog } from \"./show-dialog-system-log-detail\";\nimport { formatSystemLogTime } from \"./util\";\n\n@customElement(\"system-log-card\")\nexport class SystemLogCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter = \"\";\n\n  public loaded = false;\n\n  @state() private _items?: LoggedError[];\n\n  public async fetchData(): Promise<void> {\n    this._items = undefined;\n    this._items = await fetchSystemLog(this.hass!);\n  }\n\n  private _timestamp(item: LoggedError): string {\n    return formatSystemLogTime(item.timestamp, this.hass!.locale);\n  }\n\n  private _multipleMessages(item: LoggedError): string {\n    return this.hass.localize(\n      \"ui.panel.config.logs.multiple_messages\",\n      \"time\",\n      formatSystemLogTime(item.first_occurred, this.hass!.locale),\n      \"counter\",\n      item.count\n    );\n  }\n\n  private _getFilteredItems = memoizeOne(\n    (items: LoggedError[], filter: string) =>\n      items.filter((item: LoggedError) => {\n        if (filter) {\n          return (\n            item.message.some((message: string) =>\n              message.toLowerCase().includes(filter)\n            ) ||\n            item.source[0].toLowerCase().includes(filter) ||\n            item.name.toLowerCase().includes(filter) ||\n            this._timestamp(item).toLowerCase().includes(filter) ||\n            this._multipleMessages(item).toLowerCase().includes(filter)\n          );\n        }\n        return item;\n      })\n  );\n\n  protected render(): TemplateResult {\n    const filteredItems = this._items\n      ? this._getFilteredItems(this._items, this.filter.toLowerCase())\n      : [];\n    const integrations = filteredItems.length\n      ? filteredItems.map((item) => getLoggedErrorIntegration(item))\n      : [];\n    return html`\n      <div class=\"system-log-intro\">\n        <ha-card>\n          ${this._items === undefined\n            ? html`\n                <div class=\"loading-container\">\n                  <ha-circular-progress active></ha-circular-progress>\n                </div>\n              `\n            : html`\n                ${this._items.length === 0\n                  ? html`\n                      <div class=\"card-content\">\n                        ${this.hass.localize(\"ui.panel.config.logs.no_issues\")}\n                      </div>\n                    `\n                  : filteredItems.length === 0 && this.filter\n                  ? html`<div class=\"card-content\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.logs.no_issues_search\",\n                        \"term\",\n                        this.filter\n                      )}\n                    </div>`\n                  : filteredItems.map(\n                      (item, idx) => html`\n                        <paper-item @click=${this._openLog} .logItem=${item}>\n                          <paper-item-body two-line>\n                            <div class=\"row\">${item.message[0]}</div>\n                            <div secondary>\n                              ${this._timestamp(item)} –\n                              ${html`(<span class=${item.level.toLowerCase()}\n                                  >${this.hass.localize(\n                                    \"ui.panel.config.logs.level.\" +\n                                      item.level.toLowerCase()\n                                  )}</span\n                                >) `}\n                              ${integrations[idx]\n                                ? `${domainToName(\n                                    this.hass!.localize,\n                                    integrations[idx]!\n                                  )}${\n                                    isCustomIntegrationError(item)\n                                      ? ` (${this.hass.localize(\n                                          \"ui.panel.config.logs.custom_integration\"\n                                        )})`\n                                      : \"\"\n                                  }`\n                                : item.source[0]}\n                              ${item.count > 1\n                                ? html` - ${this._multipleMessages(item)} `\n                                : html``}\n                            </div>\n                          </paper-item-body>\n                        </paper-item>\n                      `\n                    )}\n\n                <div class=\"card-actions\">\n                  <ha-call-service-button\n                    .hass=${this.hass}\n                    domain=\"system_log\"\n                    service=\"clear\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.logs.clear\"\n                    )}</ha-call-service-button\n                  >\n                  <ha-progress-button @click=${this.fetchData}\n                    >${this.hass.localize(\n                      \"ui.panel.config.logs.refresh\"\n                    )}</ha-progress-button\n                  >\n                </div>\n              `}\n        </ha-card>\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n    this.fetchData();\n    this.loaded = true;\n    this.addEventListener(\"hass-service-called\", (ev) =>\n      this.serviceCalled(ev)\n    );\n  }\n\n  protected serviceCalled(ev): void {\n    // Check if this is for us\n    if (ev.detail.success && ev.detail.domain === \"system_log\") {\n      // Do the right thing depending on service\n      if (ev.detail.service === \"clear\") {\n        this._items = [];\n      }\n    }\n  }\n\n  private _openLog(ev: Event): void {\n    const item = (ev.currentTarget as any).logItem;\n    showSystemLogDetailDialog(this, { item });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        padding-top: 16px;\n      }\n\n      paper-item {\n        cursor: pointer;\n      }\n\n      .system-log-intro {\n        margin: 16px;\n      }\n\n      .loading-container {\n        height: 100px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .error {\n        color: var(--error-color);\n      }\n\n      .warning {\n        color: var(--warning-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"system-log-card\": SystemLogCard;\n  }\n}\n"],"names":[],"sourceRoot":""}