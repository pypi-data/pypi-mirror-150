{"version":3,"file":"051d1887.js","mappings":";;;;;;;;AAIA;;ACiIA;;AAEA;AACA;;;AAGA;;;AAIA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;;;;;AASA;;AAGA;AACA;;;AAGA;;;;;AAKA;;;;AAKA;AACA;AACA;AAOA;AAKA;;;AAKA;;;;;;AAmBA;;AAEA;AACA;AACA;;AAEA;;AAEA;AAEA;;AAEA;;AAEA;;AAEA;AAEA;;;AAIA;AACA;AAIA;AACA;AACA;;AAEA;;;;;AAMA;;AAEA;;;;;AAtNA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-input-helper-text.ts","webpack://home-assistant-frontend/./src/panels/config/zone/ha-config-zone.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-input-helper-text\")\nclass InputHelperText extends LitElement {\n  protected render(): TemplateResult {\n    return html`<slot></slot>`;\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      color: var(--mdc-text-field-label-ink-color, rgba(0, 0, 0, 0.6));\n      font-size: 0.75rem;\n      padding-left: 16px;\n      padding-right: 16px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-input-helper-text\": InputHelperText;\n  }\n}\n","import { mdiPencil, mdiPencilOff, mdiPlus } from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport { HassEntity, UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { navigate } from \"../../../common/navigate\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/map/ha-locations-editor\";\nimport type {\n  HaLocationsEditor,\n  MarkerLocation,\n} from \"../../../components/map/ha-locations-editor\";\nimport { saveCoreConfig } from \"../../../data/core\";\nimport { subscribeEntityRegistry } from \"../../../data/entity_registry\";\nimport {\n  createZone,\n  deleteZone,\n  fetchZones,\n  updateZone,\n  Zone,\n  ZoneMutableParams,\n} from \"../../../data/zone\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport \"../ha-config-section\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showZoneDetailDialog } from \"./show-dialog-zone-detail\";\n\n@customElement(\"ha-config-zone\")\nexport class HaConfigZone extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public isWide?: boolean;\n\n  @property() public narrow?: boolean;\n\n  @property() public route!: Route;\n\n  @state() private _storageItems?: Zone[];\n\n  @state() private _stateItems?: HassEntity[];\n\n  @state() private _activeEntry = \"\";\n\n  @state() private _canEditCore = false;\n\n  @query(\"ha-locations-editor\") private _map?: HaLocationsEditor;\n\n  private _regEntities: string[] = [];\n\n  private _getZones = memoizeOne(\n    (storageItems: Zone[], stateItems: HassEntity[]): MarkerLocation[] => {\n      const computedStyles = getComputedStyle(this);\n      const zoneRadiusColor = computedStyles.getPropertyValue(\"--accent-color\");\n      const passiveRadiusColor = computedStyles.getPropertyValue(\n        \"--secondary-text-color\"\n      );\n      const homeRadiusColor =\n        computedStyles.getPropertyValue(\"--primary-color\");\n\n      const stateLocations: MarkerLocation[] = stateItems.map(\n        (entityState) => ({\n          id: entityState.entity_id,\n          icon: entityState.attributes.icon,\n          name: entityState.attributes.friendly_name || entityState.entity_id,\n          latitude: entityState.attributes.latitude,\n          longitude: entityState.attributes.longitude,\n          radius: entityState.attributes.radius,\n          radius_color:\n            entityState.entity_id === \"zone.home\"\n              ? homeRadiusColor\n              : entityState.attributes.passive\n              ? passiveRadiusColor\n              : zoneRadiusColor,\n          location_editable:\n            entityState.entity_id === \"zone.home\" && this._canEditCore,\n          radius_editable: false,\n        })\n      );\n      const storageLocations: MarkerLocation[] = storageItems.map((zone) => ({\n        ...zone,\n        radius_color: zone.passive ? passiveRadiusColor : zoneRadiusColor,\n        location_editable: true,\n        radius_editable: true,\n      }));\n      return storageLocations.concat(stateLocations);\n    }\n  );\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._regEntities = entities.map(\n          (registryEntry) => registryEntry.entity_id\n        );\n        this._filterStates();\n      }),\n    ];\n  }\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      this._storageItems === undefined ||\n      this._stateItems === undefined\n    ) {\n      return html`<hass-loading-screen></hass-loading-screen>`;\n    }\n    const hass = this.hass;\n    const listBox =\n      this._storageItems.length === 0 && this._stateItems.length === 0\n        ? html`\n            <div class=\"empty\">\n              ${hass.localize(\"ui.panel.config.zone.no_zones_created_yet\")}\n              <br />\n              <mwc-button @click=${this._createZone}>\n                ${hass.localize(\"ui.panel.config.zone.create_zone\")}</mwc-button\n              >\n            </div>\n          `\n        : html`\n            <paper-listbox\n              attr-for-selected=\"data-id\"\n              .selected=${this._activeEntry || \"\"}\n            >\n              ${this._storageItems.map(\n                (entry) => html`\n                  <paper-icon-item\n                    data-id=${entry.id}\n                    @click=${this._itemClicked}\n                    .entry=${entry}\n                  >\n                    <ha-icon .icon=${entry.icon} slot=\"item-icon\"></ha-icon>\n                    <paper-item-body>${entry.name}</paper-item-body>\n                    ${!this.narrow\n                      ? html`\n                          <ha-icon-button\n                            .entry=${entry}\n                            @click=${this._openEditEntry}\n                            .path=${mdiPencil}\n                            .label=${hass.localize(\n                              \"ui.panel.config.zone.edit_zone\"\n                            )}\n                          ></ha-icon-button>\n                        `\n                      : \"\"}\n                  </paper-icon-item>\n                `\n              )}\n              ${this._stateItems.map(\n                (stateObject) => html`\n                  <paper-icon-item\n                    data-id=${stateObject.entity_id}\n                    @click=${this._stateItemClicked}\n                  >\n                    <ha-icon\n                      .icon=${stateObject.attributes.icon}\n                      slot=\"item-icon\"\n                    >\n                    </ha-icon>\n                    <paper-item-body>\n                      ${stateObject.attributes.friendly_name ||\n                      stateObject.entity_id}\n                    </paper-item-body>\n                    <div style=\"display:inline-block\">\n                      <ha-icon-button\n                        .entityId=${stateObject.entity_id}\n                        @click=${this._openCoreConfig}\n                        disabled=${ifDefined(\n                          stateObject.entity_id === \"zone.home\" &&\n                            this.narrow &&\n                            this._canEditCore\n                            ? undefined\n                            : true\n                        )}\n                        .path=${stateObject.entity_id === \"zone.home\" &&\n                        this.narrow &&\n                        this._canEditCore\n                          ? mdiPencil\n                          : mdiPencilOff}\n                        .label=${hass.localize(\n                          \"ui.panel.config.zone.edit_zone\"\n                        )}\n                      ></ha-icon-button>\n                      <paper-tooltip animation-delay=\"0\" position=\"left\">\n                        ${stateObject.entity_id === \"zone.home\"\n                          ? hass.localize(\n                              `ui.panel.config.zone.${\n                                this.narrow\n                                  ? \"edit_home_zone_narrow\"\n                                  : \"edit_home_zone\"\n                              }`\n                            )\n                          : hass.localize(\n                              \"ui.panel.config.zone.configured_in_yaml\"\n                            )}\n                      </paper-tooltip>\n                    </div>\n                  </paper-icon-item>\n                `\n              )}\n            </paper-listbox>\n          `;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        back-path=\"/config\"\n        .tabs=${configSections.persons}\n      >\n        ${this.narrow\n          ? html`\n              <ha-config-section .isWide=${this.isWide}>\n                <span slot=\"introduction\">\n                  ${hass.localize(\"ui.panel.config.zone.introduction\")}\n                </span>\n                <ha-card>${listBox}</ha-card>\n              </ha-config-section>\n            `\n          : \"\"}\n        ${!this.narrow\n          ? html`\n              <div class=\"flex\">\n                <ha-locations-editor\n                  .hass=${this.hass}\n                  .locations=${this._getZones(\n                    this._storageItems,\n                    this._stateItems\n                  )}\n                  @location-updated=${this._locationUpdated}\n                  @radius-updated=${this._radiusUpdated}\n                  @marker-clicked=${this._markerClicked}\n                ></ha-locations-editor>\n                <div class=\"overflow\">${listBox}</div>\n              </div>\n            `\n          : \"\"}\n        <ha-fab\n          slot=\"fab\"\n          .label=${hass.localize(\"ui.panel.config.zone.add_zone\")}\n          extended\n          @click=${this._createZone}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._canEditCore =\n      Boolean(this.hass.user?.is_admin) &&\n      [\"storage\", \"default\"].includes(this.hass.config.config_source);\n    this._fetchData();\n    if (this.route.path === \"/new\") {\n      navigate(\"/config/zone\", { replace: true });\n      this._createZone();\n    }\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.updated(changedProps);\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (oldHass && this._stateItems) {\n      this._getStates(oldHass);\n    }\n  }\n\n  private async _fetchData() {\n    this._storageItems = (await fetchZones(this.hass!)).sort((ent1, ent2) =>\n      stringCompare(ent1.name, ent2.name)\n    );\n    this._getStates();\n  }\n\n  private _getStates(oldHass?: HomeAssistant) {\n    let changed = false;\n    const tempStates = Object.values(this.hass!.states).filter((entity) => {\n      if (computeStateDomain(entity) !== \"zone\") {\n        return false;\n      }\n      if (oldHass?.states[entity.entity_id] !== entity) {\n        changed = true;\n      }\n      if (this._regEntities.includes(entity.entity_id)) {\n        return false;\n      }\n      return true;\n    });\n\n    if (changed) {\n      this._stateItems = tempStates;\n    }\n  }\n\n  private _filterStates() {\n    if (!this._stateItems) {\n      return;\n    }\n    const tempStates = this._stateItems.filter(\n      (entity) => !this._regEntities.includes(entity.entity_id)\n    );\n    if (tempStates.length !== this._stateItems.length) {\n      this._stateItems = tempStates;\n    }\n  }\n\n  private async _locationUpdated(ev: CustomEvent) {\n    this._activeEntry = ev.detail.id;\n    if (ev.detail.id === \"zone.home\" && this._canEditCore) {\n      await saveCoreConfig(this.hass, {\n        latitude: ev.detail.location[0],\n        longitude: ev.detail.location[1],\n      });\n      return;\n    }\n    const entry = this._storageItems!.find((item) => item.id === ev.detail.id);\n    if (!entry) {\n      return;\n    }\n    this._updateEntry(entry, {\n      latitude: ev.detail.location[0],\n      longitude: ev.detail.location[1],\n    });\n  }\n\n  private _radiusUpdated(ev: CustomEvent) {\n    this._activeEntry = ev.detail.id;\n    const entry = this._storageItems!.find((item) => item.id === ev.detail.id);\n    if (!entry) {\n      return;\n    }\n    this._updateEntry(entry, {\n      radius: ev.detail.radius,\n    });\n  }\n\n  private _markerClicked(ev: CustomEvent) {\n    this._activeEntry = ev.detail.id;\n  }\n\n  private _createZone() {\n    this._openDialog();\n  }\n\n  private _itemClicked(ev: Event) {\n    if (this.narrow) {\n      this._openEditEntry(ev);\n      return;\n    }\n    const entry: Zone = (ev.currentTarget! as any).entry;\n    this._zoomZone(entry.id);\n  }\n\n  private _stateItemClicked(ev: Event) {\n    const entityId = (ev.currentTarget! as HTMLElement).getAttribute(\n      \"data-id\"\n    )!;\n    this._zoomZone(entityId);\n  }\n\n  private _zoomZone(id: string) {\n    this._map?.fitMarker(id);\n  }\n\n  private _openEditEntry(ev: Event) {\n    const entry: Zone = (ev.currentTarget! as any).entry;\n    this._openDialog(entry);\n  }\n\n  private async _openCoreConfig(ev: Event) {\n    const entityId: string = (ev.currentTarget! as any).entityId;\n    if (entityId !== \"zone.home\" || !this.narrow || !this._canEditCore) {\n      return;\n    }\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.zone.go_to_core_config\"),\n        text: this.hass.localize(\"ui.panel.config.zone.home_zone_core_config\"),\n        confirmText: this.hass!.localize(\"ui.common.yes\"),\n        dismissText: this.hass!.localize(\"ui.common.no\"),\n      }))\n    ) {\n      return;\n    }\n    navigate(\"/config/core\");\n  }\n\n  private async _createEntry(values: ZoneMutableParams) {\n    const created = await createZone(this.hass!, values);\n    this._storageItems = this._storageItems!.concat(created).sort(\n      (ent1, ent2) => stringCompare(ent1.name, ent2.name)\n    );\n    if (this.narrow) {\n      return;\n    }\n    this._activeEntry = created.id;\n    await this.updateComplete;\n    await this._map?.updateComplete;\n    this._map?.fitMarker(created.id);\n  }\n\n  private async _updateEntry(\n    entry: Zone,\n    values: Partial<ZoneMutableParams>,\n    fitMap = false\n  ) {\n    const updated = await updateZone(this.hass!, entry!.id, values);\n    this._storageItems = this._storageItems!.map((ent) =>\n      ent === entry ? updated : ent\n    );\n    if (this.narrow || !fitMap) {\n      return;\n    }\n    this._activeEntry = entry.id;\n    await this.updateComplete;\n    await this._map?.updateComplete;\n    this._map?.fitMarker(entry.id);\n  }\n\n  private async _removeEntry(entry: Zone) {\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass!.localize(\"ui.panel.config.zone.confirm_delete\"),\n        dismissText: this.hass!.localize(\"ui.common.cancel\"),\n        confirmText: this.hass!.localize(\"ui.common.delete\"),\n      }))\n    ) {\n      return false;\n    }\n\n    try {\n      await deleteZone(this.hass!, entry!.id);\n      this._storageItems = this._storageItems!.filter((ent) => ent !== entry);\n      if (!this.narrow) {\n        this._map?.fitMap();\n      }\n      return true;\n    } catch (err: any) {\n      return false;\n    }\n  }\n\n  private async _openDialog(entry?: Zone) {\n    showZoneDetailDialog(this, {\n      entry,\n      createEntry: (values) => this._createEntry(values),\n      updateEntry: entry\n        ? (values) => this._updateEntry(entry, values, true)\n        : undefined,\n      removeEntry: entry ? () => this._removeEntry(entry) : undefined,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      hass-loading-screen {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n      }\n      a {\n        color: var(--primary-color);\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 16px auto;\n        overflow: hidden;\n      }\n      ha-icon,\n      ha-icon-button:not([disabled]) {\n        color: var(--secondary-text-color);\n      }\n      ha-icon-button {\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n      .empty {\n        text-align: center;\n        padding: 8px;\n      }\n      .flex {\n        display: flex;\n        height: 100%;\n      }\n      .overflow {\n        height: 100%;\n        overflow: auto;\n      }\n      ha-locations-editor {\n        flex-grow: 1;\n        height: 100%;\n      }\n      .flex paper-listbox,\n      .flex .empty {\n        border-left: 1px solid var(--divider-color);\n        width: 250px;\n        min-height: 100%;\n        box-sizing: border-box;\n      }\n      paper-icon-item {\n        padding-top: 4px;\n        padding-bottom: 4px;\n        cursor: pointer;\n      }\n      .overflow paper-icon-item:last-child {\n        margin-bottom: 80px;\n      }\n      paper-icon-item.iron-selected:before {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        pointer-events: none;\n        content: \"\";\n        background-color: var(--sidebar-selected-icon-color);\n        opacity: 0.12;\n        transition: opacity 15ms linear;\n        will-change: opacity;\n      }\n      ha-card {\n        margin-bottom: 100px;\n      }\n      ha-card paper-item {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n"],"names":[],"sourceRoot":""}