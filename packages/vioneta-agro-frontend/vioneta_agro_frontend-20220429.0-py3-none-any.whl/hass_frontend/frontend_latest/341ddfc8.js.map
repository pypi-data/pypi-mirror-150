{"version":3,"file":"341ddfc8.js","mappings":";;AAoBA;;;;AAKA;AACA;;AAEA;;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA;;;AAKA;;AAIA;;AAvBA;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/panels/config/logs/error-log-card.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-safe-mode-card.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { mdiRefresh } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport \"../../../components/ha-icon-button\";\nimport { fetchErrorLog } from \"../../../data/error_log\";\nimport { HomeAssistant } from \"../../../types\";\n\nclass ErrorLogCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public filter = \"\";\n\n  @state() private _isLogLoaded = false;\n\n  @state() private _errorHTML!: TemplateResult[] | string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"error-log-intro\">\n        ${this._errorHTML\n          ? html`\n              <ha-card>\n                <ha-icon-button\n                  .path=${mdiRefresh}\n                  @click=${this._refreshErrorLog}\n                  .label=${this.hass.localize(\"ui.common.refresh\")}\n                ></ha-icon-button>\n                <div class=\"card-content error-log\">${this._errorHTML}</div>\n              </ha-card>\n            `\n          : html`\n              <mwc-button raised @click=${this._refreshErrorLog}>\n                ${this.hass.localize(\"ui.panel.config.logs.load_full_log\")}\n              </mwc-button>\n            `}\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n\n    if (this.hass?.config.safe_mode) {\n      this.hass.loadFragmentTranslation(\"config\");\n      this._refreshErrorLog();\n    }\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"filter\") && this._isLogLoaded) {\n      this._refreshErrorLog();\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .error-log-intro {\n        text-align: center;\n        margin: 16px;\n      }\n\n      ha-icon-button {\n        float: right;\n      }\n\n      .error-log {\n        font-family: var(--code-font-family, monospace);\n        clear: both;\n        text-align: left;\n        padding-top: 12px;\n      }\n\n      .error-log > div:hover {\n        background-color: var(--secondary-background-color);\n      }\n\n      .error {\n        color: var(--error-color);\n      }\n\n      .warning {\n        color: var(--warning-color);\n      }\n    `;\n  }\n\n  private async _refreshErrorLog(): Promise<void> {\n    this._errorHTML = this.hass.localize(\"ui.panel.config.logs.loading_log\");\n    const log = await fetchErrorLog(this.hass!);\n    this._isLogLoaded = true;\n\n    this._errorHTML = log\n      ? log\n          .split(\"\\n\")\n          .filter((entry) => {\n            if (this.filter) {\n              return entry.toLowerCase().includes(this.filter.toLowerCase());\n            }\n            return entry;\n          })\n          .map((entry) => {\n            if (entry.includes(\"INFO\"))\n              return html`<div class=\"info\">${entry}</div>`;\n\n            if (entry.includes(\"WARNING\"))\n              return html`<div class=\"warning\">${entry}</div>`;\n\n            if (\n              entry.includes(\"ERROR\") ||\n              entry.includes(\"FATAL\") ||\n              entry.includes(\"CRITICAL\")\n            )\n              return html`<div class=\"error\">${entry}</div>`;\n\n            return html`<div>${entry}</div>`;\n          })\n      : this.hass.localize(\"ui.panel.config.logs.no_errors\");\n  }\n}\n\ncustomElements.define(\"error-log-card\", ErrorLogCard);\n","import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../components/ha-card\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../../config/logs/error-log-card\";\nimport { LovelaceCard } from \"../types\";\n\n@customElement(\"hui-safe-mode-card\")\nexport class HuiSafeModeCard extends LitElement implements LovelaceCard {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  public getCardSize(): number {\n    return 3;\n  }\n\n  public setConfig(_config: any): void {\n    // No config necessary.\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card\n        .header=${this.hass!.localize(\n          \"ui.panel.lovelace.cards.safe-mode.header\"\n        )}\n      >\n        <div class=\"card-content\">\n          ${this.hass!.localize(\n            \"ui.panel.lovelace.cards.safe-mode.description\"\n          )}\n        </div>\n        <error-log-card .hass=${this.hass}></error-log-card>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        --ha-card-header-color: var(--primary-color);\n      }\n      error-log-card {\n        display: block;\n        padding-bottom: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-safe-mode-card\": HuiSafeModeCard;\n  }\n}\n"],"names":[],"sourceRoot":""}