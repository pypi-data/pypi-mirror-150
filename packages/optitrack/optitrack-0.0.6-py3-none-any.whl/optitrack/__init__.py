# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

import sys
if not(hasattr(sys,"frozen")):
    if sys.platform == 'win32':
        import site, os
        trk_path = site.getsitepackages()[1]+"\\optitrack"
        os.environ["PATH"] += os.pathsep + trk_path 
        sys.path.append(trk_path)

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _optitrack
else:
    import _optitrack

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class myListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def TTAPICameraConnected(self, serialNumber: "int") -> "void":
        return _optitrack.myListener_TTAPICameraConnected(self, serialNumber)

    def TTAPICameraDisconnected(self, serialNumber: "int") -> "void":
        return _optitrack.myListener_TTAPICameraDisconnected(self, serialNumber)

    def __init__(self):
        _optitrack.myListener_swiginit(self, _optitrack.new_myListener())
    __swig_destroy__ = _optitrack.delete_myListener

# Register myListener in _optitrack:
_optitrack.myListener_swigregister(myListener)

class optr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    PositionToolTipX1 = property(_optitrack.optr_PositionToolTipX1_get, _optitrack.optr_PositionToolTipX1_set)
    PositionToolTipY1 = property(_optitrack.optr_PositionToolTipY1_get, _optitrack.optr_PositionToolTipY1_set)
    PositionToolTipZ1 = property(_optitrack.optr_PositionToolTipZ1_get, _optitrack.optr_PositionToolTipZ1_set)
    YawToolTip = property(_optitrack.optr_YawToolTip_get, _optitrack.optr_YawToolTip_set)
    PitchToolTip = property(_optitrack.optr_PitchToolTip_get, _optitrack.optr_PitchToolTip_set)
    RollToolTip = property(_optitrack.optr_RollToolTip_get, _optitrack.optr_RollToolTip_set)
    PositionHeadX1 = property(_optitrack.optr_PositionHeadX1_get, _optitrack.optr_PositionHeadX1_set)
    PositionHeadY1 = property(_optitrack.optr_PositionHeadY1_get, _optitrack.optr_PositionHeadY1_set)
    PositionHeadZ1 = property(_optitrack.optr_PositionHeadZ1_get, _optitrack.optr_PositionHeadZ1_set)
    YawHead = property(_optitrack.optr_YawHead_get, _optitrack.optr_YawHead_set)
    PitchHead = property(_optitrack.optr_PitchHead_get, _optitrack.optr_PitchHead_set)
    RollHead = property(_optitrack.optr_RollHead_get, _optitrack.optr_RollHead_set)
    PositionCoilX1 = property(_optitrack.optr_PositionCoilX1_get, _optitrack.optr_PositionCoilX1_set)
    PositionCoilY1 = property(_optitrack.optr_PositionCoilY1_get, _optitrack.optr_PositionCoilY1_set)
    PositionCoilZ1 = property(_optitrack.optr_PositionCoilZ1_get, _optitrack.optr_PositionCoilZ1_set)
    YawCoil = property(_optitrack.optr_YawCoil_get, _optitrack.optr_YawCoil_set)
    PitchCoil = property(_optitrack.optr_PitchCoil_get, _optitrack.optr_PitchCoil_set)
    RollCoil = property(_optitrack.optr_RollCoil_get, _optitrack.optr_RollCoil_set)
    qxToolTip = property(_optitrack.optr_qxToolTip_get, _optitrack.optr_qxToolTip_set)
    qyToolTip = property(_optitrack.optr_qyToolTip_get, _optitrack.optr_qyToolTip_set)
    qzToolTip = property(_optitrack.optr_qzToolTip_get, _optitrack.optr_qzToolTip_set)
    qwToolTip = property(_optitrack.optr_qwToolTip_get, _optitrack.optr_qwToolTip_set)
    qxHead = property(_optitrack.optr_qxHead_get, _optitrack.optr_qxHead_set)
    qyHead = property(_optitrack.optr_qyHead_get, _optitrack.optr_qyHead_set)
    qzHead = property(_optitrack.optr_qzHead_get, _optitrack.optr_qzHead_set)
    qwHead = property(_optitrack.optr_qwHead_get, _optitrack.optr_qwHead_set)
    qxCoil = property(_optitrack.optr_qxCoil_get, _optitrack.optr_qxCoil_set)
    qyCoil = property(_optitrack.optr_qyCoil_get, _optitrack.optr_qyCoil_set)
    qzCoil = property(_optitrack.optr_qzCoil_get, _optitrack.optr_qzCoil_set)
    qwCoil = property(_optitrack.optr_qwCoil_get, _optitrack.optr_qwCoil_set)
    probeID = property(_optitrack.optr_probeID_get, _optitrack.optr_probeID_set)
    coilID = property(_optitrack.optr_coilID_get, _optitrack.optr_coilID_set)
    HeadID = property(_optitrack.optr_HeadID_get, _optitrack.optr_HeadID_set)

    def Initialize(self, CALIBRATION: "char const *", USERPROFILE: "char const *") -> "int":
        return _optitrack.optr_Initialize(self, CALIBRATION, USERPROFILE)

    def Run(self) -> "void":
        return _optitrack.optr_Run(self)

    def Close(self) -> "int":
        return _optitrack.optr_Close(self)

    def Load_Profile(self) -> "int":
        return _optitrack.optr_Load_Profile(self)

    def Load_Calibration(self) -> "int":
        return _optitrack.optr_Load_Calibration(self)

    def Update(self) -> "int":
        return _optitrack.optr_Update(self)

    def RigidBodyCount(self) -> "int":
        return _optitrack.optr_RigidBodyCount(self)

    def RigidBodyLocation(self, rbIndex: "int", x: "float *", y: "float *", z: "float *", qx: "float *", qy: "float *", qz: "float *", qw: "float *", yaw: "float *", pitch: "float *", roll: "float *") -> "void":
        return _optitrack.optr_RigidBodyLocation(self, rbIndex, x, y, z, qx, qy, qz, qw, yaw, pitch, roll)

    def IsRigidBodyTracked(self, rbIndex: "int") -> "bool":
        return _optitrack.optr_IsRigidBodyTracked(self, rbIndex)

    def FrameMarkerCount(self) -> "int":
        return _optitrack.optr_FrameMarkerCount(self)

    def AttachListener(self) -> "void":
        return _optitrack.optr_AttachListener(self)

    def DetachListener(self) -> "void":
        return _optitrack.optr_DetachListener(self)

    def RigidBodyName(self, name: "char const *", rbIndex: "int") -> "void":
        return _optitrack.optr_RigidBodyName(self, name, rbIndex)

    def __init__(self):
        _optitrack.optr_swiginit(self, _optitrack.new_optr())
    __swig_destroy__ = _optitrack.delete_optr

# Register optr in _optitrack:
_optitrack.optr_swigregister(optr)


def new_floatp() -> "float *":
    return _optitrack.new_floatp()

def copy_floatp(value: "float") -> "float *":
    return _optitrack.copy_floatp(value)

def delete_floatp(obj: "float *") -> "void":
    return _optitrack.delete_floatp(obj)

def floatp_assign(obj: "float *", value: "float") -> "void":
    return _optitrack.floatp_assign(obj, value)

def floatp_value(obj: "float *") -> "float":
    return _optitrack.floatp_value(obj)


