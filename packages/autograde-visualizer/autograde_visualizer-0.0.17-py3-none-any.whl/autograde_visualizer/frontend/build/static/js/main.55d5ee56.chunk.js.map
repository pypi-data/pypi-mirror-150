{"version":3,"sources":["index.tsx"],"names":["Streamlit","events","addEventListener","RENDER_EVENT","event","svgNode","document","body","appendChild","createElementNS","plotWidth","clientWidth","setAttribute","toString","data","detail","theme","group","upperGroup","connectionGroup","lowerGroup","upperHeight","lowerHeight","connectionPos","lowerPos","plotHeight","note_data","args","total_duration","length","noteEnd","uppperBounds","t","lowerBounds","noteHeight","el","expectedBegin","expectedEnd","expectedNotePitch","noteBegin","notePitch","expectedBeginX","expectedEndX","expectedNoteY","beginX","endX","noteY","rest1","expectedNoteEl","bgEl","rest2","noteEl","connectionEl","points","join","mouseDown","previousCoords","scale","translation","evt","clientX","clientY","preventDefault","contains","target","currentX","currentY","deltaX","deltaY","altKey","setFrameHeight","setComponentReady"],"mappings":"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","file":"static/js/main.55d5ee56.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\n\n// Add a click handler to our button. It will send data back to Streamlit.\n\nlet isFocused = false\n\nfunction onRender(event: Event): void {\n\n  const svgNode = document.body.appendChild(document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\"))\n\n  const plotWidth = document.body.clientWidth\n  \n  const plotHeight = 1000\n  svgNode.setAttribute(\"width\", plotWidth.toString())\n  svgNode.setAttribute(\"height\", plotHeight.toString())\n    \n\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  // Maintain compatibility with older versions of Streamlit that don't send\n  // a theme object.\n  if (data.theme) {\n    // Use CSS vars to style our button border. Alternatively, the theme style\n    // is defined in the data.theme object.\n    const borderStyling = `1px solid var(${\n      isFocused ? \"--primary-color\" : \"gray\"\n    })`\n  }\n\n  const group = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\n  const upperGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\n  const connectionGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\n  const lowerGroup = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\")\n\n  upperGroup.setAttribute('fill', 'white')\n  connectionGroup.setAttribute('stroke', 'white')\n  connectionGroup.setAttribute('stroke-width', '0.2')\n  lowerGroup.setAttribute('fill', 'white')\n\n  const connectionHeight = plotHeight / 8\n  \n  const upperHeight = (plotHeight-connectionHeight) / 2\n  const lowerHeight = (plotHeight-connectionHeight) / 2\n\n  const upperPos = 0\n  const connectionPos = upperPos + upperHeight\n  const lowerPos = connectionPos + connectionHeight\n\n  const json_data = data.args['json']\n  const note_data = json_data['mistakes']\n  const total_duration = note_data[note_data.length-1].noteEnd as number\n\n  const uppperBounds = svgNode.appendChild(\n    document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\")\n  )\n  uppperBounds.setAttribute('x', \"0\")\n  uppperBounds.setAttribute('y', upperPos.toString())\n  uppperBounds.setAttribute('width', plotWidth.toString())\n  uppperBounds.setAttribute('height', upperHeight.toString())\n  uppperBounds.setAttribute('fill', 'none')\n  uppperBounds.setAttribute('stroke', '#fff')\n\n  for (let t = 0; t < total_duration; t++) {\n    const x = t / total_duration * plotWidth;\n    const y = upperPos+upperHeight\n\n    // const tickEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"line\")\n    // tickEl.setAttribute('x1', x.toString())\n    // tickEl.setAttribute('x2', x.toString())\n    // tickEl.setAttribute('y1', y.toString())\n    // tickEl.setAttribute('y2', (y-5).toString())\n    // tickEl.setAttribute('stroke', 'white')\n\n    // const textEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\")\n    // textEl.setAttribute('fill', 'white')\n    // textEl.setAttribute('dy', \"15\")\n    // textEl.setAttribute('font-size', \"10\")\n    // textEl.setAttribute('transform', `translate(${x}, ${y}) rotate(45)`)\n    // textEl.textContent = t.toString()\n\n    // upperGroup.appendChild(tickEl)\n    // upperGroup.appendChild(textEl)\n\n    // lowerGroup.appendChild(tickEl)\n    // lowerGroup.appendChild(textEl)\n  }\n\n\n  const lowerBounds = svgNode.appendChild(\n    document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\")\n  )\n  lowerBounds.setAttribute('x', \"0\")\n  lowerBounds.setAttribute('y', lowerPos.toString())\n  lowerBounds.setAttribute('width', plotWidth.toString())\n  lowerBounds.setAttribute('height', lowerHeight.toString())\n  lowerBounds.setAttribute('fill', 'none')\n  lowerBounds.setAttribute('stroke', '#fff')\n\n  const noteHeight = upperHeight / 127.0\n  \n  for (const el of note_data) {\n      const expectedBegin = el['expectedNoteBegin'] as number\n      const expectedEnd = el['expectedNoteEnd'] as number\n      const expectedNotePitch = el['expectedNotePitch'] as number\n\n      const noteBegin = el['noteBegin'] as number\n      const noteEnd = el['noteEnd'] as number\n      const notePitch = el['notePitch'] as number\n     \n      const expectedBeginX = expectedBegin / total_duration * plotWidth\n      const expectedEndX = expectedEnd / total_duration * plotWidth\n      const expectedNoteY = upperHeight * (127-expectedNotePitch) / 127.0\n\n      const beginX = noteBegin / total_duration * plotWidth\n      const endX = noteEnd / total_duration * plotWidth\n      const noteY = lowerPos + lowerHeight * (127-notePitch) / 127.0\n\n      let rest1 = true\n\n      if (expectedNotePitch != 0) {\n        const expectedNoteEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\")\n        expectedNoteEl.setAttribute('x', expectedBeginX.toString())\n        expectedNoteEl.setAttribute('y', expectedNoteY.toString())\n        expectedNoteEl.setAttribute('width', (expectedEndX-expectedBeginX).toString())\n        expectedNoteEl.setAttribute('height', noteHeight.toString())\n        upperGroup.appendChild(expectedNoteEl)\n\n        const bgEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\")\n        bgEl.setAttribute('x', expectedBeginX.toString())\n        bgEl.setAttribute('y', upperPos.toString())\n        bgEl.setAttribute('width', (expectedEndX-expectedBeginX).toString())\n        bgEl.setAttribute('height', upperHeight.toString())\n        bgEl.setAttribute('fill', '#aaa1')\n        bgEl.setAttribute('stroke', '#aaa')\n        bgEl.setAttribute('stroke-width', '0.1')\n        upperGroup.appendChild(bgEl)\n\n        rest1 = false\n      }\n\n      let rest2 = true\n\n      if (notePitch != 0) {\n        const noteEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\")\n        noteEl.setAttribute('x', beginX.toString())\n        noteEl.setAttribute('y', (noteY).toString())\n        noteEl.setAttribute('width', (endX-beginX).toString())\n        noteEl.setAttribute('height', noteHeight.toString())\n        lowerGroup.appendChild(noteEl)\n\n        const bgEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\")\n        bgEl.setAttribute('x', beginX.toString())\n        bgEl.setAttribute('y', lowerPos.toString())\n        bgEl.setAttribute('width', (endX-beginX).toString())\n        bgEl.setAttribute('height', lowerHeight.toString())\n        bgEl.setAttribute('fill', '#aaa1')\n        bgEl.setAttribute('stroke', '#aaa')\n        bgEl.setAttribute('stroke-width', '0.1')\n        lowerGroup.appendChild(bgEl)\n\n        rest2 = false\n      }\n\n      if (! (rest1 || rest2)) {\n        const connectionEl = document.createElementNS(\"http://www.w3.org/2000/svg\", \"polygon\")\n\n        const points = [\n          expectedBeginX,\n          connectionPos,\n          beginX,\n          lowerPos,\n          endX,\n          lowerPos,\n          expectedEndX,\n          connectionPos\n        ]\n\n        connectionEl.setAttribute('points', points.join(','))\n        connectionEl.setAttribute('fill', '#aaa1')\n        connectionEl.setAttribute('stroke', '#aaa')\n\n        connectionGroup.appendChild(connectionEl)\n      }\n  }\n\n  group.appendChild(upperGroup)\n  group.appendChild(connectionGroup)\n  group.appendChild(lowerGroup)\n  \n  svgNode.appendChild(group)\n\n  let mouseDown = false\n  let previousCoords = [0,0]\n  let scale = 1.0\n  let translation = 0\n  let mouseDownX = 0\n  let mouseDownY = 0\n\n  document.body.addEventListener('mousedown', (evt)=>{\n    mouseDown = true\n    mouseDownX = evt.clientX\n    mouseDownY = evt.clientY\n    previousCoords = [evt.clientX, evt.clientY]\n    evt.preventDefault()\n  })\n\n  document.body.addEventListener('mouseup', (evt)=>{\n    mouseDown = false\n    evt.preventDefault()\n  })\n\n  document.body.addEventListener('mousemove', (evt)=>{\n\n    if (!document.body.contains(evt.target as Node)) {\n      mouseDown = false\n      evt.preventDefault()\n      return\n    }\n\n    if (mouseDown) {\n      const currentX = evt.clientX\n      const currentY = evt.clientY\n      const deltaX = currentX-previousCoords[0]\n      const deltaY = currentY-previousCoords[1]\n      translation += deltaX\n\n      if (evt.altKey) {\n        scale += deltaY/100.0\n        if (scale < 0.1) {\n          scale = 0.1\n        }\n      }\n\n      previousCoords = [evt.clientX, evt.clientY]\n      group.setAttribute('transform', `translate(${translation*scale},0) translate(${(currentX/scale)/2.0},0) scale(${scale},1) translate(${-(currentX/scale)/2.0},0)`)\n      connectionGroup.setAttribute('stroke-width', (0.2/scale).toString())\n    }\n    evt.preventDefault()\n  })\n\n  Streamlit.setFrameHeight(plotHeight)\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight(1000)\n"],"sourceRoot":""}