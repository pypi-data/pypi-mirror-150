# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Tue Mar 22 16:51:11 2022
#

import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from .batch_key import tBatchKey

class tBatch(mettle.io.ISerializable, mettle.db.IPrimaryKey):

    def __init__(self,
                 id: int = 0,
                 parent_id: int = 0,
                 name: str = '',
                 group_id: str = '',
                 status: str = '',
                 cycle: str = '',
                 run_date: datetime.datetime = None,
                 run_interval: int = 0,
                 run_time: str = '',
                 ext_data: dict = None,
                 stamp_by: str = ''):
        """
        Constructor.

        :param id: int
        :param parent_id: int
        :param name: str
        :param group_id: str
        :param status: str
        :param cycle: str
        :param run_date: datetime.datetime
        :param run_interval: int
        :param run_time: str
        :param ext_data: dict
        :param stamp_by: str
        :param stamp_tm: datetime.datetime
        """
        self.id = id
        self.parent_id = parent_id
        self.name = name
        self.group_id = group_id
        self.status = status
        self.cycle = cycle
        self.run_date = run_date
        self.run_interval = run_interval
        self.run_time = run_time
        self.ext_data = ext_data
        self.stamp_by = stamp_by
        self.stamp_tm = None

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.id = 0
        self.parent_id = 0
        self.name = ''
        self.group_id = ''
        self.status = ''
        self.cycle = ''
        self.run_date = None
        self.run_interval = 0
        self.run_time = ''
        self.ext_data = None
        self.stamp_by = ''
        self.stamp_tm = None

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'tBatch'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_int64("id", self.id)
        _w.write_int64("parent_id", self.parent_id)
        _w.write_string("name", self.name)
        _w.write_string("group_id", self.group_id)
        _w.write_char("status", self.status)
        _w.write_char("cycle", self.cycle)
        _w.write_datetime("run_date", self.run_date)
        _w.write_int32("run_interval", self.run_interval)
        _w.write_string("run_time", self.run_time)
        _w.write_json("ext_data", self.ext_data)
        _w.write_string("stamp_by", self.stamp_by)
        _w.write_datetime("stamp_tm", self.stamp_tm)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.id = _r.read_int64("id")
        self.parent_id = _r.read_int64("parent_id")
        self.name = _r.read_string("name")
        self.group_id = _r.read_string("group_id")
        self.status = _r.read_char("status")
        self.cycle = _r.read_char("cycle")
        self.run_date = _r.read_datetime("run_date")
        self.run_interval = _r.read_int32("run_interval")
        self.run_time = _r.read_string("run_time")
        self.ext_data = _r.read_json("ext_data")
        self.stamp_by = _r.read_string("stamp_by")
        self.stamp_tm = _r.read_datetime("stamp_tm")
        _r.read_end(_oname)

    def _copy_from(self, rec: "tBatch"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.id = rec.id
        self.parent_id = rec.parent_id
        self.name = rec.name
        self.group_id = rec.group_id
        self.status = rec.status
        self.cycle = rec.cycle
        self.run_date = rec.run_date
        self.run_interval = rec.run_interval
        self.run_time = rec.run_time
        self.ext_data = rec.ext_data
        self.stamp_by = rec.stamp_by
        self.stamp_tm = rec.stamp_tm

    def _write_pk(self, _key: "tBatch"):
        """
        Write the primary key columns to the key object.

        :param _key:
        """
        self._write_key(_key)

    def _read_pk(self, _key: "tBatch"):
        """
        Read the primary key columns from the key object.

        :param _key:
        """
        self._read_key(_key)

    def _serialize_key(self, _w: mettle.io.IWriter):
        """
        Serialize the primary key to a stream.

        :param _w:
        """
        _key = tBatchKey()

        self._write_key(_key)
        _key._serialize(_w)

    def _deserialize_key(self, _r: mettle.io.IReader):
        """
        Deserialize the primary key from a stream.

        :param _r:
        """
        _key = tBatchKey()

        _key._deserialize(_r)
        self._read_key(_key)

    @staticmethod
    def _cache_davs(dvc=None, for_ins: bool = False, key_only: bool = False):
        """
        Cache the DAV into the dav cache (or create one) and return it.

        :param dvc: (mettle.lib.DavCache), target cache, if None a new one is created and returned.
        :param for_ins: Davs for insert.
        :param key_only: Davs by key only, ie for delete/selectone.
        """
        if dvc is None:
            dvc = mettle.lib.DavCache()

        if not for_ins:
            dvc.add_targ("id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
            dvc.add_targ("id", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))

        if key_only:
            return dvc

        dvc.add_targ("name", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("name", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 256))
        dvc.add_targ("group_id", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 1))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("status", mettle.lib.Dav(mettle.lib.Dav.eDavType.In, ['A','D']))
        dvc.add_targ("cycle", mettle.lib.Dav(mettle.lib.Dav.eDavType.Min, 1))
        dvc.add_targ("cycle", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 1))
        dvc.add_targ("cycle", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("cycle", mettle.lib.Dav(mettle.lib.Dav.eDavType.In, ['m','h','D','W','M','Y']))
        dvc.add_targ("run_date", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("run_interval", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("run_time", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 6))
        dvc.add_targ("stamp_by", mettle.lib.Dav(mettle.lib.Dav.eDavType.NotNull))
        dvc.add_targ("stamp_by", mettle.lib.Dav(mettle.lib.Dav.eDavType.Max, 128))

        return dvc

    def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
        tBatch._cache_davs(dvc, for_ins, key_only)

    def _write_key(self, _key: tBatchKey):
        """
        Write primary key columns to _key.

        :param _key:
        """
        _key.id = self.id

    def _read_key(self, _key: tBatchKey):
        """
        Read the primary key columns from _key.

        :param _key:
        """
        self.id = _key.id

    class Status_Couplet(dict):
        key_active = "A"
        key_disabled = "D"

        value_active = "Active"
        value_disabled = "Disabled"

        def __init__(self):
            self[self.key_active] = self.value_active
            self[self.key_disabled] = self.value_disabled

        @staticmethod
        def get_value(key):
            if key == tBatch.Status_Couplet.key_active:
                return tBatch.Status_Couplet.value_active

            if key == tBatch.Status_Couplet.key_disabled:
                return tBatch.Status_Couplet.value_disabled

            return ""

    class Cycle_Couplet(dict):
        key_minute = "m"
        key_hour = "h"
        key_day = "D"
        key_week = "W"
        key_month = "M"
        key_year = "Y"

        value_minute = "Minute"
        value_hour = "Hour"
        value_day = "Day"
        value_week = "Week"
        value_month = "Month"
        value_year = "Year"

        def __init__(self):
            self[self.key_minute] = self.value_minute
            self[self.key_hour] = self.value_hour
            self[self.key_day] = self.value_day
            self[self.key_week] = self.value_week
            self[self.key_month] = self.value_month
            self[self.key_year] = self.value_year

        @staticmethod
        def get_value(key):
            if key == tBatch.Cycle_Couplet.key_minute:
                return tBatch.Cycle_Couplet.value_minute

            if key == tBatch.Cycle_Couplet.key_hour:
                return tBatch.Cycle_Couplet.value_hour

            if key == tBatch.Cycle_Couplet.key_day:
                return tBatch.Cycle_Couplet.value_day

            if key == tBatch.Cycle_Couplet.key_week:
                return tBatch.Cycle_Couplet.value_week

            if key == tBatch.Cycle_Couplet.key_month:
                return tBatch.Cycle_Couplet.value_month

            if key == tBatch.Cycle_Couplet.key_year:
                return tBatch.Cycle_Couplet.value_year

            return ""

    @staticmethod
    def _pk_compare(x, y) -> int:
        """
        Compare function do primary key comparisons for list sorts and searches.

        :return: zero for x == y, negative for x < y, positive for x > y
        """
        return x.id - y.id

    def __lt__(self, other):
        return other and self._pk_compare(self, other) < 0

    def __gt__(self, other):
        return other and self._pk_compare(self, other) > 0

    def __eq__(self, other):
        return other and self._pk_compare(self, other) == 0

    def __le__(self, other):
        return other and self._pk_compare(self, other) <= 0

    def __ge__(self, other):
        return other and self._pk_compare(self, other) >= 0

    def __ne__(self, other):
        return other == None or self._pk_compare(self, other)

    def __repr__(self) -> str:
        return '<Batch [id:%r, parent_id:%r, name:%.32s, group_id:%.32s, status:%.32s, cycle:%.32s, run_date:%s, run_interval:%r, run_time:%.32s, ext_data:%.32s, stamp_by:%.32s, stamp_tm:%s]>' % (
            self.id, self.parent_id, self.name, self.group_id, self.status, self.cycle, self.run_date, self.run_interval, self.run_time, self.ext_data, self.stamp_by, self.stamp_tm)


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'tBatch.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = tBatch()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def __repr__(self) -> str:
            return '<tBatch.List[%d]>' % (len(self))

        def _get_davs(self, dvc=None, for_ins: bool = False, key_only: bool = False):
            return tBatch._cache_davs(dvc, for_ins, key_only)

