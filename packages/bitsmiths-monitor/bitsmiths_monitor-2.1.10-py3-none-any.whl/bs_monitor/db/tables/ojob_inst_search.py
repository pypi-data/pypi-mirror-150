# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Tue Mar 22 16:51:11 2022
#

import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from .job_inst import tJobInst

class oJobInstSearch(mettle.io.ISerializable):

    def __init__(self,
                 inst_rec: tJobInst = None,
                 job_id: int = 0,
                 job_name: str = '',
                 batch_id: int = 0,
                 batch_name: str = '',
                 batch_cycle: str = '',
                 batch_run_interval: int = 0,
                 batch_run_date: datetime.datetime = None,
                 batchinst_id: int = 0,
                 batchinst_run_date: datetime.datetime = None,
                 batchinst_status: str = ''):
        """
        Constructor.

        :param inst_rec: table -> table:this
        :param job_id: int
        :param job_name: str
        :param batch_id: int
        :param batch_name: str
        :param batch_cycle: str
        :param batch_run_interval: int
        :param batch_run_date: datetime.datetime
        :param batchinst_id: int
        :param batchinst_run_date: datetime.datetime
        :param batchinst_status: str
        """
        self.inst_rec = tJobInst()
        if inst_rec:
            self.inst_rec._copy_from(inst_rec)
        self.job_id = job_id
        self.job_name = job_name
        self.batch_id = batch_id
        self.batch_name = batch_name
        self.batch_cycle = batch_cycle
        self.batch_run_interval = batch_run_interval
        self.batch_run_date = batch_run_date
        self.batchinst_id = batchinst_id
        self.batchinst_run_date = batchinst_run_date
        self.batchinst_status = batchinst_status

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.inst_rec.clear()
        self.job_id = 0
        self.job_name = ''
        self.batch_id = 0
        self.batch_name = ''
        self.batch_cycle = ''
        self.batch_run_interval = 0
        self.batch_run_date = None
        self.batchinst_id = 0
        self.batchinst_run_date = None
        self.batchinst_status = ''

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'oJobInstSearch'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        self.inst_rec._serialize(_w)
        _w.write_int64("job_id", self.job_id)
        _w.write_string("job_name", self.job_name)
        _w.write_int32("batch_id", self.batch_id)
        _w.write_string("batch_name", self.batch_name)
        _w.write_string("batch_cycle", self.batch_cycle)
        _w.write_int32("batch_run_interval", self.batch_run_interval)
        _w.write_datetime("batch_run_date", self.batch_run_date)
        _w.write_int64("batchinst_id", self.batchinst_id)
        _w.write_datetime("batchinst_run_date", self.batchinst_run_date)
        _w.write_char("batchinst_status", self.batchinst_status)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.inst_rec._deserialize(_r)
        self.job_id = _r.read_int64("job_id")
        self.job_name = _r.read_string("job_name")
        self.batch_id = _r.read_int32("batch_id")
        self.batch_name = _r.read_string("batch_name")
        self.batch_cycle = _r.read_string("batch_cycle")
        self.batch_run_interval = _r.read_int32("batch_run_interval")
        self.batch_run_date = _r.read_datetime("batch_run_date")
        self.batchinst_id = _r.read_int64("batchinst_id")
        self.batchinst_run_date = _r.read_datetime("batchinst_run_date")
        self.batchinst_status = _r.read_char("batchinst_status")
        _r.read_end(_oname)

    def _copy_from(self, rec: "oJobInstSearch"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.inst_rec._copy_from(rec.inst_rec)
        self.job_id = rec.job_id
        self.job_name = rec.job_name
        self.batch_id = rec.batch_id
        self.batch_name = rec.batch_name
        self.batch_cycle = rec.batch_cycle
        self.batch_run_interval = rec.batch_run_interval
        self.batch_run_date = rec.batch_run_date
        self.batchinst_id = rec.batchinst_id
        self.batchinst_run_date = rec.batchinst_run_date
        self.batchinst_status = rec.batchinst_status

    def __repr__(self) -> str:
        return '<JobInst [inst_rec:%r, job_id:%r, job_name:%.32s, batch_id:%r, batch_name:%.32s, batch_cycle:%.32s, batch_run_interval:%r, batch_run_date:%s, batchinst_id:%r, batchinst_run_date:%s, batchinst_status:%.32s]>' % (
            self.inst_rec, self.job_id, self.job_name, self.batch_id, self.batch_name, self.batch_cycle, self.batch_run_interval, self.batch_run_date, self.batchinst_id, self.batchinst_run_date, self.batchinst_status)


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'oJobInstSearch.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = oJobInstSearch()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def __repr__(self) -> str:
            return '<oJobInstSearch.List[%d]>' % (len(self))

