# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Tue Mar 22 16:51:11 2022
#

import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

class oBatchItemForInserting(mettle.io.ISerializable):

    def __init__(self,
                 job_id: int = 0,
                 extra_args: str = '',
                 group_job: str = '',
                 group_batch: str = '',
                 priority: int = 0):
        """
        Constructor.

        :param job_id: int
        :param extra_args: str
        :param group_job: str
        :param group_batch: str
        :param priority: int
        """
        self.job_id = job_id
        self.extra_args = extra_args
        self.group_job = group_job
        self.group_batch = group_batch
        self.priority = priority

    def clear(self):
        """
        Clears all member variables for this database record.
        """
        self.job_id = 0
        self.extra_args = ''
        self.group_job = ''
        self.group_batch = ''
        self.priority = 0

    def _name(self) -> str:
        """
        Name of the record.

        :return: The name.
        """
        return 'oBatchItemForInserting'

    def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
        """
        Serialize record to a stream.

        :param _w:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _w.write_start(_oname)
        _w.write_int64("job_id", self.job_id)
        _w.write_string("extra_args", self.extra_args)
        _w.write_string("group_job", self.group_job)
        _w.write_string("group_batch", self.group_batch)
        _w.write_int32("priority", self.priority)
        _w.write_end(_oname)

    def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
        """
        Deserialize record from a stream.

        :param _r:
        :param _oname:
        """
        if _oname == None:
            _oname = self._name()

        _r.read_start(_oname)
        self.job_id = _r.read_int64("job_id")
        self.extra_args = _r.read_string("extra_args")
        self.group_job = _r.read_string("group_job")
        self.group_batch = _r.read_string("group_batch")
        self.priority = _r.read_int32("priority")
        _r.read_end(_oname)

    def _copy_from(self, rec: "oBatchItemForInserting"):
        """
        Copies the column from the rec into this record.

        :param rec: The source record.
        """
        self.job_id = rec.job_id
        self.extra_args = rec.extra_args
        self.group_job = rec.group_job
        self.group_batch = rec.group_batch
        self.priority = rec.priority

    def __repr__(self) -> str:
        return '<BatchItem [job_id:%r, extra_args:%.32s, group_job:%.32s, group_batch:%.32s, priority:%r]>' % (
            self.job_id, self.extra_args, self.group_job, self.group_batch, self.priority)


    class List(list, mettle.io.ISerializable):
        """
        List Class
        """

        def _name(self) -> str:
            """
            Name of the list.

            :return: The name
            """
            return 'oBatchItemForInserting.List'

        def _serialize(self, _w: mettle.io.IWriter, _oname: str = None):
            """
            Serialize the list to a stream.

            :param _w:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _w.write_start_list(_oname, len(self))

            for _rec in self:
                _rec._serialize(_w)

            _w.write_end(_oname)

        def _deserialize(self, _r: mettle.io.IReader, _oname: str = None):
            """
            Deserialize the list from a stream.

            :param _r:
            :param _oname:
            """
            if _oname == None:
                _oname = self._name()

            _cnt = _r.read_start_list(_oname)

            while _cnt >= 1:
                _rec  = oBatchItemForInserting()
                _cnt -= 1
                _rec._deserialize(_r)
                self.append(_rec)

            _r.read_end(_oname)

        def __repr__(self) -> str:
            return '<oBatchItemForInserting.List[%d]>' % (len(self))

