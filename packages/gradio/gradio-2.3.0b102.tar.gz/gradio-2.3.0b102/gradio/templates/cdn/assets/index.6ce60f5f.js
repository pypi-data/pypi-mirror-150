import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as validate_each_argument, v as validate_slots, y as createEventDispatcher, a6 as beforeUpdate, a7 as afterUpdate, a8 as colors, h as element, k as text, w as space, b as attr_dev, c as add_location, e as insert_dev, f as append_dev, m as set_data_dev, g as detach_dev, n as noop, u as destroy_each, I as binding_callbacks, R as StatusTracker, T as assign, B as create_component, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, K as bubble, U as get_spread_update, V as get_spread_object } from './index.46c26618.js';
import { B as Block } from './Block.41234a96.js';
import './styles.d87a390f.js';

/* Users/aliabid/projects/gradio/ui/packages/chatbot/src/ChatBot.svelte generated by Svelte v3.47.0 */
const file = "Users/aliabid/projects/gradio/ui/packages/chatbot/src/ChatBot.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

// (37:2) {#each value as message}
function create_each_block(ctx) {
	let div0;
	let t0_value = /*message*/ ctx[8][0] + "";
	let t0;
	let div0_style_value;
	let t1;
	let div1;
	let t2_value = /*message*/ ctx[8][1] + "";
	let t2;
	let t3;
	let div1_style_value;

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			t3 = space();
			attr_dev(div0, "data-testid", "user");
			attr_dev(div0, "class", "px-3 py-2 rounded-[22px] rounded-br-none text-white ml-7 text-sm");
			attr_dev(div0, "style", div0_style_value = "background-color:" + /*_colors*/ ctx[2][0]);
			add_location(div0, file, 37, 3, 968);
			attr_dev(div1, "data-testid", "bot");
			attr_dev(div1, "class", "px-3 py-2 rounded-[22px] rounded-bl-none place-self-start text-white ml-7 text-sm");
			attr_dev(div1, "style", div1_style_value = "background-color:" + /*_colors*/ ctx[2][1]);
			add_location(div1, file, 44, 3, 1153);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, t2);
			append_dev(div1, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*message*/ ctx[8][0] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*_colors*/ 4 && div0_style_value !== (div0_style_value = "background-color:" + /*_colors*/ ctx[2][0])) {
				attr_dev(div0, "style", div0_style_value);
			}

			if (dirty & /*value*/ 1 && t2_value !== (t2_value = /*message*/ ctx[8][1] + "")) set_data_dev(t2, t2_value);

			if (dirty & /*_colors*/ 4 && div1_style_value !== (div1_style_value = "background-color:" + /*_colors*/ ctx[2][1])) {
				attr_dev(div1, "style", div1_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(37:2) {#each value as message}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let each_value = /*value*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div0, "class", "flex flex-col items-end space-y-4 p-3");
			add_location(div0, file, 35, 1, 886);
			attr_dev(div1, "class", "overflow-y-auto h-[40vh]");
			add_location(div1, file, 34, 0, 830);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			/*div1_binding*/ ctx[4](div1);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*_colors, value*/ 5) {
				each_value = /*value*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			/*div1_binding*/ ctx[4](null);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let _colors;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ChatBot', slots, []);
	let { value } = $$props;
	let { color_map = undefined } = $$props;
	let div;
	let autoscroll;
	const dispatch = createEventDispatcher();

	beforeUpdate(() => {
		autoscroll = div && div.offsetHeight + div.scrollTop > div.scrollHeight - 20;
	});

	afterUpdate(() => {
		if (autoscroll) div.scrollTo(0, div.scrollHeight);
	});

	function get_colors() {
		if (!color_map) {
			return ["#fb923c", "#9ca3af"];
		} else {
			return color_map.map(c => {
				if (c in colors) {
					return colors[c].primary;
				} else {
					return c;
				}
			});
		}
	}

	const writable_props = ['value', 'color_map'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ChatBot> was created with unknown prop '${key}'`);
	});

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			div = $$value;
			$$invalidate(1, div);
		});
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('color_map' in $$props) $$invalidate(3, color_map = $$props.color_map);
	};

	$$self.$capture_state = () => ({
		beforeUpdate,
		afterUpdate,
		createEventDispatcher,
		colors,
		value,
		color_map,
		div,
		autoscroll,
		dispatch,
		get_colors,
		_colors
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('color_map' in $$props) $$invalidate(3, color_map = $$props.color_map);
		if ('div' in $$props) $$invalidate(1, div = $$props.div);
		if ('autoscroll' in $$props) autoscroll = $$props.autoscroll;
		if ('_colors' in $$props) $$invalidate(2, _colors = $$props._colors);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			value && dispatch("change");
		}
	};

	$$invalidate(2, _colors = get_colors());
	return [value, div, _colors, color_map, div1_binding];
}

class ChatBot extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { value: 0, color_map: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ChatBot",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
			console.warn("<ChatBot> was created without expected prop 'value'");
		}
	}

	get value() {
		throw new Error("<ChatBot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<ChatBot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color_map() {
		throw new Error("<ChatBot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color_map(value) {
		throw new Error("<ChatBot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Chatbot/Chatbot.svelte generated by Svelte v3.47.0 */

// (10:0) <Block padding={false} {elem_id}>
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let chatbot;
	let current;
	const statustracker_spread_levels = [/*loading_status*/ ctx[3]];
	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new StatusTracker({
			props: statustracker_props,
			$$inline: true
		});

	chatbot = new ChatBot({
			props: {
				value: /*value*/ ctx[1],
				color_map: /*color_map*/ ctx[2]
			},
			$$inline: true
		});

	chatbot.$on("change", /*change_handler*/ ctx[4]);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			create_component(chatbot.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(chatbot, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*loading_status*/ 8)
			? get_spread_update(statustracker_spread_levels, [get_spread_object(/*loading_status*/ ctx[3])])
			: {};

			statustracker.$set(statustracker_changes);
			const chatbot_changes = {};
			if (dirty & /*value*/ 2) chatbot_changes.value = /*value*/ ctx[1];
			if (dirty & /*color_map*/ 4) chatbot_changes.color_map = /*color_map*/ ctx[2];
			chatbot.$set(chatbot_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(chatbot.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(chatbot.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(statustracker, detaching);
			if (detaching) detach_dev(t);
			destroy_component(chatbot, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(10:0) <Block padding={false} {elem_id}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				padding: false,
				elem_id: /*elem_id*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];

			if (dirty & /*$$scope, value, color_map, loading_status*/ 46) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Chatbot', slots, []);
	let { elem_id = "" } = $$props;
	let { value = [] } = $$props;
	let { color_map } = $$props;
	let { loading_status } = $$props;
	const writable_props = ['elem_id', 'value', 'color_map', 'loading_status'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Chatbot> was created with unknown prop '${key}'`);
	});

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('color_map' in $$props) $$invalidate(2, color_map = $$props.color_map);
		if ('loading_status' in $$props) $$invalidate(3, loading_status = $$props.loading_status);
	};

	$$self.$capture_state = () => ({
		ChatBot,
		Block,
		StatusTracker,
		elem_id,
		value,
		color_map,
		loading_status
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('color_map' in $$props) $$invalidate(2, color_map = $$props.color_map);
		if ('loading_status' in $$props) $$invalidate(3, loading_status = $$props.loading_status);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [elem_id, value, color_map, loading_status, change_handler];
}

class Chatbot extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			value: 1,
			color_map: 2,
			loading_status: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Chatbot",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*color_map*/ ctx[2] === undefined && !('color_map' in props)) {
			console.warn("<Chatbot> was created without expected prop 'color_map'");
		}

		if (/*loading_status*/ ctx[3] === undefined && !('loading_status' in props)) {
			console.warn("<Chatbot> was created without expected prop 'loading_status'");
		}
	}

	get elem_id() {
		throw new Error("<Chatbot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Chatbot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Chatbot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Chatbot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color_map() {
		throw new Error("<Chatbot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color_map(value) {
		throw new Error("<Chatbot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<Chatbot>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<Chatbot>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Chatbot$1 = Chatbot;

const modes = ["static"];

export { Chatbot$1 as Component, modes };
