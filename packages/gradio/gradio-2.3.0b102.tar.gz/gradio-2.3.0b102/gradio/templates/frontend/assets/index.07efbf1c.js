import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, y as createEventDispatcher, h as element, b as attr_dev, a2 as set_style, c as add_location, e as insert_dev, n as noop, g as detach_dev, B as create_component, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, K as bubble } from './index.ac9abe4c.js';

var typography = '';

/* Users/aliabid/projects/gradio/ui/packages/markdown/src/Markdown.svelte generated by Svelte v3.47.0 */
const file = "Users/aliabid/projects/gradio/ui/packages/markdown/src/Markdown.svelte";

function create_fragment$1(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "id", /*elem_id*/ ctx[0]);
			attr_dev(div, "class", "output-markdown prose");
			set_style(div, "max-width", "100%");
			add_location(div, file, 8, 0, 219);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = /*value*/ ctx[1];
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 2) div.innerHTML = /*value*/ ctx[1];
			if (dirty & /*elem_id*/ 1) {
				attr_dev(div, "id", /*elem_id*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Markdown', slots, []);
	let { elem_id = "" } = $$props;
	let { value } = $$props;
	const dispatch = createEventDispatcher();
	const writable_props = ['elem_id', 'value'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Markdown> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		elem_id,
		value,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 2) {
			(dispatch("change"));
		}
	};

	return [elem_id, value];
}

class Markdown extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { elem_id: 0, value: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Markdown",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[1] === undefined && !('value' in props)) {
			console.warn("<Markdown> was created without expected prop 'value'");
		}
	}

	get elem_id() {
		throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Markdown/Markdown.svelte generated by Svelte v3.47.0 */

function create_fragment(ctx) {
	let markdown;
	let current;

	markdown = new Markdown({
			props: { value: /*value*/ ctx[0] },
			$$inline: true
		});

	markdown.$on("change", /*change_handler*/ ctx[3]);

	const block = {
		c: function create() {
			create_component(markdown.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(markdown, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const markdown_changes = {};
			if (dirty & /*value*/ 1) markdown_changes.value = /*value*/ ctx[0];
			markdown.$set(markdown_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(markdown.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(markdown.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(markdown, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Markdown', slots, []);
	let { label } = $$props;
	let { elem_id = "" } = $$props;
	let { value = "" } = $$props;
	const dispatch = createEventDispatcher();
	const writable_props = ['label', 'elem_id', 'value'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Markdown> was created with unknown prop '${key}'`);
	});

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Markdown,
		label,
		elem_id,
		value,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('elem_id' in $$props) $$invalidate(2, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*label*/ 2) {
			(dispatch("change"));
		}
	};

	return [value, label, elem_id, change_handler];
}

class Markdown_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { label: 1, elem_id: 2, value: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Markdown_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*label*/ ctx[1] === undefined && !('label' in props)) {
			console.warn("<Markdown> was created without expected prop 'label'");
		}
	}

	get label() {
		throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Markdown>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Markdown>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Markdown_1$1 = Markdown_1;

const modes = ["static"];

export { Markdown_1$1 as Component, modes };
