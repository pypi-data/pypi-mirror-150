import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, R as StatusTracker, T as assign, Z as create_slot, B as create_component, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, K as bubble, w as space, e as insert_dev, U as get_spread_update, V as get_spread_object, _ as update_slot_base, $ as get_all_dirty_from_scope, a0 as get_slot_changes, g as detach_dev } from './index.ac9abe4c.js';
import { C as Carousel } from './CarouselItem.svelte_svelte_type_style_lang.e7f78b02.js';

/* src/components/Carousel/Carousel.svelte generated by Svelte v3.47.0 */

// (7:0) <Carousel {elem_id} on:change>
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let current;
	const statustracker_spread_levels = [/*loading_status*/ ctx[1]];
	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new StatusTracker({
			props: statustracker_props,
			$$inline: true
		});

	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*loading_status*/ 2)
			? get_spread_update(statustracker_spread_levels, [get_spread_object(/*loading_status*/ ctx[1])])
			: {};

			statustracker.$set(statustracker_changes);

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(statustracker, detaching);
			if (detaching) detach_dev(t);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(7:0) <Carousel {elem_id} on:change>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let carousel;
	let current;

	carousel = new Carousel({
			props: {
				elem_id: /*elem_id*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	carousel.$on("change", /*change_handler*/ ctx[3]);

	const block = {
		c: function create() {
			create_component(carousel.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(carousel, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const carousel_changes = {};
			if (dirty & /*elem_id*/ 1) carousel_changes.elem_id = /*elem_id*/ ctx[0];

			if (dirty & /*$$scope, loading_status*/ 18) {
				carousel_changes.$$scope = { dirty, ctx };
			}

			carousel.$set(carousel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(carousel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(carousel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(carousel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Carousel', slots, ['default']);
	let { elem_id = "" } = $$props;
	let { loading_status } = $$props;
	const writable_props = ['elem_id', 'loading_status'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Carousel> was created with unknown prop '${key}'`);
	});

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('loading_status' in $$props) $$invalidate(1, loading_status = $$props.loading_status);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		Carousel,
		StatusTracker,
		elem_id,
		loading_status
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('loading_status' in $$props) $$invalidate(1, loading_status = $$props.loading_status);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [elem_id, loading_status, slots, change_handler, $$scope];
}

class Carousel_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { elem_id: 0, loading_status: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Carousel_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*loading_status*/ ctx[1] === undefined && !('loading_status' in props)) {
			console.warn("<Carousel> was created without expected prop 'loading_status'");
		}
	}

	get elem_id() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Carousel_1$1 = Carousel_1;

const modes = ["static"];

export { Carousel_1$1 as Component, modes };
