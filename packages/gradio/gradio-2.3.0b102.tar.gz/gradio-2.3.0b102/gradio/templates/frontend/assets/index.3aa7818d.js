import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as svg_element, b as attr_dev, c as add_location, e as insert_dev, f as append_dev, n as noop, g as detach_dev, x as globals, h as element, G as group_outros, E as transition_out, H as check_outros, D as transition_in, k as text, m as set_data_dev, q as empty, o as validate_each_argument, B as create_component, w as space, C as mount_component, F as destroy_component, u as destroy_each, l as listen_dev, J as onDestroy, af as add_render_callback, an as create_in_transition, ao as create_out_transition, y as createEventDispatcher, R as StatusTracker, T as assign, U as get_spread_update, V as get_spread_object } from './index.ac9abe4c.js';
import { f as fade } from './index.0d36dde3.js';
import { B as Block } from './Block.72d7a1e6.js';
import { B as BlockLabel } from './BlockLabel.573022c1.js';
import './styles.d87a390f.js';

/* Users/aliabid/projects/gradio/ui/packages/icons/src/JSON.svelte generated by Svelte v3.47.0 */

const file$3 = "Users/aliabid/projects/gradio/ui/packages/icons/src/JSON.svelte";

function create_fragment$3(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", "M5 3h2v2H5v5a2 2 0 0 1-2 2a2 2 0 0 1 2 2v5h2v2H5c-1.07-.27-2-.9-2-2v-4a2 2 0 0 0-2-2H0v-2h1a2 2 0 0 0 2-2V5a2 2 0 0 1 2-2m14 0a2 2 0 0 1 2 2v4a2 2 0 0 0 2 2h1v2h-1a2 2 0 0 0-2 2v4a2 2 0 0 1-2 2h-2v-2h2v-5a2 2 0 0 1 2-2a2 2 0 0 1-2-2V5h-2V3h2m-7 12a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m-4 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1m8 0a1 1 0 0 1 1 1a1 1 0 0 1-1 1a1 1 0 0 1-1-1a1 1 0 0 1 1-1Z");
			add_location(path, file$3, 10, 2, 236);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "role", "img");
			attr_dev(svg, "class", "iconify iconify--mdi");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "preserveAspectRatio", "xMidYMid meet");
			attr_dev(svg, "viewBox", "0 0 24 24");
			add_location(svg, file$3, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('JSON', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JSON> was created with unknown prop '${key}'`);
	});

	return [];
}

class JSON$1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "JSON",
			options,
			id: create_fragment$3.name
		});
	}
}

/* Users/aliabid/projects/gradio/ui/packages/json/src/JSONNode.svelte generated by Svelte v3.47.0 */

const { Object: Object_1 } = globals;
const file$2 = "Users/aliabid/projects/gradio/ui/packages/json/src/JSONNode.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

// (79:1) {:else}
function create_else_block_2(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*value*/ ctx[1]);
			attr_dev(div, "class", "json-item inline");
			attr_dev(div, "item-type", "other");
			add_location(div, file$2, 79, 2, 1826);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data_dev(t, /*value*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(79:1) {:else}",
		ctx
	});

	return block;
}

// (75:37) 
function create_if_block_9(ctx) {
	let div;
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(/*value*/ ctx[1]);
			attr_dev(div, "class", "json-item inline text-blue-500");
			attr_dev(div, "item-type", "number");
			add_location(div, file$2, 75, 2, 1731);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data_dev(t, /*value*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(75:37) ",
		ctx
	});

	return block;
}

// (71:38) 
function create_if_block_8(ctx) {
	let div;
	let t_value = /*value*/ ctx[1].toLocaleString() + "";
	let t;

	const block = {
		c: function create() {
			div = element("div");
			t = text(t_value);
			attr_dev(div, "class", "json-item inline text-red-500");
			attr_dev(div, "item-type", "boolean");
			add_location(div, file$2, 71, 2, 1590);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 2 && t_value !== (t_value = /*value*/ ctx[1].toLocaleString() + "")) set_data_dev(t, t_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(71:38) ",
		ctx
	});

	return block;
}

// (67:37) 
function create_if_block_7(ctx) {
	let div;
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("\"");
			t1 = text(/*value*/ ctx[1]);
			t2 = text("\"");
			attr_dev(div, "class", "json-item inline text-green-500");
			attr_dev(div, "item-type", "string");
			add_location(div, file$2, 67, 2, 1462);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 2) set_data_dev(t1, /*value*/ ctx[1]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(67:37) ",
		ctx
	});

	return block;
}

// (60:26) 
function create_if_block_6(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			div.textContent = "null";
			attr_dev(div, "class", "json-item inline text-gray-500 dark:text-gray-400");
			attr_dev(div, "item-type", "null");
			add_location(div, file$2, 60, 2, 1315);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(60:26) ",
		ctx
	});

	return block;
}

// (33:35) 
function create_if_block_3(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_4, create_else_block_1];
	const if_blocks = [];

	function select_block_type_2(ctx, dirty) {
		if (/*collapsed*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_2(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_2(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(33:35) ",
		ctx
	});

	return block;
}

// (7:1) {#if value instanceof Array}
function create_if_block$2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*collapsed*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(7:1) {#if value instanceof Array}",
		ctx
	});

	return block;
}

// (42:2) {:else}
function create_else_block_1(ctx) {
	let t0;
	let div;
	let t1;
	let current;
	let each_value_1 = Object.entries(/*value*/ ctx[1]);
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = text("{\n\t\t\t");
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = text("\n\t\t\t}");
			attr_dev(div, "class", "json-children pl-4");
			add_location(div, file$2, 43, 3, 931);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t1, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*Object, value, depth*/ 6) {
				each_value_1 = Object.entries(/*value*/ ctx[1]);
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(42:2) {:else}",
		ctx
	});

	return block;
}

// (34:2) {#if collapsed}
function create_if_block_4(ctx) {
	let button;
	let t0;
	let t1_value = Object.keys(/*value*/ ctx[1]).length + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t0 = text("{+");
			t1 = text(t1_value);
			t2 = text(" items}");
			add_location(button, file$2, 34, 3, 778);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);
			append_dev(button, t2);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_1*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 2 && t1_value !== (t1_value = Object.keys(/*value*/ ctx[1]).length + "")) set_data_dev(t1, t1_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(34:2) {#if collapsed}",
		ctx
	});

	return block;
}

// (52:15) {#if i !== Object.keys(value).length - 1}
function create_if_block_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(",");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(52:15) {#if i !== Object.keys(value).length - 1}",
		ctx
	});

	return block;
}

// (45:4) {#each Object.entries(value) as node, i}
function create_each_block_1(ctx) {
	let div;
	let t0_value = /*node*/ ctx[5][0] + "";
	let t0;
	let t1;
	let jsonnode;
	let show_if = /*i*/ ctx[7] !== Object.keys(/*value*/ ctx[1]).length - 1;
	let t2;
	let current;

	jsonnode = new JSONNode({
			props: {
				value: /*node*/ ctx[5][1],
				depth: /*depth*/ ctx[2] + 1,
				key: /*i*/ ctx[7]
			},
			$$inline: true
		});

	let if_block = show_if && create_if_block_5(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = text(": ");
			create_component(jsonnode.$$.fragment);
			if (if_block) if_block.c();
			t2 = space();
			attr_dev(div, "class", "json-item");
			add_location(div, file$2, 45, 5, 1014);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			mount_component(jsonnode, div, null);
			if (if_block) if_block.m(div, null);
			append_dev(div, t2);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*value*/ 2) && t0_value !== (t0_value = /*node*/ ctx[5][0] + "")) set_data_dev(t0, t0_value);
			const jsonnode_changes = {};
			if (dirty & /*value*/ 2) jsonnode_changes.value = /*node*/ ctx[5][1];
			if (dirty & /*depth*/ 4) jsonnode_changes.depth = /*depth*/ ctx[2] + 1;
			jsonnode.$set(jsonnode_changes);
			if (dirty & /*value*/ 2) show_if = /*i*/ ctx[7] !== Object.keys(/*value*/ ctx[1]).length - 1;

			if (show_if) {
				if (if_block) ; else {
					if_block = create_if_block_5(ctx);
					if_block.c();
					if_block.m(div, t2);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(jsonnode.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(jsonnode.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(jsonnode);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(45:4) {#each Object.entries(value) as node, i}",
		ctx
	});

	return block;
}

// (19:2) {:else}
function create_else_block$1(ctx) {
	let t0;
	let div;
	let t1;
	let current;
	let each_value = /*value*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t0 = text("[\n\t\t\t");
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = text("\n\t\t\t]");
			attr_dev(div, "class", "json-children pl-4");
			add_location(div, file$2, 20, 3, 469);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			insert_dev(target, t1, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value, depth*/ 6) {
				each_value = /*value*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(19:2) {:else}",
		ctx
	});

	return block;
}

// (8:2) {#if collapsed}
function create_if_block_1$1(ctx) {
	let button;
	let span;
	let t0;
	let t1_value = /*value*/ ctx[1].length + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			span = element("span");
			t0 = text("expand ");
			t1 = text(t1_value);
			t2 = text(" children");
			attr_dev(span, "class", "bg-gray-50 hover:bg-gray-100 px-1 border rounded text-gray-700 dark:hover:bg-gray-800");
			add_location(span, file$2, 13, 4, 284);
			add_location(button, file$2, 8, 3, 214);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, span);
			append_dev(span, t0);
			append_dev(span, t1);
			append_dev(span, t2);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 2 && t1_value !== (t1_value = /*value*/ ctx[1].length + "")) set_data_dev(t1, t1_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(8:2) {#if collapsed}",
		ctx
	});

	return block;
}

// (25:6) {#if i !== value.length - 1}
function create_if_block_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(",");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(25:6) {#if i !== value.length - 1}",
		ctx
	});

	return block;
}

// (22:4) {#each value as node, i}
function create_each_block(ctx) {
	let div;
	let t0;
	let t1;
	let jsonnode;
	let t2;
	let t3;
	let current;

	jsonnode = new JSONNode({
			props: {
				value: /*node*/ ctx[5],
				depth: /*depth*/ ctx[2] + 1
			},
			$$inline: true
		});

	let if_block = /*i*/ ctx[7] !== /*value*/ ctx[1].length - 1 && create_if_block_2(ctx);

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*i*/ ctx[7]);
			t1 = text(": ");
			create_component(jsonnode.$$.fragment);
			t2 = space();
			if (if_block) if_block.c();
			t3 = space();
			attr_dev(div, "class", "json-item");
			add_location(div, file$2, 22, 5, 536);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			mount_component(jsonnode, div, null);
			append_dev(div, t2);
			if (if_block) if_block.m(div, null);
			append_dev(div, t3);
			current = true;
		},
		p: function update(ctx, dirty) {
			const jsonnode_changes = {};
			if (dirty & /*value*/ 2) jsonnode_changes.value = /*node*/ ctx[5];
			if (dirty & /*depth*/ 4) jsonnode_changes.depth = /*depth*/ ctx[2] + 1;
			jsonnode.$set(jsonnode_changes);

			if (/*i*/ ctx[7] !== /*value*/ ctx[1].length - 1) {
				if (if_block) ; else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(div, t3);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(jsonnode.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(jsonnode.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(jsonnode);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(22:4) {#each value as node, i}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let current;

	const if_block_creators = [
		create_if_block$2,
		create_if_block_3,
		create_if_block_6,
		create_if_block_7,
		create_if_block_8,
		create_if_block_9,
		create_else_block_2
	];

	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[1] instanceof Array) return 0;
		if (/*value*/ ctx[1] instanceof Object) return 1;
		if (/*value*/ ctx[1] === null) return 2;
		if (typeof /*value*/ ctx[1] === "string") return 3;
		if (typeof /*value*/ ctx[1] === "boolean") return 4;
		if (typeof /*value*/ ctx[1] === "number") return 5;
		return 6;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			attr_dev(div, "class", "json-node inline text-sm font-mono leading-tight ");
			add_location(div, file$2, 5, 0, 99);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_blocks[current_block_type_index].d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('JSONNode', slots, []);
	let { value } = $$props;
	let { depth } = $$props;
	let { collapsed = depth > 4 } = $$props;
	const writable_props = ['value', 'depth', 'collapsed'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JSONNode> was created with unknown prop '${key}'`);
	});

	const click_handler = () => {
		$$invalidate(0, collapsed = false);
	};

	const click_handler_1 = () => {
		$$invalidate(0, collapsed = false);
	};

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('depth' in $$props) $$invalidate(2, depth = $$props.depth);
		if ('collapsed' in $$props) $$invalidate(0, collapsed = $$props.collapsed);
	};

	$$self.$capture_state = () => ({ value, depth, collapsed });

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('depth' in $$props) $$invalidate(2, depth = $$props.depth);
		if ('collapsed' in $$props) $$invalidate(0, collapsed = $$props.collapsed);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [collapsed, value, depth, click_handler, click_handler_1];
}

class JSONNode extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { value: 1, depth: 2, collapsed: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "JSONNode",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[1] === undefined && !('value' in props)) {
			console.warn("<JSONNode> was created without expected prop 'value'");
		}

		if (/*depth*/ ctx[2] === undefined && !('depth' in props)) {
			console.warn("<JSONNode> was created without expected prop 'depth'");
		}
	}

	get value() {
		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get depth() {
		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set depth(value) {
		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get collapsed() {
		throw new Error("<JSONNode>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set collapsed(value) {
		throw new Error("<JSONNode>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* Users/aliabid/projects/gradio/ui/packages/json/src/JSON.svelte generated by Svelte v3.47.0 */
const file$1 = "Users/aliabid/projects/gradio/ui/packages/json/src/JSON.svelte";

// (32:1) {#if copied}
function create_if_block$1(ctx) {
	let span;
	let span_intro;
	let span_outro;
	let current;

	const block = {
		c: function create() {
			span = element("span");
			span.textContent = "COPIED";
			attr_dev(span, "class", "font-bold dark:text-green-400 text-green-600 py-1 px-2 absolute block w-full text-left bg-white dark:bg-gray-900");
			add_location(span, file$1, 32, 2, 896);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			current = true;
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (span_outro) span_outro.end(1);
				span_intro = create_in_transition(span, fade, { duration: 100 });
				span_intro.start();
			});

			current = true;
		},
		o: function outro(local) {
			if (span_intro) span_intro.invalidate();
			span_outro = create_out_transition(span, fade, { duration: 350 });
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (detaching && span_outro) span_outro.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(32:1) {#if copied}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let button;
	let span;
	let t1;
	let t2;
	let jsonnode;
	let current;
	let mounted;
	let dispose;
	let if_block = /*copied*/ ctx[1] && create_if_block$1(ctx);

	jsonnode = new JSONNode({
			props: { value: /*value*/ ctx[0], depth: 0 },
			$$inline: true
		});

	const block = {
		c: function create() {
			button = element("button");
			span = element("span");
			span.textContent = "copy to clipboard";
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			create_component(jsonnode.$$.fragment);
			attr_dev(span, "class", "py-1 px-2");
			add_location(span, file$1, 30, 1, 831);
			attr_dev(button, "class", "transition-color overflow-hidden font-sans absolute right-0 top-0 rounded-bl-lg shadow-sm text-xs text-gray-500 flex items-center bg-white z-20 border-l border-b border-gray-100");
			add_location(button, file$1, 26, 0, 607);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, span);
			append_dev(button, t1);
			if (if_block) if_block.m(button, null);
			insert_dev(target, t2, anchor);
			mount_component(jsonnode, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen_dev(button, "click", /*handle_copy*/ ctx[2], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (/*copied*/ ctx[1]) {
				if (if_block) {
					if (dirty & /*copied*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(button, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			const jsonnode_changes = {};
			if (dirty & /*value*/ 1) jsonnode_changes.value = /*value*/ ctx[0];
			jsonnode.$set(jsonnode_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			transition_in(jsonnode.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			transition_out(jsonnode.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			if (if_block) if_block.d();
			if (detaching) detach_dev(t2);
			destroy_component(jsonnode, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('JSON', slots, []);
	let { value = {} } = $$props;
	let copied = false;
	let timer;

	function copy_feedback() {
		$$invalidate(1, copied = true);
		if (timer) clearTimeout(timer);

		timer = setTimeout(
			() => {
				$$invalidate(1, copied = false);
			},
			1000
		);
	}

	async function handle_copy() {
		if ("clipboard" in navigator) {
			await navigator.clipboard.writeText(JSON.stringify(value, null, 2));
			copy_feedback();
		}
	}

	onDestroy(() => {
		if (timer) clearTimeout(timer);
	});

	const writable_props = ['value'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<JSON> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
	};

	$$self.$capture_state = () => ({
		onDestroy,
		fade,
		JSONNode,
		value,
		copied,
		timer,
		copy_feedback,
		handle_copy
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('copied' in $$props) $$invalidate(1, copied = $$props.copied);
		if ('timer' in $$props) timer = $$props.timer;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, copied, handle_copy];
}

class JSON_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { value: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "JSON_1",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<JSON>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<JSON>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Json/Json.svelte generated by Svelte v3.47.0 */
const file = "src/components/Json/Json.svelte";

// (15:1) {#if label}
function create_if_block_1(ctx) {
	let blocklabel;
	let current;

	blocklabel = new BlockLabel({
			props: { Icon: JSON$1, label: /*label*/ ctx[3] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty & /*label*/ 8) blocklabel_changes.label = /*label*/ ctx[3];
			blocklabel.$set(blocklabel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blocklabel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(15:1) {#if label}",
		ctx
	});

	return block;
}

// (23:1) {:else}
function create_else_block(ctx) {
	let div1;
	let div0;
	let jsonicon;
	let current;
	jsonicon = new JSON$1({ $$inline: true });

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(jsonicon.$$.fragment);
			attr_dev(div0, "class", "h-7 dark:text-white opacity-50");
			add_location(div0, file, 24, 3, 708);
			attr_dev(div1, "class", "h-full min-h-[6rem] flex justify-center items-center");
			add_location(div1, file, 23, 2, 638);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(jsonicon, div0, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(jsonicon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(jsonicon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(jsonicon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(23:1) {:else}",
		ctx
	});

	return block;
}

// (21:1) {#if value && value !== '""'}
function create_if_block(ctx) {
	let json;
	let current;

	json = new JSON_1({
			props: { value: /*value*/ ctx[1] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(json.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(json, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const json_changes = {};
			if (dirty & /*value*/ 2) json_changes.value = /*value*/ ctx[1];
			json.$set(json_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(json.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(json.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(json, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(21:1) {#if value && value !== '\\\"\\\"'}",
		ctx
	});

	return block;
}

// (14:0) <Block test_id="json" {elem_id}>
function create_default_slot(ctx) {
	let t0;
	let statustracker;
	let t1;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;
	let if_block0 = /*label*/ ctx[3] && create_if_block_1(ctx);
	const statustracker_spread_levels = [/*loading_status*/ ctx[2]];
	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new StatusTracker({
			props: statustracker_props,
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[1] && /*value*/ ctx[1] !== '""') return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(statustracker.$$.fragment);
			t1 = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(statustracker, target, anchor);
			insert_dev(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*label*/ ctx[3]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*label*/ 8) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			const statustracker_changes = (dirty & /*loading_status*/ 4)
			? get_spread_update(statustracker_spread_levels, [get_spread_object(/*loading_status*/ ctx[2])])
			: {};

			statustracker.$set(statustracker_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			destroy_component(statustracker, detaching);
			if (detaching) detach_dev(t1);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(14:0) <Block test_id=\\\"json\\\" {elem_id}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				test_id: "json",
				elem_id: /*elem_id*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];

			if (dirty & /*$$scope, value, loading_status, label*/ 46) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Json', slots, []);
	let { elem_id = "" } = $$props;
	let { value } = $$props;
	let { loading_status } = $$props;
	let { label } = $$props;
	const dispatch = createEventDispatcher();
	const writable_props = ['elem_id', 'value', 'loading_status', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Json> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('loading_status' in $$props) $$invalidate(2, loading_status = $$props.loading_status);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		JSON: JSON_1,
		Block,
		BlockLabel,
		JSONIcon: JSON$1,
		StatusTracker,
		elem_id,
		value,
		loading_status,
		label,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('loading_status' in $$props) $$invalidate(2, loading_status = $$props.loading_status);
		if ('label' in $$props) $$invalidate(3, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 2) {
			(dispatch("change"));
		}
	};

	return [elem_id, value, loading_status, label];
}

class Json extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			value: 1,
			loading_status: 2,
			label: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Json",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[1] === undefined && !('value' in props)) {
			console.warn("<Json> was created without expected prop 'value'");
		}

		if (/*loading_status*/ ctx[2] === undefined && !('loading_status' in props)) {
			console.warn("<Json> was created without expected prop 'loading_status'");
		}

		if (/*label*/ ctx[3] === undefined && !('label' in props)) {
			console.warn("<Json> was created without expected prop 'label'");
		}
	}

	get elem_id() {
		throw new Error("<Json>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Json>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Json>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Json>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<Json>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<Json>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Json>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Json>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Json$1 = Json;

const modes = ["static"];

export { Json$1 as Component, modes };
