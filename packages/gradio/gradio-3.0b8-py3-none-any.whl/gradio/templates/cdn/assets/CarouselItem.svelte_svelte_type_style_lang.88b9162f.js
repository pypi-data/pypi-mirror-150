import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, Z as create_slot, v as validate_slots, y as createEventDispatcher, P as validate_store, Q as component_subscribe, a3 as setContext, a4 as writable, a5 as set_store_value, h as element, w as space, a as svg_element, k as text, b as attr_dev, c as add_location, e as insert_dev, f as append_dev, l as listen_dev, _ as update_slot_base, $ as get_all_dirty_from_scope, a0 as get_slot_changes, m as set_data_dev, D as transition_in, E as transition_out, g as detach_dev, r as run_all } from './index.e70bf722.js';

var Carousel_svelte_svelte_type_style_lang = '';

/* mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/carousel/src/Carousel.svelte generated by Svelte v3.47.0 */
const file = "mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/carousel/src/Carousel.svelte";

function create_fragment(ctx) {
	let div2;
	let t0;
	let div1;
	let button0;
	let svg0;
	let path0;
	let t1;
	let div0;
	let t2_value = /*carousel_index*/ ctx[1] + 1 + "";
	let t2;
	let t3;
	let t4_value = /*$items*/ ctx[2].length + "";
	let t4;
	let t5;
	let button1;
	let svg1;
	let path1;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[8].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

	const block = {
		c: function create() {
			div2 = element("div");
			if (default_slot) default_slot.c();
			t0 = space();
			div1 = element("div");
			button0 = element("button");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t1 = space();
			div0 = element("div");
			t2 = text(t2_value);
			t3 = text(" / ");
			t4 = text(t4_value);
			t5 = space();
			button1 = element("button");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			attr_dev(path0, "d", "M 0.32506616,7.2360106 7.1796187,0.33129769 c 0.4360247,-0.439451 1.1455702,-0.442056 1.5845974,-0.0058 0.4390612,0.435849 0.441666,1.14535901 0.00582,1.58438501 l -6.064985,6.1096644 6.10968,6.0646309 c 0.4390618,0.436026 0.4416664,1.145465 0.00582,1.584526 -0.4358485,0.439239 -1.1453586,0.441843 -1.5845975,0.0058 L 0.33088256,8.8203249 C 0.11135166,8.6022941 0.00105996,8.3161928 7.554975e-6,8.0295489 -0.00104244,7.7427633 0.10735446,7.4556467 0.32524356,7.2361162");
			attr_dev(path0, "class", "s-A-psF5l3RbaP");
			add_location(path0, file, 52, 4, 1312);
			attr_dev(svg0, "class", "caret text-xs fill-current s-A-psF5l3RbaP");
			attr_dev(svg0, "width", ".7em");
			attr_dev(svg0, "height", ".7em");
			attr_dev(svg0, "viewBox", "0 0 9.1457395 15.999842");
			add_location(svg0, file, 46, 3, 1186);
			attr_dev(button0, "class", "flex items-center justify-center h-6 w-6 hover:text-orange-500 s-A-psF5l3RbaP");
			add_location(button0, file, 42, 2, 1078);
			attr_dev(div0, "class", "carousel_index text-center font-semibold s-A-psF5l3RbaP");
			add_location(div0, file, 57, 2, 1828);
			attr_dev(path1, "d", "M 0.32506616,7.2360106 7.1796187,0.33129769 c 0.4360247,-0.439451 1.1455702,-0.442056 1.5845974,-0.0058 0.4390612,0.435849 0.441666,1.14535901 0.00582,1.58438501 l -6.064985,6.1096644 6.10968,6.0646309 c 0.4390618,0.436026 0.4416664,1.145465 0.00582,1.584526 -0.4358485,0.439239 -1.1453586,0.441843 -1.5845975,0.0058 L 0.33088256,8.8203249 C 0.11135166,8.6022941 0.00105996,8.3161928 7.554975e-6,8.0295489 -0.00104244,7.7427633 0.10735446,7.4556467 0.32524356,7.2361162");
			attr_dev(path1, "class", "s-A-psF5l3RbaP");
			add_location(path1, file, 70, 4, 2184);
			attr_dev(svg1, "class", "caret text-xs fill-current scale-x-[-1] s-A-psF5l3RbaP");
			attr_dev(svg1, "width", ".7em");
			attr_dev(svg1, "height", ".7em");
			attr_dev(svg1, "viewBox", "0 0 9.1457395 15.999842");
			add_location(svg1, file, 64, 3, 2045);
			attr_dev(button1, "class", "flex items-center justify-center h-6 w-6 hover:text-orange-500 s-A-psF5l3RbaP");
			add_location(button1, file, 60, 2, 1936);
			attr_dev(div1, "class", "carousel-control flex gap-4 justify-center items-center pt-2 text-sm s-A-psF5l3RbaP");
			add_location(div1, file, 39, 1, 989);
			attr_dev(div2, "class", "output-carousel flex flex-col relative s-A-psF5l3RbaP");
			attr_dev(div2, "id", /*elem_id*/ ctx[0]);
			add_location(div2, file, 36, 0, 911);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);

			if (default_slot) {
				default_slot.m(div2, null);
			}

			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, button0);
			append_dev(button0, svg0);
			append_dev(svg0, path0);
			append_dev(div1, t1);
			append_dev(div1, div0);
			append_dev(div0, t2);
			append_dev(div0, t3);
			append_dev(div0, t4);
			append_dev(div1, t5);
			append_dev(div1, button1);
			append_dev(button1, svg1);
			append_dev(svg1, path1);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*prev*/ ctx[6], false, false, false),
					listen_dev(button1, "click", /*next*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[7],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
						null
					);
				}
			}

			if ((!current || dirty & /*carousel_index*/ 2) && t2_value !== (t2_value = /*carousel_index*/ ctx[1] + 1 + "")) set_data_dev(t2, t2_value);
			if ((!current || dirty & /*$items*/ 4) && t4_value !== (t4_value = /*$items*/ ctx[2].length + "")) set_data_dev(t4, t4_value);

			if (!current || dirty & /*elem_id*/ 1) {
				attr_dev(div2, "id", /*elem_id*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (default_slot) default_slot.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const CAROUSEL = {};

function instance($$self, $$props, $$invalidate) {
	let $items;
	let $current;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Carousel', slots, ['default']);
	let { elem_id = "" } = $$props;
	const dispatch = createEventDispatcher();
	const items = writable([]);
	validate_store(items, 'items');
	component_subscribe($$self, items, value => $$invalidate(2, $items = value));
	const current = writable();
	validate_store(current, 'current');
	component_subscribe($$self, current, value => $$invalidate(10, $current = value));
	let id = -1;

	setContext(CAROUSEL, {
		register: () => {
			$items.push(++id);
			items.set($items);
			return id;
		},
		unregister: id => {
			const i = $items.findIndex(_id => _id === id);
			$items.slice(i, 1);
			items.set($items);
		},
		current
	});

	let carousel_index = 0;

	const next = () => {
		$$invalidate(1, carousel_index = (carousel_index + 1) % $items.length);
		dispatch("change");
	};

	const prev = () => {
		$$invalidate(1, carousel_index = (carousel_index - 1 + $items.length) % $items.length);
		dispatch("change");
	};

	const writable_props = ['elem_id'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Carousel> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('$$scope' in $$props) $$invalidate(7, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		CAROUSEL,
		setContext,
		createEventDispatcher,
		writable,
		elem_id,
		dispatch,
		items,
		current,
		id,
		carousel_index,
		next,
		prev,
		$items,
		$current
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('id' in $$props) id = $$props.id;
		if ('carousel_index' in $$props) $$invalidate(1, carousel_index = $$props.carousel_index);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$items, carousel_index*/ 6) {
			set_store_value(current, $current = $items[carousel_index] || 0, $current);
		}
	};

	return [elem_id, carousel_index, $items, items, current, next, prev, $$scope, slots];
}

class Carousel extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { elem_id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Carousel",
			options,
			id: create_fragment.name
		});
	}

	get elem_id() {
		throw new Error("<Carousel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Carousel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var CarouselItem_svelte_svelte_type_style_lang = '';

export { Carousel as C, CAROUSEL as a };
