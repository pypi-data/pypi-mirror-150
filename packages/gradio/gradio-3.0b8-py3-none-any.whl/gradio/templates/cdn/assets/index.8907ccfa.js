import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as svg_element, b as attr_dev, c as add_location, e as insert_dev, f as append_dev, n as noop, g as detach_dev, a8 as colors, x as globals, q as empty, o as validate_each_argument, h as element, w as space, a2 as set_style, k as text, m as set_data_dev, u as destroy_each, l as listen_dev, r as run_all, t as toggle_class, y as createEventDispatcher, R as StatusTracker, T as assign, B as create_component, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, U as get_spread_update, V as get_spread_object, G as group_outros, H as check_outros } from './index.e70bf722.js';
import { g as get_next_color } from './color.4219a966.js';
import { B as Block } from './Block.78dd9cf7.js';
import { B as BlockLabel } from './BlockLabel.d1dd87a1.js';
import './styles.d87a390f.js';

/* mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/icons/src/TextHighlight.svelte generated by Svelte v3.47.0 */

const file$2 = "mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/icons/src/TextHighlight.svelte";

function create_fragment$2(ctx) {
	let svg;
	let path0;
	let path1;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			attr_dev(path0, "fill", "currentColor");
			attr_dev(path0, "d", "M12 15H5a3 3 0 0 1-3-3v-2a3 3 0 0 1 3-3h5V5a1 1 0 0 0-1-1H3V2h6a3 3 0 0 1 3 3zM5 9a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h5V9zm15 14v2a1 1 0 0 0 1 1h5v-4h-5a1 1 0 0 0-1 1z");
			add_location(path0, file$2, 10, 2, 239);
			attr_dev(path1, "fill", "currentColor");
			attr_dev(path1, "d", "M2 30h28V2Zm26-2h-7a3 3 0 0 1-3-3v-2a3 3 0 0 1 3-3h5v-2a1 1 0 0 0-1-1h-6v-2h6a3 3 0 0 1 3 3Z");
			add_location(path1, file$2, 13, 3, 439);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "role", "img");
			attr_dev(svg, "class", "iconify iconify--carbon");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "preserveAspectRatio", "xMidYMid meet");
			attr_dev(svg, "viewBox", "0 0 32 32");
			add_location(svg, file$2, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path0);
			append_dev(svg, path1);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TextHighlight', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TextHighlight> was created with unknown prop '${key}'`);
	});

	return [];
}

class TextHighlight extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TextHighlight",
			options,
			id: create_fragment$2.name
		});
	}
}

var HighlightedText_svelte_svelte_type_style_lang = '';

/* mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/highlighted-text/src/HighlightedText.svelte generated by Svelte v3.47.0 */

const { Object: Object_1 } = globals;
const file$1 = "mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/highlighted-text/src/HighlightedText.svelte";

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i][0];
	child_ctx[22] = list[i][1];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i][0];
	child_ctx[16] = list[i][1];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i][0];
	child_ctx[19] = list[i][1];
	child_ctx[21] = i;
	return child_ctx;
}

// (126:0) {:else}
function create_else_block$1(ctx) {
	let t;
	let div;
	let if_block = /*show_legend*/ ctx[1] && create_if_block_3(ctx);
	let each_value_2 = /*value*/ ctx[0];
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "textfield p-2 bg-white dark:bg-gray-800 rounded box-border max-w-full break-word leading-7 s-Y5p3A_EmfOc6");
			add_location(div, file$1, 136, 1, 4129);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (/*show_legend*/ ctx[1]) {
				if (if_block) ; else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*value*/ 1) {
				each_value_2 = /*value*/ ctx[0];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(126:0) {:else}",
		ctx
	});

	return block;
}

// (80:0) {#if mode === "categories"}
function create_if_block$1(ctx) {
	let t;
	let div;
	let if_block = /*show_legend*/ ctx[1] && create_if_block_2(ctx);
	let each_value = /*value*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "textfield bg-white dark:bg-transparent rounded-sm text-sm box-border max-w-full break-word leading-7 s-Y5p3A_EmfOc6");
			add_location(div, file$1, 96, 1, 2790);
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (/*show_legend*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*value, active, _color_map, show_legend*/ 15) {
				each_value = /*value*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(80:0) {#if mode === \\\"categories\\\"}",
		ctx
	});

	return block;
}

// (127:1) {#if show_legend}
function create_if_block_3(ctx) {
	let div;
	let span0;
	let t1;
	let span1;
	let t3;
	let span2;

	const block = {
		c: function create() {
			div = element("div");
			span0 = element("span");
			span0.textContent = "-1";
			t1 = space();
			span1 = element("span");
			span1.textContent = "0";
			t3 = space();
			span2 = element("span");
			span2.textContent = "+1";
			attr_dev(span0, "class", "s-Y5p3A_EmfOc6");
			add_location(span0, file$1, 131, 3, 4059);
			attr_dev(span1, "class", "s-Y5p3A_EmfOc6");
			add_location(span1, file$1, 132, 3, 4078);
			attr_dev(span2, "class", "s-Y5p3A_EmfOc6");
			add_location(span2, file$1, 133, 3, 4096);
			attr_dev(div, "class", "color_legend flex px-2 py-1 justify-between rounded mb-3 font-semibold s-Y5p3A_EmfOc6");
			set_style(div, "background", "-webkit-linear-gradient(to right,#8d83d6,(255,255,255,0),#eb4d4b)");
			set_style(div, "background", "linear-gradient(to right,#8d83d6,rgba(255,255,255,0),#eb4d4b)");
			add_location(div, file$1, 127, 2, 3800);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span0);
			append_dev(div, t1);
			append_dev(div, span1);
			append_dev(div, t3);
			append_dev(div, span2);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(127:1) {#if show_legend}",
		ctx
	});

	return block;
}

// (140:2) {#each value as [text, score]}
function create_each_block_2(ctx) {
	let span1;
	let span0;
	let t0_value = /*text*/ ctx[15] + "";
	let t0;
	let t1;
	let span1_style_value;

	const block = {
		c: function create() {
			span1 = element("span");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(span0, "class", "text dark:text-white s-Y5p3A_EmfOc6");
			add_location(span0, file$1, 146, 4, 4486);
			attr_dev(span1, "class", "textspan p-1 mr-0.5 bg-opacity-20 dark:bg-opacity-80 rounded-sm s-Y5p3A_EmfOc6");

			attr_dev(span1, "style", span1_style_value = "background-color: rgba(" + (/*score*/ ctx[22] < 0
			? "141, 131, 214," + -/*score*/ ctx[22]
			: "235, 77, 75," + /*score*/ ctx[22]) + ")");

			add_location(span1, file$1, 140, 3, 4274);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span1, anchor);
			append_dev(span1, span0);
			append_dev(span0, t0);
			append_dev(span1, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*text*/ ctx[15] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*value*/ 1 && span1_style_value !== (span1_style_value = "background-color: rgba(" + (/*score*/ ctx[22] < 0
			? "141, 131, 214," + -/*score*/ ctx[22]
			: "235, 77, 75," + /*score*/ ctx[22]) + ")")) {
				attr_dev(span1, "style", span1_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(140:2) {#each value as [text, score]}",
		ctx
	});

	return block;
}

// (81:1) {#if show_legend}
function create_if_block_2(ctx) {
	let div;
	let each_value_1 = Object.entries(/*_color_map*/ ctx[2]);
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(div, "class", "category-legend flex flex-wrap gap-1 mb-2 text-black s-Y5p3A_EmfOc6");
			add_location(div, file$1, 81, 2, 2283);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*Object, _color_map, handle_mouseover, handle_mouseout*/ 100) {
				each_value_1 = Object.entries(/*_color_map*/ ctx[2]);
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(81:1) {#if show_legend}",
		ctx
	});

	return block;
}

// (83:3) {#each Object.entries(_color_map) as [category, color], i}
function create_each_block_1(ctx) {
	let div;
	let t0_value = /*category*/ ctx[16] + "";
	let t0;
	let t1;
	let div_style_value;
	let mounted;
	let dispose;

	function mouseover_handler() {
		return /*mouseover_handler*/ ctx[8](/*category*/ ctx[16]);
	}

	function focus_handler() {
		return /*focus_handler*/ ctx[9](/*category*/ ctx[16]);
	}

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "category-label px-2 rounded-sm font-semibold cursor-pointer s-Y5p3A_EmfOc6");
			attr_dev(div, "style", div_style_value = "background-color:" + /*color*/ ctx[19].secondary);
			add_location(div, file$1, 83, 4, 2416);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);

			if (!mounted) {
				dispose = [
					listen_dev(div, "mouseover", mouseover_handler, false, false, false),
					listen_dev(div, "focus", focus_handler, false, false, false),
					listen_dev(div, "mouseout", /*mouseout_handler*/ ctx[10], false, false, false),
					listen_dev(div, "blur", /*blur_handler*/ ctx[11], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty & /*_color_map*/ 4 && t0_value !== (t0_value = /*category*/ ctx[16] + "")) set_data_dev(t0, t0_value);

			if (dirty & /*_color_map*/ 4 && div_style_value !== (div_style_value = "background-color:" + /*color*/ ctx[19].secondary)) {
				attr_dev(div, "style", div_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(83:3) {#each Object.entries(_color_map) as [category, color], i}",
		ctx
	});

	return block;
}

// (112:4) {#if !show_legend && category !== null}
function create_if_block_1$1(ctx) {
	let span;
	let t_value = /*category*/ ctx[16] + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			attr_dev(span, "class", "label mr-[-4px] font-bold uppercase text-xs inline-category text-white rounded-sm px-[0.325rem] mt-[0.05rem] py-[0.05rem] transition-colors s-Y5p3A_EmfOc6");

			set_style(
				span,
				"background-color",
				/*category*/ ctx[16] === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*category*/ ctx[16]
				? ""
				: /*_color_map*/ ctx[2][/*category*/ ctx[16]].primary,
				false
			);

			add_location(span, file$1, 112, 5, 3393);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t_value !== (t_value = /*category*/ ctx[16] + "")) set_data_dev(t, t_value);

			if (dirty & /*value, active, _color_map*/ 13) {
				set_style(
					span,
					"background-color",
					/*category*/ ctx[16] === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*category*/ ctx[16]
					? ""
					: /*_color_map*/ ctx[2][/*category*/ ctx[16]].primary,
					false
				);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(112:4) {#if !show_legend && category !== null}",
		ctx
	});

	return block;
}

// (100:2) {#each value as [text, category]}
function create_each_block(ctx) {
	let span1;
	let span0;
	let t0_value = /*text*/ ctx[15] + "";
	let t0;
	let t1;
	let t2;
	let if_block = !/*show_legend*/ ctx[1] && /*category*/ ctx[16] !== null && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			span1 = element("span");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			attr_dev(span0, "class", "text  s-Y5p3A_EmfOc6");
			add_location(span0, file$1, 110, 4, 3310);
			attr_dev(span1, "class", "textspan rounded-sm px-1 transition-colors text-black pb-[0.225rem] pt-[0.15rem] s-Y5p3A_EmfOc6");
			toggle_class(span1, "dark:text-white", /*category*/ ctx[16] === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*category*/ ctx[16]);
			toggle_class(span1, "hl", /*category*/ ctx[16] !== null);

			set_style(
				span1,
				"background-color",
				/*category*/ ctx[16] === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*category*/ ctx[16]
				? ""
				: /*_color_map*/ ctx[2][/*category*/ ctx[16]].secondary,
				false
			);

			add_location(span1, file$1, 100, 3, 2948);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span1, anchor);
			append_dev(span1, span0);
			append_dev(span0, t0);
			append_dev(span1, t1);
			if (if_block) if_block.m(span1, null);
			append_dev(span1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*text*/ ctx[15] + "")) set_data_dev(t0, t0_value);

			if (!/*show_legend*/ ctx[1] && /*category*/ ctx[16] !== null) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1$1(ctx);
					if_block.c();
					if_block.m(span1, t2);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*value, active*/ 9) {
				toggle_class(span1, "dark:text-white", /*category*/ ctx[16] === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*category*/ ctx[16]);
			}

			if (dirty & /*value*/ 1) {
				toggle_class(span1, "hl", /*category*/ ctx[16] !== null);
			}

			if (dirty & /*value, active, _color_map*/ 13) {
				set_style(
					span1,
					"background-color",
					/*category*/ ctx[16] === null || /*active*/ ctx[3] && /*active*/ ctx[3] !== /*category*/ ctx[16]
					? ""
					: /*_color_map*/ ctx[2][/*category*/ ctx[16]].secondary,
					false
				);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span1);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(100:2) {#each value as [text, category]}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[4] === "categories") return create_if_block$1;
		return create_else_block$1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('HighlightedText', slots, []);
	const browser = typeof document !== "undefined";
	let { value = [] } = $$props;
	let { show_legend = false } = $$props;
	let { color_map = {} } = $$props;
	let ctx;
	let _color_map = {};
	let active = "";

	function name_to_rgba(name, a) {
		if (!ctx) {
			var canvas = document.createElement("canvas");
			ctx = canvas.getContext("2d");
		}

		ctx.fillStyle = name;
		ctx.fillRect(0, 0, 1, 1);
		const [r, g, b] = ctx.getImageData(0, 0, 1, 1).data;
		ctx.clearRect(0, 0, 1, 1);
		return `rgba(${r}, ${g}, ${b}, ${255 / a})`;
	}

	let mode;

	if (color_map === null) {
		color_map = {};
	}

	function handle_mouseover(label) {
		$$invalidate(3, active = label);
	}

	function handle_mouseout() {
		$$invalidate(3, active = "");
	}

	const writable_props = ['value', 'show_legend', 'color_map'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HighlightedText> was created with unknown prop '${key}'`);
	});

	const mouseover_handler = category => handle_mouseover(category);
	const focus_handler = category => handle_mouseover(category);
	const mouseout_handler = () => handle_mouseout();
	const blur_handler = () => handle_mouseout();

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(1, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(7, color_map = $$props.color_map);
	};

	$$self.$capture_state = () => ({
		browser,
		colors,
		get_next_color,
		value,
		show_legend,
		color_map,
		ctx,
		_color_map,
		active,
		name_to_rgba,
		mode,
		handle_mouseover,
		handle_mouseout
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(1, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(7, color_map = $$props.color_map);
		if ('ctx' in $$props) ctx = $$props.ctx;
		if ('_color_map' in $$props) $$invalidate(2, _color_map = $$props._color_map);
		if ('active' in $$props) $$invalidate(3, active = $$props.active);
		if ('mode' in $$props) $$invalidate(4, mode = $$props.mode);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, color_map*/ 129) {
			{
				if (value.length > 0) {
					for (let [_, label] of value) {
						if (label !== null) {
							if (typeof label === "string") {
								$$invalidate(4, mode = "categories");

								if (!(label in color_map)) {
									let color = get_next_color(Object.keys(color_map).length);
									$$invalidate(7, color_map[label] = color, color_map);
								}
							} else {
								$$invalidate(4, mode = "scores");
							}
						}
					}
				}

				function correct_color_map() {
					for (const col in color_map) {
						const _c = color_map[col].trim();

						if (_c in colors) {
							$$invalidate(2, _color_map[col] = colors[_c], _color_map);
						} else {
							$$invalidate(
								2,
								_color_map[col] = {
									primary: browser
									? name_to_rgba(color_map[col], 1)
									: color_map[col],
									secondary: browser
									? name_to_rgba(color_map[col], 0.5)
									: color_map[col]
								},
								_color_map
							);
						}
					}
				}

				correct_color_map();
			}
		}
	};

	return [
		value,
		show_legend,
		_color_map,
		active,
		mode,
		handle_mouseover,
		handle_mouseout,
		color_map,
		mouseover_handler,
		focus_handler,
		mouseout_handler,
		blur_handler
	];
}

class HighlightedText extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { value: 0, show_legend: 1, color_map: 7 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "HighlightedText",
			options,
			id: create_fragment$1.name
		});
	}

	get value() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_legend() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_legend(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color_map() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color_map(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/HighlightedText/HighlightedText.svelte generated by Svelte v3.47.0 */
const file = "src/components/HighlightedText/HighlightedText.svelte";

// (18:1) {#if label}
function create_if_block_1(ctx) {
	let blocklabel;
	let current;

	blocklabel = new BlockLabel({
			props: {
				Icon: TextHighlight,
				label: /*label*/ ctx[4]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const blocklabel_changes = {};
			if (dirty & /*label*/ 16) blocklabel_changes.label = /*label*/ ctx[4];
			blocklabel.$set(blocklabel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blocklabel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(18:1) {#if label}",
		ctx
	});

	return block;
}

// (24:1) {:else}
function create_else_block(ctx) {
	let div1;
	let div0;
	let texthighlight;
	let current;
	texthighlight = new TextHighlight({ $$inline: true });

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(texthighlight.$$.fragment);
			attr_dev(div0, "class", "h-5 dark:text-white opacity-50");
			add_location(div0, file, 25, 3, 787);
			attr_dev(div1, "class", "h-full min-h-[6rem] flex justify-center items-center");
			add_location(div1, file, 24, 2, 717);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(texthighlight, div0, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(texthighlight.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(texthighlight.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(texthighlight);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(24:1) {:else}",
		ctx
	});

	return block;
}

// (22:1) {#if value}
function create_if_block(ctx) {
	let highlightedtext;
	let current;

	highlightedtext = new HighlightedText({
			props: {
				value: /*value*/ ctx[1],
				show_legend: /*show_legend*/ ctx[2],
				color_map: /*color_map*/ ctx[3]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(highlightedtext.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(highlightedtext, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const highlightedtext_changes = {};
			if (dirty & /*value*/ 2) highlightedtext_changes.value = /*value*/ ctx[1];
			if (dirty & /*show_legend*/ 4) highlightedtext_changes.show_legend = /*show_legend*/ ctx[2];
			if (dirty & /*color_map*/ 8) highlightedtext_changes.color_map = /*color_map*/ ctx[3];
			highlightedtext.$set(highlightedtext_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(highlightedtext.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(highlightedtext.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(highlightedtext, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(22:1) {#if value}",
		ctx
	});

	return block;
}

// (16:0) <Block {elem_id}>
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let t1;
	let current_block_type_index;
	let if_block1;
	let if_block1_anchor;
	let current;
	const statustracker_spread_levels = [/*loading_status*/ ctx[5]];
	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new StatusTracker({
			props: statustracker_props,
			$$inline: true
		});

	let if_block0 = /*label*/ ctx[4] && create_if_block_1(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if_block1.c();
			if_block1_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*loading_status*/ 32)
			? get_spread_update(statustracker_spread_levels, [get_spread_object(/*loading_status*/ ctx[5])])
			: {};

			statustracker.$set(statustracker_changes);

			if (/*label*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*label*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(statustracker, detaching);
			if (detaching) detach_dev(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t1);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(16:0) <Block {elem_id}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				elem_id: /*elem_id*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];

			if (dirty & /*$$scope, value, show_legend, color_map, label, loading_status*/ 190) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('HighlightedText', slots, []);
	let { elem_id = "" } = $$props;
	let { value } = $$props;
	let { show_legend } = $$props;
	let { color_map = {} } = $$props;
	let { label } = $$props;
	let { loading_status } = $$props;
	const dispatch = createEventDispatcher();
	const writable_props = ['elem_id', 'value', 'show_legend', 'color_map', 'label', 'loading_status'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<HighlightedText> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(2, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(3, color_map = $$props.color_map);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		HighlightedText,
		Block,
		BlockLabel,
		TextHighlight,
		StatusTracker,
		elem_id,
		value,
		show_legend,
		color_map,
		label,
		loading_status,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('show_legend' in $$props) $$invalidate(2, show_legend = $$props.show_legend);
		if ('color_map' in $$props) $$invalidate(3, color_map = $$props.color_map);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 2) {
			(dispatch("change"));
		}
	};

	return [elem_id, value, show_legend, color_map, label, loading_status];
}

class HighlightedText_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			value: 1,
			show_legend: 2,
			color_map: 3,
			label: 4,
			loading_status: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "HighlightedText_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[1] === undefined && !('value' in props)) {
			console.warn("<HighlightedText> was created without expected prop 'value'");
		}

		if (/*show_legend*/ ctx[2] === undefined && !('show_legend' in props)) {
			console.warn("<HighlightedText> was created without expected prop 'show_legend'");
		}

		if (/*label*/ ctx[4] === undefined && !('label' in props)) {
			console.warn("<HighlightedText> was created without expected prop 'label'");
		}

		if (/*loading_status*/ ctx[5] === undefined && !('loading_status' in props)) {
			console.warn("<HighlightedText> was created without expected prop 'loading_status'");
		}
	}

	get elem_id() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_legend() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_legend(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color_map() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color_map(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<HighlightedText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<HighlightedText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var HighlightedText_1$1 = HighlightedText_1;

const modes = ["static"];

export { HighlightedText_1$1 as Component, modes };
