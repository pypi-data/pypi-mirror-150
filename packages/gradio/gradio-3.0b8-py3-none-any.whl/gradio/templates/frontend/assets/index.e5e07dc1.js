import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, y as createEventDispatcher, Y as getContext, P as validate_store, Q as component_subscribe, ak as onMount, ab as tick, Z as create_slot, h as element, b as attr_dev, c as add_location, e as insert_dev, f as append_dev, _ as update_slot_base, $ as get_all_dirty_from_scope, a0 as get_slot_changes, D as transition_in, E as transition_out, g as detach_dev, q as empty, G as group_outros, H as check_outros, B as create_component, C as mount_component, F as destroy_component, K as bubble } from './index.50e14928.js';
import { a as TABS } from './Tabs.5530d9a8.js';

/* mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/tabs/src/TabItem.svelte generated by Svelte v3.47.0 */
const file = "mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/tabs/src/TabItem.svelte";

// (15:0) {#if $selected_tab === id}
function create_if_block(ctx) {
	let div1;
	let div0;
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			if (default_slot) default_slot.c();
			attr_dev(div0, "class", "flex flex-col gr-gap gr-form-gap relative col overflow-auto flex-1");
			add_location(div0, file, 19, 2, 600);
			attr_dev(div1, "id", /*elem_id*/ ctx[0]);
			attr_dev(div1, "class", "tabitem p-2 border-2 border-t-0 border-gray-200 relative flex");
			add_location(div1, file, 15, 1, 503);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			if (default_slot) {
				default_slot.m(div0, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[5],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*elem_id*/ 1) {
				attr_dev(div1, "id", /*elem_id*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(15:0) {#if $selected_tab === id}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*$selected_tab*/ ctx[1] === /*id*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*$selected_tab*/ ctx[1] === /*id*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*$selected_tab*/ 2) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let $selected_tab;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('TabItem', slots, ['default']);
	let { elem_id = "" } = $$props;
	let { name } = $$props;
	const dispatch = createEventDispatcher();
	const id = {};
	const { register_tab, unregister_tab, selected_tab } = getContext(TABS);
	validate_store(selected_tab, 'selected_tab');
	component_subscribe($$self, selected_tab, value => $$invalidate(1, $selected_tab = value));
	register_tab({ name, id });

	onMount(() => {
		return () => unregister_tab({ name, id });
	});

	const writable_props = ['elem_id', 'name'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TabItem> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('name' in $$props) $$invalidate(4, name = $$props.name);
		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		getContext,
		onMount,
		createEventDispatcher,
		tick,
		TABS,
		elem_id,
		name,
		dispatch,
		id,
		register_tab,
		unregister_tab,
		selected_tab,
		$selected_tab
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('name' in $$props) $$invalidate(4, name = $$props.name);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*$selected_tab*/ 2) {
			$selected_tab === id && tick().then(() => dispatch("select"));
		}
	};

	return [elem_id, $selected_tab, id, selected_tab, name, $$scope, slots];
}

class TabItem extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { elem_id: 0, name: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "TabItem",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*name*/ ctx[4] === undefined && !('name' in props)) {
			console.warn("<TabItem> was created without expected prop 'name'");
		}
	}

	get elem_id() {
		throw new Error("<TabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<TabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<TabItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<TabItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/TabItem/Tabs.svelte generated by Svelte v3.47.0 */

// (6:0) <TabItem {elem_id} name={label} on:select>
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	const block = {
		c: function create() {
			if (default_slot) default_slot.c();
		},
		m: function mount(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(6:0) <TabItem {elem_id} name={label} on:select>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let tabitem;
	let current;

	tabitem = new TabItem({
			props: {
				elem_id: /*elem_id*/ ctx[0],
				name: /*label*/ ctx[1],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	tabitem.$on("select", /*select_handler*/ ctx[3]);

	const block = {
		c: function create() {
			create_component(tabitem.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(tabitem, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const tabitem_changes = {};
			if (dirty & /*elem_id*/ 1) tabitem_changes.elem_id = /*elem_id*/ ctx[0];
			if (dirty & /*label*/ 2) tabitem_changes.name = /*label*/ ctx[1];

			if (dirty & /*$$scope*/ 16) {
				tabitem_changes.$$scope = { dirty, ctx };
			}

			tabitem.$set(tabitem_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(tabitem.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(tabitem.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(tabitem, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Tabs', slots, ['default']);
	let { elem_id = "" } = $$props;
	let { label } = $$props;
	const writable_props = ['elem_id', 'label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tabs> was created with unknown prop '${key}'`);
	});

	function select_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ TabItem, elem_id, label });

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [elem_id, label, slots, select_handler, $$scope];
}

class Tabs extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { elem_id: 0, label: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tabs",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*label*/ ctx[1] === undefined && !('label' in props)) {
			console.warn("<Tabs> was created without expected prop 'label'");
		}
	}

	get elem_id() {
		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Tabs>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Tabs>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Tabs$1 = Tabs;

const modes = ["static"];

export { Tabs$1 as Component, modes };
