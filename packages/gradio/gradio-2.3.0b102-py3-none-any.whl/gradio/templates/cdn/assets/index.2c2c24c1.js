import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as svg_element, b as attr_dev, c as add_location, e as insert_dev, f as append_dev, n as noop, g as detach_dev, y as createEventDispatcher, B as create_component, w as space, q as empty, C as mount_component, G as group_outros, E as transition_out, H as check_outros, D as transition_in, F as destroy_component, K as bubble, I as binding_callbacks, L as bind, h as element, k as text, m as set_data_dev, N as src_url_equal, l as listen_dev, r as run_all, M as add_flush_callback, P as validate_store, X, Q as component_subscribe, R as StatusTracker, T as assign, U as get_spread_update, V as get_spread_object } from './index.46c26618.js';
import { B as Block } from './Block.41234a96.js';
import { n as normalise_file } from './utils.49185b04.js';
import { U as Upload } from './Upload.db6db987.js';
import { M as ModifyUpload } from './ModifyUpload.3b832619.js';
import { B as BlockLabel } from './BlockLabel.ca50294a.js';
import { W as Webcam } from './Image.svelte_svelte_type_style_lang.5197f6c9.js';
import './styles.d87a390f.js';
import './_commonjsHelpers.88e99c8f.js';

/* Users/aliabid/projects/gradio/ui/packages/icons/src/Video.svelte generated by Svelte v3.47.0 */

const file$2 = "Users/aliabid/projects/gradio/ui/packages/icons/src/Video.svelte";

function create_fragment$3(ctx) {
	let svg;
	let polygon;
	let rect;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			polygon = svg_element("polygon");
			rect = svg_element("rect");
			attr_dev(polygon, "points", "23 7 16 12 23 17 23 7");
			add_location(polygon, file$2, 11, 2, 229);
			attr_dev(rect, "x", "1");
			attr_dev(rect, "y", "5");
			attr_dev(rect, "width", "15");
			attr_dev(rect, "height", "14");
			attr_dev(rect, "rx", "2");
			attr_dev(rect, "ry", "2");
			add_location(rect, file$2, 11, 44, 271);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "none");
			attr_dev(svg, "stroke", "currentColor");
			attr_dev(svg, "stroke-width", "1.5");
			attr_dev(svg, "stroke-linecap", "round");
			attr_dev(svg, "stroke-linejoin", "round");
			attr_dev(svg, "class", "feather feather-video");
			add_location(svg, file$2, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, polygon);
			append_dev(svg, rect);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$3($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Video', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Video> was created with unknown prop '${key}'`);
	});

	return [];
}

class Video extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Video",
			options,
			id: create_fragment$3.name
		});
	}
}

const prettyBytes = (bytes) => {
  let units = ["B", "KB", "MB", "GB", "PB"];
  let i = 0;
  while (bytes > 1024) {
    bytes /= 1024;
    i++;
  }
  let unit = units[i];
  return bytes.toFixed(1) + " " + unit;
};
const playable = (filename) => {
  return true;
};

/* Users/aliabid/projects/gradio/ui/packages/video/src/Video.svelte generated by Svelte v3.47.0 */
const file$1 = "Users/aliabid/projects/gradio/ui/packages/video/src/Video.svelte";

// (48:0) {:else}
function create_else_block$2(ctx) {
	let modifyupload;
	let t;
	let show_if;
	let if_block_anchor;
	let current;
	modifyupload = new ModifyUpload({ $$inline: true });
	modifyupload.$on("clear", /*handle_clear*/ ctx[10]);

	function select_block_type_2(ctx, dirty) {
		if (dirty & /*value*/ 1) show_if = null;
		if (show_if == null) show_if = !!playable(/*value*/ ctx[0].name);
		if (show_if) return create_if_block_3;
		if (/*value*/ ctx[0].size) return create_if_block_4;
	}

	let current_block_type = select_block_type_2(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			create_component(modifyupload.$$.fragment);
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(modifyupload, target, anchor);
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(modifyupload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(modifyupload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(modifyupload, detaching);
			if (detaching) detach_dev(t);

			if (if_block) {
				if_block.d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$2.name,
		type: "else",
		source: "(48:0) {:else}",
		ctx
	});

	return block;
}

// (29:0) {#if value === null}
function create_if_block$2(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block_1, create_if_block_2];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*source*/ ctx[1] === "upload") return 0;
		if (/*source*/ ctx[1] === "webcam") return 1;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(target, anchor);
			}

			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				} else {
					if_block = null;
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$2.name,
		type: "if",
		source: "(29:0) {#if value === null}",
		ctx
	});

	return block;
}

// (62:22) 
function create_if_block_4(ctx) {
	let div0;
	let t0_value = /*value*/ ctx[0].name + "";
	let t0;
	let t1;
	let div1;
	let t2_value = prettyBytes(/*value*/ ctx[0].size) + "";
	let t2;

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			div1 = element("div");
			t2 = text(t2_value);
			attr_dev(div0, "class", "file-name text-4xl p-6 break-all");
			add_location(div0, file$1, 62, 2, 1608);
			attr_dev(div1, "class", "file-size text-2xl p-2");
			add_location(div1, file$1, 63, 2, 1675);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].name + "")) set_data_dev(t0, t0_value);
			if (dirty & /*value*/ 1 && t2_value !== (t2_value = prettyBytes(/*value*/ ctx[0].size) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(62:22) ",
		ctx
	});

	return block;
}

// (50:1) {#if playable(value.name)}
function create_if_block_3(ctx) {
	let video;
	let video_src_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			video = element("video");
			attr_dev(video, "class", "w-full h-full object-contain bg-black");
			video.controls = true;
			video.playsInline = true;
			attr_dev(video, "preload", "auto");
			if (!src_url_equal(video.src, video_src_value = /*value*/ ctx[0].data)) attr_dev(video, "src", video_src_value);
			add_location(video, file$1, 51, 2, 1422);
		},
		m: function mount(target, anchor) {
			insert_dev(target, video, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(video, "play", /*play_handler*/ ctx[11], false, false, false),
					listen_dev(video, "pause", /*pause_handler*/ ctx[12], false, false, false),
					listen_dev(video, "ended", /*ended_handler*/ ctx[13], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && !src_url_equal(video.src, video_src_value = /*value*/ ctx[0].data)) {
				attr_dev(video, "src", video_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(video);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(50:1) {#if playable(value.name)}",
		ctx
	});

	return block;
}

// (42:31) 
function create_if_block_2(ctx) {
	let webcam;
	let current;
	webcam = new Webcam({ props: { mode: "video" }, $$inline: true });
	webcam.$on("capture", /*capture_handler*/ ctx[15]);

	const block = {
		c: function create() {
			create_component(webcam.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(webcam, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(webcam.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(webcam.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(webcam, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(42:31) ",
		ctx
	});

	return block;
}

// (30:1) {#if source === "upload"}
function create_if_block_1(ctx) {
	let upload;
	let updating_dragging;
	let current;

	function upload_dragging_binding(value) {
		/*upload_dragging_binding*/ ctx[14](value);
	}

	let upload_props = {
		filetype: "video/mp4,video/x-m4v,video/*",
		$$slots: { default: [create_default_slot$1] },
		$$scope: { ctx }
	};

	if (/*dragging*/ ctx[7] !== void 0) {
		upload_props.dragging = /*dragging*/ ctx[7];
	}

	upload = new Upload({ props: upload_props, $$inline: true });
	binding_callbacks.push(() => bind(upload, 'dragging', upload_dragging_binding));
	upload.$on("load", /*handle_load*/ ctx[9]);

	const block = {
		c: function create() {
			create_component(upload.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(upload, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const upload_changes = {};

			if (dirty & /*$$scope, upload_text, or_text, drop_text*/ 65648) {
				upload_changes.$$scope = { dirty, ctx };
			}

			if (!updating_dragging && dirty & /*dragging*/ 128) {
				updating_dragging = true;
				upload_changes.dragging = /*dragging*/ ctx[7];
				add_flush_callback(() => updating_dragging = false);
			}

			upload.$set(upload_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(upload.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(upload.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(upload, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(30:1) {#if source === \\\"upload\\\"}",
		ctx
	});

	return block;
}

// (31:2) <Upload    bind:dragging    filetype="video/mp4,video/x-m4v,video/*"    on:load={handle_load}   >
function create_default_slot$1(ctx) {
	let div;
	let t0;
	let t1;
	let span;
	let t2;
	let t3;
	let t4;
	let t5;
	let t6;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(/*drop_text*/ ctx[4]);
			t1 = space();
			span = element("span");
			t2 = text("- ");
			t3 = text(/*or_text*/ ctx[5]);
			t4 = text(" -");
			t5 = space();
			t6 = text(/*upload_text*/ ctx[6]);
			attr_dev(span, "class", "text-gray-300");
			add_location(span, file$1, 37, 4, 1076);
			attr_dev(div, "class", "flex flex-col");
			add_location(div, file$1, 35, 3, 1028);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, span);
			append_dev(span, t2);
			append_dev(span, t3);
			append_dev(span, t4);
			append_dev(div, t5);
			append_dev(div, t6);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*drop_text*/ 16) set_data_dev(t0, /*drop_text*/ ctx[4]);
			if (dirty & /*or_text*/ 32) set_data_dev(t3, /*or_text*/ ctx[5]);
			if (dirty & /*upload_text*/ 64) set_data_dev(t6, /*upload_text*/ ctx[6]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot$1.name,
		type: "slot",
		source: "(31:2) <Upload    bind:dragging    filetype=\\\"video/mp4,video/x-m4v,video/*\\\"    on:load={handle_load}   >",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let blocklabel;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[3],
				Icon: Video,
				label: /*label*/ ctx[2] || "Video"
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block$2, create_else_block$2];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0] === null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 8) blocklabel_changes.show_label = /*show_label*/ ctx[3];
			if (dirty & /*label*/ 4) blocklabel_changes.label = /*label*/ ctx[2] || "Video";
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blocklabel, detaching);
			if (detaching) detach_dev(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Video', slots, []);
	let { value = null } = $$props;
	let { source } = $$props;
	let { label = undefined } = $$props;
	let { show_label } = $$props;
	let { drop_text = "Drop a video file" } = $$props;
	let { or_text = "or" } = $$props;
	let { upload_text = "click to upload" } = $$props;
	const dispatch = createEventDispatcher();

	function handle_load({ detail }) {
		dispatch("change", detail);
		$$invalidate(0, value = detail);
	}

	function handle_clear({ detail }) {
		$$invalidate(0, value = null);
		dispatch("change", detail);
		dispatch("clear");
	}

	let dragging = false;

	const writable_props = [
		'value',
		'source',
		'label',
		'show_label',
		'drop_text',
		'or_text',
		'upload_text'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Video> was created with unknown prop '${key}'`);
	});

	function play_handler(event) {
		bubble.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble.call(this, $$self, event);
	}

	function ended_handler(event) {
		bubble.call(this, $$self, event);
	}

	function upload_dragging_binding(value) {
		dragging = value;
		$$invalidate(7, dragging);
	}

	const capture_handler = ({ detail }) => dispatch("change", detail);

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('source' in $$props) $$invalidate(1, source = $$props.source);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(3, show_label = $$props.show_label);
		if ('drop_text' in $$props) $$invalidate(4, drop_text = $$props.drop_text);
		if ('or_text' in $$props) $$invalidate(5, or_text = $$props.or_text);
		if ('upload_text' in $$props) $$invalidate(6, upload_text = $$props.upload_text);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Upload,
		ModifyUpload,
		BlockLabel,
		Webcam,
		Video,
		prettyBytes,
		playable,
		value,
		source,
		label,
		show_label,
		drop_text,
		or_text,
		upload_text,
		dispatch,
		handle_load,
		handle_clear,
		dragging
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('source' in $$props) $$invalidate(1, source = $$props.source);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(3, show_label = $$props.show_label);
		if ('drop_text' in $$props) $$invalidate(4, drop_text = $$props.drop_text);
		if ('or_text' in $$props) $$invalidate(5, or_text = $$props.or_text);
		if ('upload_text' in $$props) $$invalidate(6, upload_text = $$props.upload_text);
		if ('dragging' in $$props) $$invalidate(7, dragging = $$props.dragging);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*dragging*/ 128) {
			dispatch("drag", dragging);
		}
	};

	return [
		value,
		source,
		label,
		show_label,
		drop_text,
		or_text,
		upload_text,
		dragging,
		dispatch,
		handle_load,
		handle_clear,
		play_handler,
		pause_handler,
		ended_handler,
		upload_dragging_binding,
		capture_handler
	];
}

class Video_1$2 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			value: 0,
			source: 1,
			label: 2,
			show_label: 3,
			drop_text: 4,
			or_text: 5,
			upload_text: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Video_1",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*source*/ ctx[1] === undefined && !('source' in props)) {
			console.warn("<Video> was created without expected prop 'source'");
		}

		if (/*show_label*/ ctx[3] === undefined && !('show_label' in props)) {
			console.warn("<Video> was created without expected prop 'show_label'");
		}
	}

	get value() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get source() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set source(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get drop_text() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set drop_text(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get or_text() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set or_text(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get upload_text() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set upload_text(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* Users/aliabid/projects/gradio/ui/packages/video/src/StaticVideo.svelte generated by Svelte v3.47.0 */
const file = "Users/aliabid/projects/gradio/ui/packages/video/src/StaticVideo.svelte";

// (16:0) {:else}
function create_else_block$1(ctx) {
	let video;
	let video_src_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			video = element("video");
			attr_dev(video, "class", "w-full h-full object-contain bg-black");
			video.controls = true;
			video.playsInline = true;
			attr_dev(video, "preload", "auto");
			if (!src_url_equal(video.src, video_src_value = /*value*/ ctx[0].data)) attr_dev(video, "src", video_src_value);
			add_location(video, file, 17, 1, 601);
		},
		m: function mount(target, anchor) {
			insert_dev(target, video, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(video, "play", /*play_handler*/ ctx[3], false, false, false),
					listen_dev(video, "pause", /*pause_handler*/ ctx[4], false, false, false),
					listen_dev(video, "ended", /*ended_handler*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && !src_url_equal(video.src, video_src_value = /*value*/ ctx[0].data)) {
				attr_dev(video, "src", video_src_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(video);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block$1.name,
		type: "else",
		source: "(16:0) {:else}",
		ctx
	});

	return block;
}

// (12:0) {#if value === null}
function create_if_block$1(ctx) {
	let div1;
	let div0;
	let video;
	let current;
	video = new Video({ $$inline: true });

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(video.$$.fragment);
			attr_dev(div0, "class", "h-5 dark:text-white opacity-50");
			add_location(div0, file, 13, 2, 477);
			attr_dev(div1, "class", "h-full min-h-[15rem] flex justify-center items-center");
			add_location(div1, file, 12, 1, 407);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(video, div0, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(video.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(video.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(video);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(12:0) {#if value === null}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let blocklabel;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;

	blocklabel = new BlockLabel({
			props: {
				show_label: /*show_label*/ ctx[2],
				Icon: Video,
				label: /*label*/ ctx[1] || "Video"
			},
			$$inline: true
		});

	const if_block_creators = [create_if_block$1, create_else_block$1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[0] === null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(blocklabel.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const blocklabel_changes = {};
			if (dirty & /*show_label*/ 4) blocklabel_changes.show_label = /*show_label*/ ctx[2];
			if (dirty & /*label*/ 2) blocklabel_changes.label = /*label*/ ctx[1] || "Video";
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(blocklabel, detaching);
			if (detaching) detach_dev(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('StaticVideo', slots, []);
	let { value = null } = $$props;
	let { label = undefined } = $$props;
	let { show_label } = $$props;
	const dispatch = createEventDispatcher();
	const writable_props = ['value', 'label', 'show_label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<StaticVideo> was created with unknown prop '${key}'`);
	});

	function play_handler(event) {
		bubble.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble.call(this, $$self, event);
	}

	function ended_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		BlockLabel,
		Video,
		value,
		label,
		show_label,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 1) {
			value && dispatch("change", value);
		}
	};

	return [value, label, show_label, play_handler, pause_handler, ended_handler];
}

class StaticVideo extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { value: 0, label: 1, show_label: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "StaticVideo",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*show_label*/ ctx[2] === undefined && !('show_label' in props)) {
			console.warn("<StaticVideo> was created without expected prop 'show_label'");
		}
	}

	get value() {
		throw new Error("<StaticVideo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<StaticVideo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<StaticVideo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<StaticVideo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<StaticVideo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<StaticVideo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Video/Video.svelte generated by Svelte v3.47.0 */

// (31:1) {:else}
function create_else_block(ctx) {
	let video;
	let current;

	video = new Video_1$2({
			props: {
				value: /*_value*/ ctx[7],
				label: /*label*/ ctx[2],
				show_label: /*show_label*/ ctx[4],
				source: /*source*/ ctx[3],
				drop_text: /*$_*/ ctx[9]("interface.drop_video"),
				or_text: /*$_*/ ctx[9]("or"),
				upload_text: /*$_*/ ctx[9]("interface.click_to_upload")
			},
			$$inline: true
		});

	video.$on("change", /*change_handler_1*/ ctx[11]);
	video.$on("drag", /*drag_handler*/ ctx[12]);
	video.$on("change", /*change_handler*/ ctx[13]);
	video.$on("clear", /*clear_handler*/ ctx[14]);
	video.$on("play", /*play_handler*/ ctx[15]);
	video.$on("pause", /*pause_handler*/ ctx[16]);

	const block = {
		c: function create() {
			create_component(video.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(video, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const video_changes = {};
			if (dirty & /*_value*/ 128) video_changes.value = /*_value*/ ctx[7];
			if (dirty & /*label*/ 4) video_changes.label = /*label*/ ctx[2];
			if (dirty & /*show_label*/ 16) video_changes.show_label = /*show_label*/ ctx[4];
			if (dirty & /*source*/ 8) video_changes.source = /*source*/ ctx[3];
			if (dirty & /*$_*/ 512) video_changes.drop_text = /*$_*/ ctx[9]("interface.drop_video");
			if (dirty & /*$_*/ 512) video_changes.or_text = /*$_*/ ctx[9]("or");
			if (dirty & /*$_*/ 512) video_changes.upload_text = /*$_*/ ctx[9]("interface.click_to_upload");
			video.$set(video_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(video.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(video.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(video, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(31:1) {:else}",
		ctx
	});

	return block;
}

// (29:1) {#if mode === "static"}
function create_if_block(ctx) {
	let staticvideo;
	let current;

	staticvideo = new StaticVideo({
			props: {
				value: /*_value*/ ctx[7],
				label: /*label*/ ctx[2],
				show_label: /*show_label*/ ctx[4]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(staticvideo.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(staticvideo, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const staticvideo_changes = {};
			if (dirty & /*_value*/ 128) staticvideo_changes.value = /*_value*/ ctx[7];
			if (dirty & /*label*/ 4) staticvideo_changes.label = /*label*/ ctx[2];
			if (dirty & /*show_label*/ 16) staticvideo_changes.show_label = /*show_label*/ ctx[4];
			staticvideo.$set(staticvideo_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(staticvideo.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(staticvideo.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(staticvideo, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(29:1) {#if mode === \\\"static\\\"}",
		ctx
	});

	return block;
}

// (19:0) <Block  variant={mode === "dynamic" && value === null && source === "upload"   ? "dashed"   : "solid"}  color={dragging ? "green" : "grey"}  padding={false}  {elem_id} >
function create_default_slot(ctx) {
	let statustracker;
	let t;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const statustracker_spread_levels = [/*loading_status*/ ctx[5]];
	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new StatusTracker({
			props: statustracker_props,
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*mode*/ ctx[6] === "static") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t = space();
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*loading_status*/ 32)
			? get_spread_update(statustracker_spread_levels, [get_spread_object(/*loading_status*/ ctx[5])])
			: {};

			statustracker.$set(statustracker_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(statustracker, detaching);
			if (detaching) detach_dev(t);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(19:0) <Block  variant={mode === \\\"dynamic\\\" && value === null && source === \\\"upload\\\"   ? \\\"dashed\\\"   : \\\"solid\\\"}  color={dragging ? \\\"green\\\" : \\\"grey\\\"}  padding={false}  {elem_id} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				variant: /*mode*/ ctx[6] === "dynamic" && /*value*/ ctx[0] === null && /*source*/ ctx[3] === "upload"
				? "dashed"
				: "solid",
				color: /*dragging*/ ctx[8] ? "green" : "grey",
				padding: false,
				elem_id: /*elem_id*/ ctx[1],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};

			if (dirty & /*mode, value, source*/ 73) block_changes.variant = /*mode*/ ctx[6] === "dynamic" && /*value*/ ctx[0] === null && /*source*/ ctx[3] === "upload"
			? "dashed"
			: "solid";

			if (dirty & /*dragging*/ 256) block_changes.color = /*dragging*/ ctx[8] ? "green" : "grey";
			if (dirty & /*elem_id*/ 2) block_changes.elem_id = /*elem_id*/ ctx[1];

			if (dirty & /*$$scope, _value, label, show_label, mode, source, $_, value, dragging, loading_status*/ 132093) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let $_;
	validate_store(X, '_');
	component_subscribe($$self, X, $$value => $$invalidate(9, $_ = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Video', slots, []);
	let { elem_id = "" } = $$props;
	let { value = null } = $$props;
	let { label } = $$props;
	let { source } = $$props;
	let { root } = $$props;
	let { show_label } = $$props;
	let { loading_status } = $$props;
	let { mode } = $$props;
	let _value;
	let dragging = false;

	const writable_props = [
		'elem_id',
		'value',
		'label',
		'source',
		'root',
		'show_label',
		'loading_status',
		'mode'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Video> was created with unknown prop '${key}'`);
	});

	const change_handler_1 = ({ detail }) => $$invalidate(0, value = detail);
	const drag_handler = ({ detail }) => $$invalidate(8, dragging = detail);

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	function clear_handler(event) {
		bubble.call(this, $$self, event);
	}

	function play_handler(event) {
		bubble.call(this, $$self, event);
	}

	function pause_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('source' in $$props) $$invalidate(3, source = $$props.source);
		if ('root' in $$props) $$invalidate(10, root = $$props.root);
		if ('show_label' in $$props) $$invalidate(4, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
		if ('mode' in $$props) $$invalidate(6, mode = $$props.mode);
	};

	$$self.$capture_state = () => ({
		normalise_file,
		Block,
		Video: Video_1$2,
		StaticVideo,
		StatusTracker,
		_: X,
		elem_id,
		value,
		label,
		source,
		root,
		show_label,
		loading_status,
		mode,
		_value,
		dragging,
		$_
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('source' in $$props) $$invalidate(3, source = $$props.source);
		if ('root' in $$props) $$invalidate(10, root = $$props.root);
		if ('show_label' in $$props) $$invalidate(4, show_label = $$props.show_label);
		if ('loading_status' in $$props) $$invalidate(5, loading_status = $$props.loading_status);
		if ('mode' in $$props) $$invalidate(6, mode = $$props.mode);
		if ('_value' in $$props) $$invalidate(7, _value = $$props._value);
		if ('dragging' in $$props) $$invalidate(8, dragging = $$props.dragging);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value, root*/ 1025) {
			$$invalidate(7, _value = normalise_file(value, root));
		}
	};

	return [
		value,
		elem_id,
		label,
		source,
		show_label,
		loading_status,
		mode,
		_value,
		dragging,
		$_,
		root,
		change_handler_1,
		drag_handler,
		change_handler,
		clear_handler,
		play_handler,
		pause_handler
	];
}

class Video_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 1,
			value: 0,
			label: 2,
			source: 3,
			root: 10,
			show_label: 4,
			loading_status: 5,
			mode: 6
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Video_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*label*/ ctx[2] === undefined && !('label' in props)) {
			console.warn("<Video> was created without expected prop 'label'");
		}

		if (/*source*/ ctx[3] === undefined && !('source' in props)) {
			console.warn("<Video> was created without expected prop 'source'");
		}

		if (/*root*/ ctx[10] === undefined && !('root' in props)) {
			console.warn("<Video> was created without expected prop 'root'");
		}

		if (/*show_label*/ ctx[4] === undefined && !('show_label' in props)) {
			console.warn("<Video> was created without expected prop 'show_label'");
		}

		if (/*loading_status*/ ctx[5] === undefined && !('loading_status' in props)) {
			console.warn("<Video> was created without expected prop 'loading_status'");
		}

		if (/*mode*/ ctx[6] === undefined && !('mode' in props)) {
			console.warn("<Video> was created without expected prop 'mode'");
		}
	}

	get elem_id() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get source() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set source(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get root() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set root(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get mode() {
		throw new Error("<Video>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set mode(value) {
		throw new Error("<Video>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Video_1$1 = Video_1;

const modes = ["static", "dynamic"];

export { Video_1$1 as Component, modes };
