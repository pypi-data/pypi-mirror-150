import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, h as element, B as create_component, w as space, k as text, b as attr_dev, c as add_location, t as toggle_class, e as insert_dev, f as append_dev, C as mount_component, m as set_data_dev, D as transition_in, E as transition_out, g as detach_dev, F as destroy_component } from './index.46c26618.js';

/* Users/aliabid/projects/gradio/ui/packages/atoms/src/BlockLabel.svelte generated by Svelte v3.47.0 */

const file = "Users/aliabid/projects/gradio/ui/packages/atoms/src/BlockLabel.svelte";

function create_fragment(ctx) {
	let div;
	let span;
	let icon;
	let t0;
	let t1;
	let current;
	icon = new /*Icon*/ ctx[1]({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			create_component(icon.$$.fragment);
			t0 = space();
			t1 = text(/*label*/ ctx[0]);
			attr_dev(span, "class", "mr-2 h-[12px] w-[12px] opacity-80");
			add_location(span, file, 25, 1, 1013);
			attr_dev(div, "class", "absolute left-0 top-0 py-1 px-2 rounded-br-lg shadow-sm text-xs text-gray-500 flex items-center pointer-events-none bg-white z-20 border-b border-r border-gray-100 dark:bg-gray-900");
			toggle_class(div, "h-0", !/*show_label*/ ctx[2]);
			toggle_class(div, "sr-only", !/*show_label*/ ctx[2]);
			add_location(div, file, 19, 0, 715);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			mount_component(icon, span, null);
			append_dev(div, t0);
			append_dev(div, t1);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*label*/ 1) set_data_dev(t1, /*label*/ ctx[0]);

			if (dirty & /*show_label*/ 4) {
				toggle_class(div, "h-0", !/*show_label*/ ctx[2]);
			}

			if (dirty & /*show_label*/ 4) {
				toggle_class(div, "sr-only", !/*show_label*/ ctx[2]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(icon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(icon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(icon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BlockLabel', slots, []);
	let { label = null } = $$props;
	let { Icon } = $$props;
	let { show_label = true } = $$props;
	const writable_props = ['label', 'Icon', 'show_label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BlockLabel> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('Icon' in $$props) $$invalidate(1, Icon = $$props.Icon);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
	};

	$$self.$capture_state = () => ({ label, Icon, show_label });

	$$self.$inject_state = $$props => {
		if ('label' in $$props) $$invalidate(0, label = $$props.label);
		if ('Icon' in $$props) $$invalidate(1, Icon = $$props.Icon);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [label, Icon, show_label];
}

class BlockLabel extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { label: 0, Icon: 1, show_label: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BlockLabel",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*Icon*/ ctx[1] === undefined && !('Icon' in props)) {
			console.warn("<BlockLabel> was created without expected prop 'Icon'");
		}
	}

	get label() {
		throw new Error("<BlockLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<BlockLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get Icon() {
		throw new Error("<BlockLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set Icon(value) {
		throw new Error("<BlockLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<BlockLabel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<BlockLabel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { BlockLabel as B };
