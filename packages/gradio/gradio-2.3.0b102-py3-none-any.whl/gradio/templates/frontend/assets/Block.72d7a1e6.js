import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, W as validate_dynamic_element, v as validate_slots, Y as getContext, Z as create_slot, h as element, b as attr_dev, t as toggle_class, c as add_location, e as insert_dev, _ as update_slot_base, $ as get_all_dirty_from_scope, a0 as get_slot_changes, D as transition_in, E as transition_out, g as detach_dev, q as empty } from './index.ac9abe4c.js';
import { c as create_classes } from './styles.d87a390f.js';

/* Users/aliabid/projects/gradio/ui/packages/atoms/src/Block.svelte generated by Svelte v3.47.0 */
const file = "Users/aliabid/projects/gradio/ui/packages/atoms/src/Block.svelte";

// (42:0) <svelte:element  this={tag}  data-testid={test_id}  id={elem_id}  class={"w-full overflow-hidden " +   styles[variant] +   " " +   styles[color] +   " " +   form_class +   create_classes(style, "container")}  class:gr-panel={padding}  class:form={form_position}  class:gr-box-unrounded={form_position}  class:gr-box={!form_position}  class:!p-0={disable}  class:!m-0={disable}  class:!border-0={disable}  class:!shadow-none={disable}  class:overflow-visible={disable} >
function create_dynamic_element(ctx) {
	let svelte_element;
	let svelte_element_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[14].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);

	const block = {
		c: function create() {
			svelte_element = element(/*tag*/ ctx[10]);
			if (default_slot) default_slot.c();
			attr_dev(svelte_element, "data-testid", /*test_id*/ ctx[6]);
			attr_dev(svelte_element, "id", /*elem_id*/ ctx[1]);
			attr_dev(svelte_element, "class", svelte_element_class_value = "w-full overflow-hidden " + /*styles*/ ctx[9][/*variant*/ ctx[2]] + " " + /*styles*/ ctx[9][/*color*/ ctx[3]] + " " + /*form_class*/ ctx[8] + create_classes(/*style*/ ctx[0], "container"));
			toggle_class(svelte_element, "gr-panel", /*padding*/ ctx[4]);
			toggle_class(svelte_element, "form", /*form_position*/ ctx[5]);
			toggle_class(svelte_element, "gr-box-unrounded", /*form_position*/ ctx[5]);
			toggle_class(svelte_element, "gr-box", !/*form_position*/ ctx[5]);
			toggle_class(svelte_element, "!p-0", /*disable*/ ctx[7]);
			toggle_class(svelte_element, "!m-0", /*disable*/ ctx[7]);
			toggle_class(svelte_element, "!border-0", /*disable*/ ctx[7]);
			toggle_class(svelte_element, "!shadow-none", /*disable*/ ctx[7]);
			toggle_class(svelte_element, "overflow-visible", /*disable*/ ctx[7]);
			add_location(svelte_element, file, 41, 0, 1178);
		},
		m: function mount(target, anchor) {
			insert_dev(target, svelte_element, anchor);

			if (default_slot) {
				default_slot.m(svelte_element, null);
			}

			current = true;
		},
		p: function update(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[13],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*test_id*/ 64) {
				attr_dev(svelte_element, "data-testid", /*test_id*/ ctx[6]);
			}

			if (!current || dirty & /*elem_id*/ 2) {
				attr_dev(svelte_element, "id", /*elem_id*/ ctx[1]);
			}

			if (!current || dirty & /*variant, color, form_class, style*/ 269 && svelte_element_class_value !== (svelte_element_class_value = "w-full overflow-hidden " + /*styles*/ ctx[9][/*variant*/ ctx[2]] + " " + /*styles*/ ctx[9][/*color*/ ctx[3]] + " " + /*form_class*/ ctx[8] + create_classes(/*style*/ ctx[0], "container"))) {
				attr_dev(svelte_element, "class", svelte_element_class_value);
			}

			if (dirty & /*variant, color, form_class, style, padding*/ 285) {
				toggle_class(svelte_element, "gr-panel", /*padding*/ ctx[4]);
			}

			if (dirty & /*variant, color, form_class, style, form_position*/ 301) {
				toggle_class(svelte_element, "form", /*form_position*/ ctx[5]);
			}

			if (dirty & /*variant, color, form_class, style, form_position*/ 301) {
				toggle_class(svelte_element, "gr-box-unrounded", /*form_position*/ ctx[5]);
			}

			if (dirty & /*variant, color, form_class, style, form_position*/ 301) {
				toggle_class(svelte_element, "gr-box", !/*form_position*/ ctx[5]);
			}

			if (dirty & /*variant, color, form_class, style, disable*/ 397) {
				toggle_class(svelte_element, "!p-0", /*disable*/ ctx[7]);
			}

			if (dirty & /*variant, color, form_class, style, disable*/ 397) {
				toggle_class(svelte_element, "!m-0", /*disable*/ ctx[7]);
			}

			if (dirty & /*variant, color, form_class, style, disable*/ 397) {
				toggle_class(svelte_element, "!border-0", /*disable*/ ctx[7]);
			}

			if (dirty & /*variant, color, form_class, style, disable*/ 397) {
				toggle_class(svelte_element, "!shadow-none", /*disable*/ ctx[7]);
			}

			if (dirty & /*variant, color, form_class, style, disable*/ 397) {
				toggle_class(svelte_element, "overflow-visible", /*disable*/ ctx[7]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svelte_element);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_dynamic_element.name,
		type: "child_dynamic_element",
		source: "(42:0) <svelte:element  this={tag}  data-testid={test_id}  id={elem_id}  class={\\\"w-full overflow-hidden \\\" +   styles[variant] +   \\\" \\\" +   styles[color] +   \\\" \\\" +   form_class +   create_classes(style, \\\"container\\\")}  class:gr-panel={padding}  class:form={form_position}  class:gr-box-unrounded={form_position}  class:gr-box={!form_position}  class:!p-0={disable}  class:!m-0={disable}  class:!border-0={disable}  class:!shadow-none={disable}  class:overflow-visible={disable} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let previous_tag = /*tag*/ ctx[10];
	let svelte_element_anchor;
	let current;
	validate_dynamic_element(/*tag*/ ctx[10]);
	let svelte_element = /*tag*/ ctx[10] && create_dynamic_element(ctx);

	const block = {
		c: function create() {
			if (svelte_element) svelte_element.c();
			svelte_element_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (svelte_element) svelte_element.m(target, anchor);
			insert_dev(target, svelte_element_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*tag*/ ctx[10]) {
				if (!previous_tag) {
					svelte_element = create_dynamic_element(ctx);
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else if (safe_not_equal(previous_tag, /*tag*/ ctx[10])) {
					svelte_element.d(1);
					validate_dynamic_element(/*tag*/ ctx[10]);
					svelte_element = create_dynamic_element(ctx);
					svelte_element.c();
					svelte_element.m(svelte_element_anchor.parentNode, svelte_element_anchor);
				} else {
					svelte_element.p(ctx, dirty);
				}
			} else if (previous_tag) {
				svelte_element.d(1);
				svelte_element = null;
			}

			previous_tag = /*tag*/ ctx[10];
		},
		i: function intro(local) {
			if (current) return;
			transition_in(svelte_element);
			current = true;
		},
		o: function outro(local) {
			transition_out(svelte_element);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(svelte_element_anchor);
			if (svelte_element) svelte_element.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let _parent;
	let form_class;
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Block', slots, ['default']);
	let { style = {} } = $$props;
	let { elem_id = "" } = $$props;
	let { variant = "solid" } = $$props;
	let { color = "grey" } = $$props;
	let { padding = true } = $$props;
	let { form_position = undefined } = $$props;
	let { type = "normal" } = $$props;
	let { test_id = undefined } = $$props;
	let { disable = false } = $$props;

	const styles = {
		dashed: "border-dashed border border-gray-300",
		solid: "border-solid border",
		grey: "border-gray-200",
		green: "border-green-400",
		none: "!border-0"
	};

	const form_styles = {
		column: {
			first: "rounded-t-lg",
			last: "rounded-b-lg",
			mid: "",
			single: "rounded-lg"
		},
		row: {
			first: "rounded-t-lg md:rounded-t-none md:rounded-l-lg ",
			last: "rounded-b-lg md:rounded-b-none md:rounded-r-lg",
			mid: "",
			single: "rounded-lg"
		}
	};

	let tag = type === "fieldset" ? "fieldset" : "div";
	const parent = getContext("BLOCK_KEY");

	const writable_props = [
		'style',
		'elem_id',
		'variant',
		'color',
		'padding',
		'form_position',
		'type',
		'test_id',
		'disable'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Block> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('style' in $$props) $$invalidate(0, style = $$props.style);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('variant' in $$props) $$invalidate(2, variant = $$props.variant);
		if ('color' in $$props) $$invalidate(3, color = $$props.color);
		if ('padding' in $$props) $$invalidate(4, padding = $$props.padding);
		if ('form_position' in $$props) $$invalidate(5, form_position = $$props.form_position);
		if ('type' in $$props) $$invalidate(11, type = $$props.type);
		if ('test_id' in $$props) $$invalidate(6, test_id = $$props.test_id);
		if ('disable' in $$props) $$invalidate(7, disable = $$props.disable);
		if ('$$scope' in $$props) $$invalidate(13, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({
		create_classes,
		getContext,
		style,
		elem_id,
		variant,
		color,
		padding,
		form_position,
		type,
		test_id,
		disable,
		styles,
		form_styles,
		tag,
		parent,
		_parent,
		form_class
	});

	$$self.$inject_state = $$props => {
		if ('style' in $$props) $$invalidate(0, style = $$props.style);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('variant' in $$props) $$invalidate(2, variant = $$props.variant);
		if ('color' in $$props) $$invalidate(3, color = $$props.color);
		if ('padding' in $$props) $$invalidate(4, padding = $$props.padding);
		if ('form_position' in $$props) $$invalidate(5, form_position = $$props.form_position);
		if ('type' in $$props) $$invalidate(11, type = $$props.type);
		if ('test_id' in $$props) $$invalidate(6, test_id = $$props.test_id);
		if ('disable' in $$props) $$invalidate(7, disable = $$props.disable);
		if ('tag' in $$props) $$invalidate(10, tag = $$props.tag);
		if ('_parent' in $$props) $$invalidate(12, _parent = $$props._parent);
		if ('form_class' in $$props) $$invalidate(8, form_class = $$props.form_class);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*form_position, _parent*/ 4128) {
			$$invalidate(8, form_class = form_position
			? form_styles?.[_parent || "column"][form_position]
			: "");
		}
	};

	$$invalidate(12, _parent = parent === "column" || parent == "row"
	? parent
	: "column");

	return [
		style,
		elem_id,
		variant,
		color,
		padding,
		form_position,
		test_id,
		disable,
		form_class,
		styles,
		tag,
		type,
		_parent,
		$$scope,
		slots
	];
}

class Block extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			style: 0,
			elem_id: 1,
			variant: 2,
			color: 3,
			padding: 4,
			form_position: 5,
			type: 11,
			test_id: 6,
			disable: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Block",
			options,
			id: create_fragment.name
		});
	}

	get style() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set style(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get elem_id() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get variant() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set variant(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get color() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set color(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get padding() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set padding(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get form_position() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set form_position(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get type() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set type(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get test_id() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set test_id(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get disable() {
		throw new Error("<Block>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set disable(value) {
		throw new Error("<Block>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Block as B };
