import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, Z as create_slot, v as validate_slots, h as element, b as attr_dev, t as toggle_class, c as add_location, e as insert_dev, _ as update_slot_base, $ as get_all_dirty_from_scope, a0 as get_slot_changes, D as transition_in, E as transition_out, g as detach_dev } from './index.50e14928.js';

/* mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/atoms/src/BlockTitle.svelte generated by Svelte v3.47.0 */

const file = "mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/atoms/src/BlockTitle.svelte";

function create_fragment(ctx) {
	let span;
	let current;
	const default_slot_template = /*#slots*/ ctx[2].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[1], null);

	const block = {
		c: function create() {
			span = element("span");
			if (default_slot) default_slot.c();
			attr_dev(span, "class", "text-gray-600 text-[0.855rem] mb-2 block dark:text-gray-200 relative z-40");
			toggle_class(span, "sr-only", !/*show_label*/ ctx[0]);
			toggle_class(span, "h-0", !/*show_label*/ ctx[0]);
			toggle_class(span, "!m-0", !/*show_label*/ ctx[0]);
			add_location(span, file, 3, 0, 59);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			if (default_slot) {
				default_slot.m(span, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[1],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[1])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[1], dirty, null),
						null
					);
				}
			}

			if (dirty & /*show_label*/ 1) {
				toggle_class(span, "sr-only", !/*show_label*/ ctx[0]);
			}

			if (dirty & /*show_label*/ 1) {
				toggle_class(span, "h-0", !/*show_label*/ ctx[0]);
			}

			if (dirty & /*show_label*/ 1) {
				toggle_class(span, "!m-0", !/*show_label*/ ctx[0]);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			if (default_slot) default_slot.d(detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('BlockTitle', slots, ['default']);
	let { show_label = true } = $$props;
	const writable_props = ['show_label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BlockTitle> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('show_label' in $$props) $$invalidate(0, show_label = $$props.show_label);
		if ('$$scope' in $$props) $$invalidate(1, $$scope = $$props.$$scope);
	};

	$$self.$capture_state = () => ({ show_label });

	$$self.$inject_state = $$props => {
		if ('show_label' in $$props) $$invalidate(0, show_label = $$props.show_label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [show_label, $$scope, slots];
}

class BlockTitle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { show_label: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "BlockTitle",
			options,
			id: create_fragment.name
		});
	}

	get show_label() {
		throw new Error("<BlockTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<BlockTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { BlockTitle as B };
