import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, a as svg_element, b as attr_dev, c as add_location, e as insert_dev, f as append_dev, n as noop, g as detach_dev, o as validate_each_argument, q as empty, u as destroy_each, h as element, w as space, k as text, a2 as set_style, m as set_data_dev, t as toggle_class, y as createEventDispatcher, R as StatusTracker, T as assign, B as create_component, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, U as get_spread_update, V as get_spread_object, G as group_outros, H as check_outros } from './index.50e14928.js';
import { B as Block } from './Block.a61554cb.js';
import { B as BlockLabel } from './BlockLabel.ef852488.js';
import './styles.d87a390f.js';

/* mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/icons/src/LineChart.svelte generated by Svelte v3.47.0 */

const file$2 = "mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/icons/src/LineChart.svelte";

function create_fragment$2(ctx) {
	let svg;
	let path;

	const block = {
		c: function create() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr_dev(path, "fill", "currentColor");
			attr_dev(path, "d", "M4 2H2v26a2 2 0 0 0 2 2h26v-2H4v-3h22v-8H4v-4h14V5H4Zm20 17v4H4v-4ZM16 7v4H4V7Z");
			add_location(path, file$2, 10, 2, 239);
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
			attr_dev(svg, "aria-hidden", "true");
			attr_dev(svg, "role", "img");
			attr_dev(svg, "class", "iconify iconify--carbon");
			attr_dev(svg, "width", "100%");
			attr_dev(svg, "height", "100%");
			attr_dev(svg, "preserveAspectRatio", "xMidYMid meet");
			attr_dev(svg, "viewBox", "0 0 32 32");
			add_location(svg, file$2, 0, 0, 0);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, svg, anchor);
			append_dev(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(svg);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('LineChart', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LineChart> was created with unknown prop '${key}'`);
	});

	return [];
}

class LineChart extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "LineChart",
			options,
			id: create_fragment$2.name
		});
	}
}

/* mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/label/src/Label.svelte generated by Svelte v3.47.0 */

const file$1 = "mnt/c/Users/islam/dev/gradio-repos/gradio/ui/packages/label/src/Label.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

// (14:1) {#if value.confidences}
function create_if_block$1(ctx) {
	let each_1_anchor;
	let each_value = /*value*/ ctx[0].confidences;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*Math, value*/ 1) {
				each_value = /*value*/ ctx[0].confidences;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(14:1) {#if value.confidences}",
		ctx
	});

	return block;
}

// (33:6) {#if value.confidences}
function create_if_block_1(ctx) {
	let div0;
	let t0;
	let div1;
	let t1_value = Math.round(/*confidence_set*/ ctx[3].confidence * 100) + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = text(t1_value);
			t2 = text("%");
			attr_dev(div0, "class", "flex-1 border border-dashed border-gray-100 px-4");
			add_location(div0, file$1, 33, 7, 995);
			attr_dev(div1, "class", "text-right ml-auto");
			add_location(div1, file$1, 34, 7, 1067);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, t1);
			append_dev(div1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && t1_value !== (t1_value = Math.round(/*confidence_set*/ ctx[3].confidence * 100) + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(33:6) {#if value.confidences}",
		ctx
	});

	return block;
}

// (15:2) {#each value.confidences as confidence_set}
function create_each_block(ctx) {
	let div4;
	let div3;
	let div0;
	let t0;
	let div2;
	let div1;
	let t1_value = /*confidence_set*/ ctx[3].label + "";
	let t1;
	let t2;
	let t3;
	let if_block = /*value*/ ctx[0].confidences && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			t3 = space();
			attr_dev(div0, "class", "h-1 mb-1 rounded bg-gradient-to-r group-hover:from-orange-500 from-orange-400 to-orange-200 dark:from-orange-400 dark:to-orange-600");
			set_style(div0, "width", /*confidence_set*/ ctx[3].confidence * 100 + "%");
			add_location(div0, file$1, 19, 5, 564);
			attr_dev(div1, "class", "leading-snug");
			add_location(div1, file$1, 31, 6, 903);
			attr_dev(div2, "class", "flex items-baseline space-x-2 group-hover:text-orange-500");
			add_location(div2, file$1, 28, 5, 813);
			attr_dev(div3, "class", "flex-1");
			add_location(div3, file$1, 18, 4, 538);
			attr_dev(div4, "class", "flex items-start justify-between font-mono text-sm leading-none group mb-2 last:mb-0");
			add_location(div4, file$1, 15, 3, 427);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div3);
			append_dev(div3, div0);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div2, t2);
			if (if_block) if_block.m(div2, null);
			append_dev(div4, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1) {
				set_style(div0, "width", /*confidence_set*/ ctx[3].confidence * 100 + "%");
			}

			if (dirty & /*value*/ 1 && t1_value !== (t1_value = /*confidence_set*/ ctx[3].label + "")) set_data_dev(t1, t1_value);

			if (/*value*/ ctx[0].confidences) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div2, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(15:2) {#each value.confidences as confidence_set}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div1;
	let div0;
	let t0_value = /*value*/ ctx[0].label + "";
	let t0;
	let t1;
	let if_block = /*value*/ ctx[0].confidences && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			attr_dev(div0, "class", "output-class font-bold text-2xl py-6 px-4 flex-grow flex items-center justify-center");
			toggle_class(div0, "sr-only", !/*show_label*/ ctx[2]);
			toggle_class(div0, "no-confidence", !("confidences" in /*value*/ ctx[0]));
			add_location(div0, file$1, 6, 1, 146);
			attr_dev(div1, "class", "output-label");
			attr_dev(div1, "space-y-4", "");
			attr_dev(div1, "theme", /*theme*/ ctx[1]);
			add_location(div1, file$1, 5, 0, 100);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, t0);
			append_dev(div1, t1);
			if (if_block) if_block.m(div1, null);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*value*/ 1 && t0_value !== (t0_value = /*value*/ ctx[0].label + "")) set_data_dev(t0, t0_value);

			if (dirty & /*show_label*/ 4) {
				toggle_class(div0, "sr-only", !/*show_label*/ ctx[2]);
			}

			if (dirty & /*value*/ 1) {
				toggle_class(div0, "no-confidence", !("confidences" in /*value*/ ctx[0]));
			}

			if (/*value*/ ctx[0].confidences) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					if_block.m(div1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*theme*/ 2) {
				attr_dev(div1, "theme", /*theme*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Label', slots, []);
	let { value } = $$props;
	let { theme = "default" } = $$props;
	let { show_label } = $$props;
	const writable_props = ['value', 'theme', 'show_label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Label> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('theme' in $$props) $$invalidate(1, theme = $$props.theme);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
	};

	$$self.$capture_state = () => ({ value, theme, show_label });

	$$self.$inject_state = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('theme' in $$props) $$invalidate(1, theme = $$props.theme);
		if ('show_label' in $$props) $$invalidate(2, show_label = $$props.show_label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [value, theme, show_label];
}

class Label extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { value: 0, theme: 1, show_label: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Label",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
			console.warn("<Label> was created without expected prop 'value'");
		}

		if (/*show_label*/ ctx[2] === undefined && !('show_label' in props)) {
			console.warn("<Label> was created without expected prop 'show_label'");
		}
	}

	get value() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get theme() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set theme(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Label/Label.svelte generated by Svelte v3.47.0 */
const file = "src/components/Label/Label.svelte";

// (21:1) {:else}
function create_else_block(ctx) {
	let div1;
	let div0;
	let labelicon;
	let current;
	labelicon = new LineChart({ $$inline: true });

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			create_component(labelicon.$$.fragment);
			attr_dev(div0, "class", "h-5 dark:text-white opacity-50");
			add_location(div0, file, 22, 3, 741);
			attr_dev(div1, "class", "h-full min-h-[6rem] flex justify-center items-center");
			add_location(div1, file, 21, 2, 671);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			mount_component(labelicon, div0, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(labelicon.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(labelicon.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(labelicon);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(21:1) {:else}",
		ctx
	});

	return block;
}

// (19:1) {#if value !== undefined && value !== null}
function create_if_block(ctx) {
	let label_1;
	let current;

	label_1 = new Label({
			props: {
				value: /*value*/ ctx[1],
				show_label: /*show_label*/ ctx[4]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(label_1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(label_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const label_1_changes = {};
			if (dirty & /*value*/ 2) label_1_changes.value = /*value*/ ctx[1];
			if (dirty & /*show_label*/ 16) label_1_changes.show_label = /*show_label*/ ctx[4];
			label_1.$set(label_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(label_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(label_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(label_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(19:1) {#if value !== undefined && value !== null}",
		ctx
	});

	return block;
}

// (15:0) <Block {elem_id}>
function create_default_slot(ctx) {
	let statustracker;
	let t0;
	let blocklabel;
	let t1;
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const statustracker_spread_levels = [/*loading_status*/ ctx[3]];
	let statustracker_props = {};

	for (let i = 0; i < statustracker_spread_levels.length; i += 1) {
		statustracker_props = assign(statustracker_props, statustracker_spread_levels[i]);
	}

	statustracker = new StatusTracker({
			props: statustracker_props,
			$$inline: true
		});

	blocklabel = new BlockLabel({
			props: { Icon: LineChart, label: /*label*/ ctx[2] },
			$$inline: true
		});

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[1] !== undefined && /*value*/ ctx[1] !== null) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			create_component(statustracker.$$.fragment);
			t0 = space();
			create_component(blocklabel.$$.fragment);
			t1 = space();
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			mount_component(statustracker, target, anchor);
			insert_dev(target, t0, anchor);
			mount_component(blocklabel, target, anchor);
			insert_dev(target, t1, anchor);
			if_blocks[current_block_type_index].m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const statustracker_changes = (dirty & /*loading_status*/ 8)
			? get_spread_update(statustracker_spread_levels, [get_spread_object(/*loading_status*/ ctx[3])])
			: {};

			statustracker.$set(statustracker_changes);
			const blocklabel_changes = {};
			if (dirty & /*label*/ 4) blocklabel_changes.label = /*label*/ ctx[2];
			blocklabel.$set(blocklabel_changes);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(statustracker.$$.fragment, local);
			transition_in(blocklabel.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(statustracker.$$.fragment, local);
			transition_out(blocklabel.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(statustracker, detaching);
			if (detaching) detach_dev(t0);
			destroy_component(blocklabel, detaching);
			if (detaching) detach_dev(t1);
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(15:0) <Block {elem_id}>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let block;
	let current;

	block = new Block({
			props: {
				elem_id: /*elem_id*/ ctx[0],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block_1 = {
		c: function create() {
			create_component(block.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(block, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const block_changes = {};
			if (dirty & /*elem_id*/ 1) block_changes.elem_id = /*elem_id*/ ctx[0];

			if (dirty & /*$$scope, value, show_label, label, loading_status*/ 94) {
				block_changes.$$scope = { dirty, ctx };
			}

			block.$set(block_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(block.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(block.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(block, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block: block_1,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block_1;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Label', slots, []);
	let { elem_id = "" } = $$props;
	let { value } = $$props;
	let { label = "Label" } = $$props;
	let { loading_status } = $$props;
	let { show_label } = $$props;
	const dispatch = createEventDispatcher();
	const writable_props = ['elem_id', 'value', 'label', 'loading_status', 'show_label'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Label> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('loading_status' in $$props) $$invalidate(3, loading_status = $$props.loading_status);
		if ('show_label' in $$props) $$invalidate(4, show_label = $$props.show_label);
	};

	$$self.$capture_state = () => ({
		createEventDispatcher,
		Label,
		LabelIcon: LineChart,
		Block,
		BlockLabel,
		StatusTracker,
		elem_id,
		value,
		label,
		loading_status,
		show_label,
		dispatch
	});

	$$self.$inject_state = $$props => {
		if ('elem_id' in $$props) $$invalidate(0, elem_id = $$props.elem_id);
		if ('value' in $$props) $$invalidate(1, value = $$props.value);
		if ('label' in $$props) $$invalidate(2, label = $$props.label);
		if ('loading_status' in $$props) $$invalidate(3, loading_status = $$props.loading_status);
		if ('show_label' in $$props) $$invalidate(4, show_label = $$props.show_label);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*value*/ 2) {
			(dispatch("change"));
		}
	};

	return [elem_id, value, label, loading_status, show_label];
}

class Label_1 extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 0,
			value: 1,
			label: 2,
			loading_status: 3,
			show_label: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Label_1",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*value*/ ctx[1] === undefined && !('value' in props)) {
			console.warn("<Label> was created without expected prop 'value'");
		}

		if (/*loading_status*/ ctx[3] === undefined && !('loading_status' in props)) {
			console.warn("<Label> was created without expected prop 'loading_status'");
		}

		if (/*show_label*/ ctx[4] === undefined && !('show_label' in props)) {
			console.warn("<Label> was created without expected prop 'show_label'");
		}
	}

	get elem_id() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set elem_id(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get label() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set label(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get loading_status() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set loading_status(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get show_label() {
		throw new Error("<Label>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set show_label(value) {
		throw new Error("<Label>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var Label_1$1 = Label_1;

const modes = ["static"];

export { Label_1$1 as Component, modes };
