.. raw:: html

    <style> .navy {color:navy} </style>

.. role:: navy

.. raw:: html

    <style> .white {color:white} </style>

.. role:: white


#############
Scope & Usage
#############

Scope
-----

:navy:`SMAP design creates highly multiplex amplicon sequencing (HiPlex) primers and/or gRNA panels for genotyping CRISPR/Cas-induced or natural variation in a genepool`

:navy:`Highly multiplex amplicon sequencing`
++++++++++++++++++++++++++++++++++++++++++++

Amplicon sequencing is a cost-effective method for targetted sequencing of multiple genomic loci and identification of genome sequence diversity, including naturally occurring genetic variation in genepools and CRISPR/Cas-induced mutations. 
Mutation screens can be upscaled by multiplexing and/or pooling at various levels of the experimental design, and further help to reduce effort and cost of library preparation and sequencing, while increasing the coverage of the genomic targets, maintaining sensitivity for rare alleles, specificity of amplification, and assignment of detected allelic variants to their respective loci. 

| While screening for natural variation and CRISPR/Cas-induced mutations rely on the same techniques, specific parameters need to be considered for respective purposes. Nevertheless, if all parameters are optimized in a single integrated design, a HiPlex primer assay can be developed that allows for combined screening of materials across diverse and complementary sources.

:navy:`Design rules`
++++++++++++++++++++

* Robust, reliable primers should be designed that are mutually compatible in HiPlex assays.
* Primers should be specific to the target loci, and off-target primer binding should be avoided to ensure specific assignments of detected alleles to target loci.
* Multiple, non-overlapping amplicons may be designed to increase coverage of the targeted genome regions.
* Overlapping amplicons should be split in independent HiPlex assays, that together increase coverage of the target genome regions (see panel Natural variation below).
* Multiple gRNAs may be designed per target gene, to increase the chance of obtaining a mutation that effectively disrupts the gene function.
* Per gRNA, two flanking primers are designed to amplify the regions containing the anticipated CRISPR/Cas-induced mutation. 
* One amplicon may cover multiple gRNAs. 
* Multiple amplicons may be required to cover all potential gRNAs, but amplicons should be non-overlapping per HiPlex primer assay.
* Amplicon design parameters such as amplicon length depend on the downstream sequencing method (*e.g.* Sanger sequencing 400-800 bp; short-read Illumina 80-150 bp; long-read NGS 500-2000 bp).
* Amplicon design parameters such as distance between gRNA and primer binding site depend on the downstream sequencing method (*e.g.* Sanger sequencing minimal 150 bp; short-read Illumina minimal 15 bp; long-read NGS minimal 50 bp).

:navy:`Workflow`
++++++++++++++++

| **SMAP selection** facilitates easy selection of sets of target sequences for **SMAP design**.
| **SMAP selection** uses a list of candidate geneIDs and a genome GFF file to extract the corresponding sequences from a reference genome, orients all sequences with the CDS on the forward strand, and provides a new GFF with respective gene feature coordinates.
| **SMAP design** integrates all design rules and user-defined selection criteria and performs HiPlex primer design, optionally combined with gRNA selection, and scales from single genes to thousands of genes.
| **SMAP design** takes as input reference sequences of the target regions (FASTA and GFF) and designs highly specific non-overlapping amplicons to cover the target site. 
| **SMAP design** will generate *n* (*user-defined*) number of non-overlapping amplicons covering one or more gRNAs, selected from a list of gRNAs generated by *e.g.* CRISPOR or FlashFry.
| **SMAP design** ensures that the primers cannot misprime on the other target genes included in the reference sequence provided.

.. image:: ../images/design/Design_overview_scope.png

| The gRNAs are selected from list of gRNAs generated by *e.g.* CRISPOR or FlashFry, based on: 

* its sequence: only gRNAs without a poly-T stretch (â‰¥4T; a Pol III termination signal) or *Bsa*\ I or *Bbs*\ I restriction site are retained.
* its specificity: only gRNAs with a minimal *user-defined* MIT score are retained (default 80%).
* its position within the target region: only gRNAs targeting a *user-defined* central segment of the CDS, or specific critical domain, are retained.
* its position within the amplicon: only gRNAs that are positioned at minimal *user-defined* distance from both forward and reverse primer are retained.

:navy:`Input`
+++++++++++++

* A reference sequence FASTA file should include all target regions (*e.g.* sets of candidate genes, grouped by gene family or genetic pathway).
* In case sets of candidate genes are used as targets, the reference should include as many as possible paralogous sequences (or any other region with high sequence homology, BLAST hit, pseudogenes, etc.) to ensure primer specificity and minimal off-target primer binding. Precomputed gene families such as those retrieved from comparative genomics platforms as PLAZA are ideal for this. 
* All sequences in the reference sequence FASTA file should encode candidate genes on the positive strand (CDS orientation) to facilitate compatibility with downstream analysis (see Usage and options: *\-\-selectGenes*).
* The GFF file should contain at least the **genome_region** and the **CDS** features of all target regions. The coordinates of the features should correspond to their respective sequence in the reference sequence FASTA file. The GFF file can contain surplus target regions not present in the reference sequence FASTA file.
* The reference sequence FASTA and corresponding GFF file can be extracted from a reference genome sequence using **SMAP selection**.

:navy:`Output`
++++++++++++++

| **SMAP design** provides:

* a primer file (TSV file with the gene ID, primer ID and primer sequence).
* gRNA file (TSV file with the gene ID, gRNA ID and gRNA sequence).
* GFF file containing the selected primer and gRNA features (and all other features present in the input GFF file).


.. tabs::

   .. tab:: Primer file
          | Primer file
          .. csv-table:: Example of the first rows of the **primer file**
             :file: ../tables/design/WNK_SMAPdesign_primers.csv
             :widths: 20, 40, 40

   .. tab:: gRNA file
          | gRNA file
          .. csv-table:: Example of the first rows of the **gRNA file**
             :file: ../tables/design/WNK_SMAPdesign_gRNAs.csv
             :widths: 20, 40, 40

   .. tab:: GFF file
          | GFF file
          .. csv-table:: Example of the first rows of the **GFF file**
             :file: ../tables/design/WNK_SMAPdesign_gff.csv
             :header-rows: 1


| And optionally:

* a summary file (total number of amplicons designed by Primer3, total number of gRNAs designed, number of gRNAs after filtering).
* a summary plot showing the number of amplicons and gRNAs that were designed per gene.
* a SMAP (BED) file that is needed as input for downstream analysis with **SMAP haplotype-sites**.
* a border (GFF) file that is needed as input for downstream analysis with **SMAP haplotype-window**.
* a debug file (GFF file) containing all amplicons designed by Primer3 and all gRNAs from the input list before filtering.
* 'all-amplicons' files (GFF file, a primer and gRNA file) containing all amplicons with their respective gRNAs (not just the non-overlapping amplicons in the output files).

.. tabs::

   .. tab:: Summary file
          Summary file
          .. csv-table:: Example of the first rows of the **summary file**
             :file: ../tables/design/WNK_SMAPdesign_summary.csv
             :header-rows: 1

   .. tab:: Summary plot
          Summary plot
          .. image:: ../images/design/WNK_SMAPdesign_summaryPlot.png
          
          | This is an example of a summary plot that SMAP design generates for a run of 11 Arabidopsis genes. The box at the top shows general info on the run. In this example, 2 non-overlapping amplicons were requested per gene each with a maximum of 2 gRNAs. In total, SMAP design generated 22 amplicons.
          |
          | The top left bar graph (Non-overlapping amplicons per gene) shows the number of genes in function of the number of amplicons. In this case, for all **11** genes **2** amplicons were designed. No genes had 0 or 1 amplicon.
          |
          | The top right bar graph (gRNAs per gene) shows the number of genes in function of the number of gRNAs. In this case, for all **11** genes **4** gRNAs were given (2 gRNAs * 2 amplicons per gene).
          |
          | The middle left graph (gRNAs per amplicon) shows the number of amplicons in function of the number of gRNAs. In this case, all of the **22** amplicons that were designed covered **2** gRNAs.
          |
          | The middle right graph shows the underlying reason for not retaining amplicons. Four cases are possible: 1) no gRNAs were designed for the gene or no gRNAs passed the filters; 2) no amplicons were designed by Primer3; 3) the gene is too short to design any amplicons of the desired length; 4) there is no overlap between the gRNAs and amplicons.
          | In this example, SMAP design was successful for all 11 genes, which is why the graph is empty.
          |
          | The lower graph (Amplicons with and without gRNAs) shows the number of amplicons that were designed per gene. The grey bar shows the amplicons that were designed by Primer3 that did not overlap with any gRNAs (and are therefore discarded). The green bar shows the number of amplicons designed by Primer3 which did overlap with at least 1 gRNA. By adding both grey and green bars, the total number of amplicons designed by Primer3 per gene can be obtained. In this example a maximum of 150 amplicons was requested. The black line shows the length of the gene in basepairs.
          |
          | This is an example of a perfect design, meaning that for each gene 2 amplicons were designed each covering 2 gRNAs as requested. For more examples see :ref:`Example Data <SMAPdesignex>`.


Guidelines for gRNA design with CRISPOR, FlashFry or other
----------------------------------------------------------

.. _SMAPDesigngRNA:

CRISPOR and FlashFry
++++++++++++++++++++

| gRNA design can be performed with third-party software such as `CRISPOR <http://crispor.tefor.net/>`_ or `FlashFry <https://github.com/mckennfalab/FlashFry>`_

* gRNA sequences are provided to **SMAP design** as a TSV file with header (the first line of the gRNA file is skipped so a header is necessary but arbitrary).
* If the gRNAs are designed by **CRISPOR** or **FlashFry** the column order should be as shown in the respective examples (both 12 columns).
* By default **SMAP design** will assume the gRNAs are in the FlashFry format. Otherwise, the user should set ``--gRNAsource CRISPOR`` or ``--gRNAsource other``.
* FlashFry should be run with the following scoring metric parameter to obtain the desired output for SMAPdesign: ``--scoringMetrics doench2014ontarget,doench2016cfd,hsu2013``.
* **SMAP design** uses the specificity score (and to a lesser degree the efficiency score) to rank the gRNAs. Other scoring metrics can be used if desired (e.g. replacing the MIT score by the CFD score).
* Note that the doench score in the **FlashFry** output is from 0 to 1 (not 1 to 100 as for **CRISPOR**)

.. tabs::

   .. tab:: FlashFry
          | FlashFry gRNA file
          .. csv-table:: Example of the first rows of the gRNA file generated by **FlashFry**
             :file: ../tables/design/WNK_FlashFry_gRNA.csv
             :header-rows: 1

   .. tab:: FlashFry command line

           Basic commands to run **FlashFry**  
           
             ::

                #Create off-target database  
                
                mkdir .tmp
                java -Xmx4g -jar /usr/local/bin/FlashFry-assembly-1.12.jar index -tmpLocation ./tmp -database Arabidopsis_HOM0001 -reference Arabidopsis_HOM0001.fasta -enzyme spcas9ngg  
                
                #Discover gRNAs in reference sequences  
                
                java -Xmx4g -jar /usr/local/bin/FlashFry-assembly-1.12.jar discover --database Arabidopsis_HOM0001 --fasta Arabidopsis_HOM0001.fasta --output Arabidopsis_HOM0001_guides.fasta.off_targets  
                
                #Create scores per gRNA  
                
                java -Xmx4g -jar /usr/local/bin/FlashFry-assembly-1.12.jar score --input Arabidopsis_HOM0001_guides.fasta.off_targets --output Arabidopsis_HOM0001_guides.fasta.off_targets.scores --scoringMetrics doench2014ontarget,doench2016cfd,hsu2013  --database Arabidopsis_HOM0001  

   .. tab:: CRISPOR
          | CRISPOR gRNA file
          .. csv-table:: Example of the first rows of the gRNA file generated by **CRISPOR**
             :file: ../tables/design/WNK_CRISPOR_gRNA.csv
             :header-rows: 1

   .. tab:: CRISPOR command line

           Basic commands to run **CRISPOR**  
           
             ::

                #Create off-target database  
                
                mkdir .tmp
                java -Xmx4g -jar /usr/local/bin/FlashFry-assembly-1.12.jar index -tmpLocation ./tmp -database Arabidopsis_HOM0001 -reference Arabidopsis_HOM0001.fasta -enzyme spcas9ngg  
                
                #Discover gRNAs in reference sequences  
                
                java -Xmx4g -jar /usr/local/bin/FlashFry-assembly-1.12.jar discover --database Arabidopsis_HOM0001 --fasta Arabidopsis_HOM0001.fasta --output Arabidopsis_HOM0001_guides.fasta.off_targets  
                
                #Create scores per gRNA  
                
                java -Xmx4g -jar /usr/local/bin/FlashFry-assembly-1.12.jar score --input Arabidopsis_HOM0001_guides.fasta.off_targets --output Arabidopsis_HOM0001_guides.fasta.off_targets.scores --scoringMetrics doench2014ontarget,doench2016cfd,hsu2013  --database Arabidopsis_HOM0001  


Other
+++++

| CRISPOR and FlashFry both have the ability to calculate certain specificity and efficiency scores as seen in the example above: MIT score, Out-of-Frame score, Doench score, number of off-targets...
| It is not strictly necessary for **SMAP design** that the gRNAs are generated by either CRISPOR or FlashFry.

* if the gRNAs are generated by an other program (*e.g.* Geneious) this should be indicated by the ``--gRNAsource other`` parameter.
* gRNA sequences are provided as a TSV file with header (first line of the gRNA file is skipped so header is necessary but arbitrary).
* Columns should be provided in this order: GeneID, gRNAseq, MITscore, offTargets, doench, Out-of-Frame score
* If no specificity or efficiency scores are available, this should be indicated as 'NA'.
* The MIT score, Doench score and OOF score should be between 1 and 100.
* **SMAP design** uses the specificity score (and to a lesser degree the efficiency score) to rank the gRNAs. Other scoring metrics can be used if desired (e.g. replacing the MIT score by the CFD score).

| The tabs below show some examples of gRNA input files

.. tabs::

   .. tab:: No scores
          | No scores
          .. csv-table:: Example of a gRNA file without specificity or efficiency scores
             :file: ../tables/design/WNK_NoScores_gRNA.csv
             :header-rows: 1

   .. tab:: MIT and OOF score
          | MIT and OOF score
          .. csv-table:: Example of a gRNA file with the MIT and Out-of-Frame scores
             :file: ../tables/design/WNK_MITOOF_gRNA.csv
             :header-rows: 1

   .. tab:: MIT, offTargets, Doench, OOF
          | MIT, offTargets, Doench, OOF
          .. csv-table:: Example of a gRNA file with the MIT, offTargets, doench, and OOF
             :file: ../tables/design/WNK_MITdoenchOOFoffTargets_gRNA.csv
             :header-rows: 1

----

.. _SMAPdesignfilter:

Usage and options
-----------------

| **SMAP design** is a program written in Python3. There are four required packages:

1) pandas
2) primer3
3) matplotlib
4) biopython

| These can be installed using the pip command (pip install pandas primer3-py matplotlib biopython)

    ::

        git clone git@gitlab.com:ilvo/smap-design.git
        cd smap-design
        pip install pandas primer3-py matplotlib biopython
        python3 SMAPdesign.py exampleFiles/Arabidopsis_WNK_geneFamily.fasta exampleFiles/Arabidopsis_WNK_geneFamily.gff exampleFiles/Arabidopsis_WNK_geneFamily_FlashFry.tsv

The program has 2 positional arguments and multiple optional arguments.

:navy:`Mandatory options for SMAP design`

| If **SMAP design** is run to generate amplicons for natural variation screening only a FASTA and GFF file is needed. Both files can be obtained using **SMAP selection**.
| If **SMAP design** is run to generate gRNAs flanked by primers, a gRNA file should be given as well.


| ``FASTA file`` :white:`######` Path to the reference sequence FASTA file containing all target regions.
| ``GFF file`` :white:`########` Path to the GFF file containing at least the CDS of all target genes. The location of the features should correspond to the FASTA file.


A gRNA file can be given with the *-g* or *\-\-gRNAfile* parameter:

| ``-g or --gRNAfile`` :white:`##` Path to the gRNA file.

Basic command to run **SMAP design** with default parameters::

    python3 SMAPdesign.py genes.fasta genes.gff
    or
    python3 SMAPdesign.py genes.fasta genes.gff -g gRNAs.tsv


:navy:`Command line options`

See tabs below for specific options. Options may be given in any order.

.. tabs::

    .. tab:: General options

        **General options:**

          | ``FASTA file`` :white:`#####` *(str)* :white:`###` Path to the FASTA file containing all target genes [no default].
          | ``GFF file`` :white:`#######` *(str)* :white:`##` Path to the GFF file containing at least the CDS of all target genes. The location of the features should correspond to the FASTA file [no default].
          | ``-o``, ``--output`` :white:`####` *(str)* :white:`##` Basename for the outputfiles [SMAPdesign].
          | ``-sg``, ``--selectGenes`` :white:`######` Path to text file containing one gene name per line. These gene names refer to the names used in the FASTA file. If this option is used, only designs will be done for the genes listed in the text file. The other genes in the FASTA file, not mentioned in the text file, will still be used to check for mispriming by Primer3.
          | ``-d``, ``--distance`` :white:`###` *(int)* :white:`##` Minimum number of bases between the gRNA and primer. [15]
          | ``-b``, ``--border`` :white:`#####` *(int)* :white:`##` The length of the borders [10]. The borders are used for downstream analysis by SMAP.
          | ``-v``, ``--verbose`` :white:`##########` Verbose.


        Command to run **SMAP design** with specified FASTA and GFF file, a gRNA file, output name "MAP3K_SMAPdesign_output", a text file with a selection of genes to do the design on, and a minimum distance between primer and gRNA of 20 bases::

            python3 SMAPdesign.py genes.fasta genes.gff -g gRNAs.tsv -o MAP3K_SMAPdesign_output -sg geneSelection.txt -d 20

    .. tab:: **gRNA** options

        **gRNA options**

          | ``-g``, ``--gRNAfile`` :white:`#####` *(str)* :white:`###` Path to the gRNA file.
          | ``-gs``, ``--gRNAsource`` :white:`###` *(str)* :white:`###` Program used to generate the gRNAs, either CRISPOR, FlashFry, or other [FlashFry].
          | ``-ng``, ``--numbergRNAs`` :white:`###` *(int)* :white:`##` Maximum number of gRNAs to retain per amplicon [2].
          | ``-go``, ``--gRNAoverlap`` :white:`###` *(int)* :white:`##` Minimum number of bases between the start of two adjacent gRNAs [5].
          | ``-t``, ``--threshold`` :white:`######` *(int)* :white:`##` Minimum gRNA MIT score allowed. gRNAs with a score lower than the threshold are discarded [80].
          | ``-gl``, ``--gRNAlabel`` :white:`########` Label the gRNAs (gRNA1, gRNA2, gRNA3...) from left to right instead of from best to worst (based on specificity scores..).
          | ``-tr5``, ``--targetRegion5`` :white:`##` *(float)* :white:`##` The fraction of the coding sequence that cannot be targeted by the gRNAs at the 5' end as indicated by a float between 0 and 1 [0.2].
          | ``-tr3``, ``--targetRegion3`` :white:`##` *(float)* :white:`##` The fraction of the coding sequence that cannot be targeted by the gRNAs at the 3' end as indicated by a float between 0 and 1 [0.2].
          | ``-tsr``, ``--targetSpecificRegion`` :white:`##` *(str)* :white:`##` Only target a specific region in the gene indicated by the feature name in the GFF file.
          | ``-prom``, ``--promoter`` :white:`####` *(str)* :white:`##` Give the last 6 bases of the promoter that will be used to express the gRNA. This will be taken into account when checking for BsaI or BbsI sites in the gRNA. By default the U6 promoter is used [GTAGTG].
          | ``-scaf``, ``--scaffold`` :white:`####` *(str)* :white:`##` Give the first 6 bases of the scaffold that will be used. This will be taken into account when checking for BsaI or BbsI sites in the gRNA [GTTTTA].

        Command to run **SMAP design** with a gRNA file from CRISPOR, output name "MAP3K_SMAPdesign_output", verbose, maximum 1 gRNA per amplicon, an MIT threshold of 90, targetting the complete gene::

            python3 SMAPdesign.py genes.fasta genes.gff -g gRNAs.tsv, -gs CRISPOR --output "MAP3K_SMAPdesign_output" -v -ng 1 -t 90 -tr5 0 -tr3 0

    .. tab:: **Amplicon**  options

        **Amplicon options**

          | ``-na``, ``--numberAmplicons`` :white:`##` *(int)* :white:`##` The maximum number of non-overlapping amplicons in the output [2].
          | ``-minl``, ``--minimumAmpliconLength`` :white:`##` *(int)* :white:`##` The minimum length of the amplicons in base pairs [120].
          | ``-maxl``, ``--maximumAmpliconLength`` :white:`##` *(int)* :white:`##` The maximum length of the amplicons in base pairs [150].
          | ``-ga``, ``--generateAmplicons`` :white:`##` *(int)* :white:`##` Number of amplicons to generate per gene by Primer3. The more amplicons are designed by Primer3 the longer the run will be but the more choice there is to select for amplicons. To generate 50 amplicons per 1000 bases per gene enter -1 [150].
          | ``-pmlm``, ``--primerMaxLibraryMispriming`` :white:`##` *(int)* :white:`##` The maximum allowed weighted similarity of a primer with any sequence in the target gene set (Primer3 setting) [12].
          | ``-ppmlm``, ``--primerPairMaxLibraryMispriming`` :white:`##` *(int)* :white:`##` The maximum allowed sum of similarities of a primer pair (one similarity for each primer) with any single sequence in the target gene set (Primer3 setting) [24].
          | ``-pmtm``, ``--primerMaxTemplateMispriming`` :white:`##` *(int)* :white:`##` The maximum allowed similarity of a primer to ectopic sites in the template (Primer3 setting) [12].
          | ``-ppmtm``, ``--primerPairMaxTemplateMispriming`` :white:`##` *(int)* :white:`##` The maximum allowed summed similarity of both primers to ectopic sites in the template (Primer3 setting) [24].
          | ``-al``, ``--ampliconLabel`` :white:`##` Number the amplicons (Amplicon1, Amplicon2, Amplicon3...) from left to right instead of from best to worst (based on specificity scores..).
          | ``-mpa``, ``--misPrimingAllowed`` :white:`##` Do not check for mispriming in the gene set when designing primers. By default Primer3 will not allow primers that can prime at other target genes (i.e. other genes in the FASTA file).
          | ``-rpd``, ``--restrictPrimerDesign`` :white:`##` This option will restrict primer design in large introns, increasing the speed of amplicon design, especially useful for genes with large introns such as human genes.
          | ``-hp``, ``--homopolymer`` :white:`##` The minimum number of repeated identical nucleotides in an amplicon to be discarded. E.g. if this parameter is set to 8, amplicons containing a polymer of 8 As (-...AAAAAAAA...-), Ts, Gs, or Cs or more will not be used [10].


        Command to run **SMAP design** with a gRNA file from neither CRISPOR or FlashFry, 3 gRNAs per amplicon, 2 amplicons per gene, amplicons of length 400 - 800 bp, a primer-gRNA distance of 150 bp, not checking for mispriming between target genes, targeting only the first half of the genes, labeling amplicons and gRNAs from left to right and a minimum distance of 10 bases between adjacent gRNAs::

            python3 SMAPdesign.py genes.fasta genes.gff -g gRNAs.tsv -gs other -ng 3 -na 2 -minl 400 -maxl 800 -d 150 -mpa -tr5 0 -tr3 0.5 -gl -al -go 10

    .. tab:: **extra output files** options

        **Extra output files options**

          | ``-smy``, ``--summary`` :white:`######` Write summary file and plot of the output.
          | ``-bo``, ``--bordersOnly`` :white:`####` Write additional GFF and BED file with only borders (for downstream analysis with SMAP haplotype-sites or SMAP haplotype-window).
          | ``-aa``, ``--allAmplicons`` :white:`###` Write additional GFF, primer and gRNA file with all amplicons and their respective gRNAs per gene.
          | ``-db``, ``--debug`` :white:`########` Write additional GFF file with all amplicons designed by Primer3 and all gRNAs before filtering.

        Command to run **SMAP design** with a gRNA file from FlashFry, only targeting the kinase domains, with an adapted promoter, labeling the gRNAs from left to right, giving a summary, borders file, all-amplicons file and debug file::

            python3 SMAPdesign.py genes.fasta genes.gff -g gRNAs.tsv -tsr kinase -prom GTGGCA -gl -smy -bo -aa -db
