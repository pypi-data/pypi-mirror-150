<-utils.static;


@ Cursor {

    static @ move line column * {
        <-string.format;
        format(
            "\033[$l;$cf",
            {{
                "l" -> line,
                "c" -> column
            }}
        ) ~> /;
    }

    static @ home * {
        "\033[H" ~> /;
    }

    static @ getMovement n * {
        * "\033[" + n.toString();
    }

    static @ up n * {
        Cursor.getMovement(n) + "A" ~> /;
    }

    static @ down n * {
        Cursor.getMovement(n) + "B" ~> /;
    }

    static @ right n * {
        Cursor.getMovement(n) + "C" ~> /;
    }

    static @ left n * {
        Cursor.getMovement(n) + "D" ~> /;
    }
    == FIXME

}

@ Erase {

    static @ screen * {
        "\033[2J" ~> /;
    }

    static @ line * {
        "\033[2K" ~> /;
    }

}

@ Style {
    reset: "\033[0m";
    bold: "\033[1m";
    dim: "\033[2m";
    italic: "\033[3m";
    underline: "\033[4m";
    blink: "\033[5m";
    inverted: "\033[7m";
    hidden: "\033[8m";
    strikethrough: "\033[9m";
}

@ Color {

    static @ get color ground? bright? * {
        ground <> "fg";
        bright <> \;
        <-string.toLower;
        fgAliases: ["foreground", "fg"];
        bgAliases: ["background", "bg"];
        ? bright ~~ ->? [\, /] {
            "invalid argument for 'bright', has to be 0 or 1"!!!;
        }
        ? toLower(ground) ~~ ->? fgAliases + bgAliases {
            "invalid argument for 'ground', valid options are "
            + "'foreground', 'fg', 'background', 'bg' (case insensitive)"!!!;
        }

        30: ////\;
        color+: 30;
        ? toLower(ground) ->? bgAliases {
            color+: /\/\;
        }
        ? bright {
            color+: 30 ++ /\;
        }

        * "\033[" + color.toString() + "m";
    }

    static @ black ground? bright? * {
        * Color.get(\, ground, bright);
    }

    static @ red ground? bright? * {
        * Color.get(/, ground, bright);
    }

    static @ green ground? bright? * {
        * Color.get(/\, ground, bright);
    }

    static @ yellow ground? bright? * {
        * Color.get(//, ground, bright);
    }

    static @ blue ground? bright? * {
        * Color.get(/\\, ground, bright);
    }

    static @ magenta ground? bright? * {
        * Color.get(/\/, ground, bright);
    }

    static @ cyan ground? bright? * {
        * Color.get(//\, ground, bright);
    }

    static @ white ground? bright? * {
        * Color.get(///, ground, bright);
    }

}