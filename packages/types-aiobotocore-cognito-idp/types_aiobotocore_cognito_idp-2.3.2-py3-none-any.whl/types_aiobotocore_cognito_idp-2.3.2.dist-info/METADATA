Metadata-Version: 2.1
Name: types-aiobotocore-cognito-idp
Version: 2.3.2
Summary: Type annotations for aiobotocore.CognitoIdentityProvider 2.3.2 service generated with mypy-boto3-builder 7.5.14
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://mypy-boto3-builder.readthedocs.io/en/latest/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore cognito-idp type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions (>=4.1.0)

<a id="types-aiobotocore-cognito-idp"></a>

# types-aiobotocore-cognito-idp

[![PyPI - types-aiobotocore-cognito-idp](https://img.shields.io/pypi/v/types-aiobotocore-cognito-idp.svg?color=blue)](https://pypi.org/project/types-aiobotocore-cognito-idp)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-cognito-idp.svg?color=blue)](https://pypi.org/project/types-aiobotocore-cognito-idp)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-cognito-idp?color=blue)](https://pypistats.org/packages/types-aiobotocore-cognito-idp)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.CognitoIdentityProvider 2.3.2](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cognito-idp.html#CognitoIdentityProvider)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.5.14](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-cognito-idp docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_cognito_idp/)

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-cognito-idp](#types-aiobotocore-cognito-idp)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `CognitoIdentityProvider`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `CognitoIdentityProvider` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[cognito-idp]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[cognito-idp]'


# standalone installation
python -m pip install types-aiobotocore-cognito-idp
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-cognito-idp
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[cognito-idp]` in your environment:

```bash
python -m pip install 'types-aiobotocore[cognito-idp]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[cognito-idp]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[cognito-idp]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[cognito-idp]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[cognito-idp]` with services you use in your
  environment:

```bash
python -m pip install 'types-aiobotocore[cognito-idp]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[cognito-idp]` in your environment:

```bash
python -m pip install 'types-aiobotocore[cognito-idp]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[cognito-idp]` in your environment:

```bash
python -m pip install 'types-aiobotocore[cognito-idp]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`CognitoIdentityProviderClient` provides annotations for
`session.create_client("cognito-idp")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_cognito_idp import CognitoIdentityProviderClient

session = get_session()
async with session.create_client("cognito-idp") as client:
    client: CognitoIdentityProviderClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_cognito_idp.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_cognito_idp import CognitoIdentityProviderClient
from types_aiobotocore_cognito_idp.paginator import (
    AdminListGroupsForUserPaginator,
    AdminListUserAuthEventsPaginator,
    ListGroupsPaginator,
    ListIdentityProvidersPaginator,
    ListResourceServersPaginator,
    ListUserPoolClientsPaginator,
    ListUserPoolsPaginator,
    ListUsersPaginator,
    ListUsersInGroupPaginator,
)

session = get_session()
async with session.create_client("cognito-idp") as client:
    client: CognitoIdentityProviderClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        admin_list_groups_for_user_paginator: AdminListGroupsForUserPaginator = client.get_paginator("admin_list_groups_for_user")
        admin_list_user_auth_events_paginator: AdminListUserAuthEventsPaginator = client.get_paginator("admin_list_user_auth_events")
        list_groups_paginator: ListGroupsPaginator = client.get_paginator("list_groups")
        list_identity_providers_paginator: ListIdentityProvidersPaginator = client.get_paginator("list_identity_providers")
        list_resource_servers_paginator: ListResourceServersPaginator = client.get_paginator("list_resource_servers")
        list_user_pool_clients_paginator: ListUserPoolClientsPaginator = client.get_paginator("list_user_pool_clients")
        list_user_pools_paginator: ListUserPoolsPaginator = client.get_paginator("list_user_pools")
        list_users_paginator: ListUsersPaginator = client.get_paginator("list_users")
        list_users_in_group_paginator: ListUsersInGroupPaginator = client.get_paginator("list_users_in_group")
    ```







### Literals

`types_aiobotocore_cognito_idp.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_cognito_idp.literals import (
    AccountTakeoverEventActionTypeType,
    AdminListGroupsForUserPaginatorName,
    AdminListUserAuthEventsPaginatorName,
    AdvancedSecurityModeTypeType,
    AliasAttributeTypeType,
    AttributeDataTypeType,
    AuthFlowTypeType,
    ChallengeNameType,
    ChallengeNameTypeType,
    ChallengeResponseType,
    CompromisedCredentialsEventActionTypeType,
    CustomEmailSenderLambdaVersionTypeType,
    CustomSMSSenderLambdaVersionTypeType,
    DefaultEmailOptionTypeType,
    DeliveryMediumTypeType,
    DeviceRememberedStatusTypeType,
    DomainStatusTypeType,
    EmailSendingAccountTypeType,
    EventFilterTypeType,
    EventResponseTypeType,
    EventTypeType,
    ExplicitAuthFlowsTypeType,
    FeedbackValueTypeType,
    IdentityProviderTypeTypeType,
    ListGroupsPaginatorName,
    ListIdentityProvidersPaginatorName,
    ListResourceServersPaginatorName,
    ListUserPoolClientsPaginatorName,
    ListUserPoolsPaginatorName,
    ListUsersInGroupPaginatorName,
    ListUsersPaginatorName,
    MessageActionTypeType,
    OAuthFlowTypeType,
    PreventUserExistenceErrorTypesType,
    RecoveryOptionNameTypeType,
    RiskDecisionTypeType,
    RiskLevelTypeType,
    StatusTypeType,
    TimeUnitsTypeType,
    UserImportJobStatusTypeType,
    UserPoolMfaTypeType,
    UserStatusTypeType,
    UsernameAttributeTypeType,
    VerifiedAttributeTypeType,
    VerifySoftwareTokenResponseTypeType,
    CognitoIdentityProviderServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    RegionName,
)

def check_value(value: AccountTakeoverEventActionTypeType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_cognito_idp.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_cognito_idp.type_defs import (
    AccountRecoverySettingTypeTypeDef,
    AccountTakeoverActionTypeTypeDef,
    AccountTakeoverActionsTypeTypeDef,
    AccountTakeoverRiskConfigurationTypeTypeDef,
    AddCustomAttributesRequestRequestTypeDef,
    AdminAddUserToGroupRequestRequestTypeDef,
    AdminConfirmSignUpRequestRequestTypeDef,
    AdminCreateUserConfigTypeTypeDef,
    AdminCreateUserRequestRequestTypeDef,
    AdminCreateUserResponseTypeDef,
    AdminDeleteUserAttributesRequestRequestTypeDef,
    AdminDeleteUserRequestRequestTypeDef,
    AdminDisableProviderForUserRequestRequestTypeDef,
    AdminDisableUserRequestRequestTypeDef,
    AdminEnableUserRequestRequestTypeDef,
    AdminForgetDeviceRequestRequestTypeDef,
    AdminGetDeviceRequestRequestTypeDef,
    AdminGetDeviceResponseTypeDef,
    AdminGetUserRequestRequestTypeDef,
    AdminGetUserResponseTypeDef,
    AdminInitiateAuthRequestRequestTypeDef,
    AdminInitiateAuthResponseTypeDef,
    AdminLinkProviderForUserRequestRequestTypeDef,
    AdminListDevicesRequestRequestTypeDef,
    AdminListDevicesResponseTypeDef,
    AdminListGroupsForUserRequestAdminListGroupsForUserPaginateTypeDef,
    AdminListGroupsForUserRequestRequestTypeDef,
    AdminListGroupsForUserResponseTypeDef,
    AdminListUserAuthEventsRequestAdminListUserAuthEventsPaginateTypeDef,
    AdminListUserAuthEventsRequestRequestTypeDef,
    AdminListUserAuthEventsResponseTypeDef,
    AdminRemoveUserFromGroupRequestRequestTypeDef,
    AdminResetUserPasswordRequestRequestTypeDef,
    AdminRespondToAuthChallengeRequestRequestTypeDef,
    AdminRespondToAuthChallengeResponseTypeDef,
    AdminSetUserMFAPreferenceRequestRequestTypeDef,
    AdminSetUserPasswordRequestRequestTypeDef,
    AdminSetUserSettingsRequestRequestTypeDef,
    AdminUpdateAuthEventFeedbackRequestRequestTypeDef,
    AdminUpdateDeviceStatusRequestRequestTypeDef,
    AdminUpdateUserAttributesRequestRequestTypeDef,
    AdminUserGlobalSignOutRequestRequestTypeDef,
    AnalyticsConfigurationTypeTypeDef,
    AnalyticsMetadataTypeTypeDef,
    AssociateSoftwareTokenRequestRequestTypeDef,
    AssociateSoftwareTokenResponseTypeDef,
    AttributeTypeTypeDef,
    AuthEventTypeTypeDef,
    AuthenticationResultTypeTypeDef,
    ChallengeResponseTypeTypeDef,
    ChangePasswordRequestRequestTypeDef,
    CodeDeliveryDetailsTypeTypeDef,
    CompromisedCredentialsActionsTypeTypeDef,
    CompromisedCredentialsRiskConfigurationTypeTypeDef,
    ConfirmDeviceRequestRequestTypeDef,
    ConfirmDeviceResponseTypeDef,
    ConfirmForgotPasswordRequestRequestTypeDef,
    ConfirmSignUpRequestRequestTypeDef,
    ContextDataTypeTypeDef,
    CreateGroupRequestRequestTypeDef,
    CreateGroupResponseTypeDef,
    CreateIdentityProviderRequestRequestTypeDef,
    CreateIdentityProviderResponseTypeDef,
    CreateResourceServerRequestRequestTypeDef,
    CreateResourceServerResponseTypeDef,
    CreateUserImportJobRequestRequestTypeDef,
    CreateUserImportJobResponseTypeDef,
    CreateUserPoolClientRequestRequestTypeDef,
    CreateUserPoolClientResponseTypeDef,
    CreateUserPoolDomainRequestRequestTypeDef,
    CreateUserPoolDomainResponseTypeDef,
    CreateUserPoolRequestRequestTypeDef,
    CreateUserPoolResponseTypeDef,
    CustomDomainConfigTypeTypeDef,
    CustomEmailLambdaVersionConfigTypeTypeDef,
    CustomSMSLambdaVersionConfigTypeTypeDef,
    DeleteGroupRequestRequestTypeDef,
    DeleteIdentityProviderRequestRequestTypeDef,
    DeleteResourceServerRequestRequestTypeDef,
    DeleteUserAttributesRequestRequestTypeDef,
    DeleteUserPoolClientRequestRequestTypeDef,
    DeleteUserPoolDomainRequestRequestTypeDef,
    DeleteUserPoolRequestRequestTypeDef,
    DeleteUserRequestRequestTypeDef,
    DescribeIdentityProviderRequestRequestTypeDef,
    DescribeIdentityProviderResponseTypeDef,
    DescribeResourceServerRequestRequestTypeDef,
    DescribeResourceServerResponseTypeDef,
    DescribeRiskConfigurationRequestRequestTypeDef,
    DescribeRiskConfigurationResponseTypeDef,
    DescribeUserImportJobRequestRequestTypeDef,
    DescribeUserImportJobResponseTypeDef,
    DescribeUserPoolClientRequestRequestTypeDef,
    DescribeUserPoolClientResponseTypeDef,
    DescribeUserPoolDomainRequestRequestTypeDef,
    DescribeUserPoolDomainResponseTypeDef,
    DescribeUserPoolRequestRequestTypeDef,
    DescribeUserPoolResponseTypeDef,
    DeviceConfigurationTypeTypeDef,
    DeviceSecretVerifierConfigTypeTypeDef,
    DeviceTypeTypeDef,
    DomainDescriptionTypeTypeDef,
    EmailConfigurationTypeTypeDef,
    EventContextDataTypeTypeDef,
    EventFeedbackTypeTypeDef,
    EventRiskTypeTypeDef,
    ForgetDeviceRequestRequestTypeDef,
    ForgotPasswordRequestRequestTypeDef,
    ForgotPasswordResponseTypeDef,
    GetCSVHeaderRequestRequestTypeDef,
    GetCSVHeaderResponseTypeDef,
    GetDeviceRequestRequestTypeDef,
    GetDeviceResponseTypeDef,
    GetGroupRequestRequestTypeDef,
    GetGroupResponseTypeDef,
    GetIdentityProviderByIdentifierRequestRequestTypeDef,
    GetIdentityProviderByIdentifierResponseTypeDef,
    GetSigningCertificateRequestRequestTypeDef,
    GetSigningCertificateResponseTypeDef,
    GetUICustomizationRequestRequestTypeDef,
    GetUICustomizationResponseTypeDef,
    GetUserAttributeVerificationCodeRequestRequestTypeDef,
    GetUserAttributeVerificationCodeResponseTypeDef,
    GetUserPoolMfaConfigRequestRequestTypeDef,
    GetUserPoolMfaConfigResponseTypeDef,
    GetUserRequestRequestTypeDef,
    GetUserResponseTypeDef,
    GlobalSignOutRequestRequestTypeDef,
    GroupTypeTypeDef,
    HttpHeaderTypeDef,
    IdentityProviderTypeTypeDef,
    InitiateAuthRequestRequestTypeDef,
    InitiateAuthResponseTypeDef,
    LambdaConfigTypeTypeDef,
    ListDevicesRequestRequestTypeDef,
    ListDevicesResponseTypeDef,
    ListGroupsRequestListGroupsPaginateTypeDef,
    ListGroupsRequestRequestTypeDef,
    ListGroupsResponseTypeDef,
    ListIdentityProvidersRequestListIdentityProvidersPaginateTypeDef,
    ListIdentityProvidersRequestRequestTypeDef,
    ListIdentityProvidersResponseTypeDef,
    ListResourceServersRequestListResourceServersPaginateTypeDef,
    ListResourceServersRequestRequestTypeDef,
    ListResourceServersResponseTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    ListUserImportJobsRequestRequestTypeDef,
    ListUserImportJobsResponseTypeDef,
    ListUserPoolClientsRequestListUserPoolClientsPaginateTypeDef,
    ListUserPoolClientsRequestRequestTypeDef,
    ListUserPoolClientsResponseTypeDef,
    ListUserPoolsRequestListUserPoolsPaginateTypeDef,
    ListUserPoolsRequestRequestTypeDef,
    ListUserPoolsResponseTypeDef,
    ListUsersInGroupRequestListUsersInGroupPaginateTypeDef,
    ListUsersInGroupRequestRequestTypeDef,
    ListUsersInGroupResponseTypeDef,
    ListUsersRequestListUsersPaginateTypeDef,
    ListUsersRequestRequestTypeDef,
    ListUsersResponseTypeDef,
    MFAOptionTypeTypeDef,
    MessageTemplateTypeTypeDef,
    NewDeviceMetadataTypeTypeDef,
    NotifyConfigurationTypeTypeDef,
    NotifyEmailTypeTypeDef,
    NumberAttributeConstraintsTypeTypeDef,
    PaginatorConfigTypeDef,
    PasswordPolicyTypeTypeDef,
    ProviderDescriptionTypeDef,
    ProviderUserIdentifierTypeTypeDef,
    RecoveryOptionTypeTypeDef,
    ResendConfirmationCodeRequestRequestTypeDef,
    ResendConfirmationCodeResponseTypeDef,
    ResourceServerScopeTypeTypeDef,
    ResourceServerTypeTypeDef,
    RespondToAuthChallengeRequestRequestTypeDef,
    RespondToAuthChallengeResponseTypeDef,
    ResponseMetadataTypeDef,
    RevokeTokenRequestRequestTypeDef,
    RiskConfigurationTypeTypeDef,
    RiskExceptionConfigurationTypeTypeDef,
    SMSMfaSettingsTypeTypeDef,
    SchemaAttributeTypeTypeDef,
    SetRiskConfigurationRequestRequestTypeDef,
    SetRiskConfigurationResponseTypeDef,
    SetUICustomizationRequestRequestTypeDef,
    SetUICustomizationResponseTypeDef,
    SetUserMFAPreferenceRequestRequestTypeDef,
    SetUserPoolMfaConfigRequestRequestTypeDef,
    SetUserPoolMfaConfigResponseTypeDef,
    SetUserSettingsRequestRequestTypeDef,
    SignUpRequestRequestTypeDef,
    SignUpResponseTypeDef,
    SmsConfigurationTypeTypeDef,
    SmsMfaConfigTypeTypeDef,
    SoftwareTokenMfaConfigTypeTypeDef,
    SoftwareTokenMfaSettingsTypeTypeDef,
    StartUserImportJobRequestRequestTypeDef,
    StartUserImportJobResponseTypeDef,
    StopUserImportJobRequestRequestTypeDef,
    StopUserImportJobResponseTypeDef,
    StringAttributeConstraintsTypeTypeDef,
    TagResourceRequestRequestTypeDef,
    TokenValidityUnitsTypeTypeDef,
    UICustomizationTypeTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateAuthEventFeedbackRequestRequestTypeDef,
    UpdateDeviceStatusRequestRequestTypeDef,
    UpdateGroupRequestRequestTypeDef,
    UpdateGroupResponseTypeDef,
    UpdateIdentityProviderRequestRequestTypeDef,
    UpdateIdentityProviderResponseTypeDef,
    UpdateResourceServerRequestRequestTypeDef,
    UpdateResourceServerResponseTypeDef,
    UpdateUserAttributesRequestRequestTypeDef,
    UpdateUserAttributesResponseTypeDef,
    UpdateUserPoolClientRequestRequestTypeDef,
    UpdateUserPoolClientResponseTypeDef,
    UpdateUserPoolDomainRequestRequestTypeDef,
    UpdateUserPoolDomainResponseTypeDef,
    UpdateUserPoolRequestRequestTypeDef,
    UserContextDataTypeTypeDef,
    UserImportJobTypeTypeDef,
    UserPoolAddOnsTypeTypeDef,
    UserPoolClientDescriptionTypeDef,
    UserPoolClientTypeTypeDef,
    UserPoolDescriptionTypeTypeDef,
    UserPoolPolicyTypeTypeDef,
    UserPoolTypeTypeDef,
    UserTypeTypeDef,
    UsernameConfigurationTypeTypeDef,
    VerificationMessageTemplateTypeTypeDef,
    VerifySoftwareTokenRequestRequestTypeDef,
    VerifySoftwareTokenResponseTypeDef,
    VerifyUserAttributeRequestRequestTypeDef,
)

def get_structure() -> AccountRecoverySettingTypeTypeDef:
    return {
      ...
    }
```

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

## What's new

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

## Versioning

`types-aiobotocore-cognito-idp` version is the same as related `aiobotocore`
version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)
format.

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_cognito_idp/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


