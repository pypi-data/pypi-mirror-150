# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import ipython_pb2 as ipython__pb2


class KernelWrapperStub(object):
    """https://jupyter-client.readthedocs.io/en/stable/messaging.html#messages-on-the-iopub-pub-sub-channel

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteCode = channel.unary_stream(
                '/grpc.ipython.v1.KernelWrapper/ExecuteCode',
                request_serializer=ipython__pb2.ExecuteCodeRequest.SerializeToString,
                response_deserializer=ipython__pb2.ExecuteCodeReply.FromString,
                )
        self.ShutdownKernel = channel.unary_unary(
                '/grpc.ipython.v1.KernelWrapper/ShutdownKernel',
                request_serializer=ipython__pb2.ShutdownRequest.SerializeToString,
                response_deserializer=ipython__pb2.ShutdownResponse.FromString,
                )


class KernelWrapperServicer(object):
    """https://jupyter-client.readthedocs.io/en/stable/messaging.html#messages-on-the-iopub-pub-sub-channel

    """

    def ExecuteCode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShutdownKernel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KernelWrapperServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteCode': grpc.unary_stream_rpc_method_handler(
                    servicer.ExecuteCode,
                    request_deserializer=ipython__pb2.ExecuteCodeRequest.FromString,
                    response_serializer=ipython__pb2.ExecuteCodeReply.SerializeToString,
            ),
            'ShutdownKernel': grpc.unary_unary_rpc_method_handler(
                    servicer.ShutdownKernel,
                    request_deserializer=ipython__pb2.ShutdownRequest.FromString,
                    response_serializer=ipython__pb2.ShutdownResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.ipython.v1.KernelWrapper', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KernelWrapper(object):
    """https://jupyter-client.readthedocs.io/en/stable/messaging.html#messages-on-the-iopub-pub-sub-channel

    """

    @staticmethod
    def ExecuteCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.ipython.v1.KernelWrapper/ExecuteCode',
            ipython__pb2.ExecuteCodeRequest.SerializeToString,
            ipython__pb2.ExecuteCodeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShutdownKernel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.ipython.v1.KernelWrapper/ShutdownKernel',
            ipython__pb2.ShutdownRequest.SerializeToString,
            ipython__pb2.ShutdownResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
